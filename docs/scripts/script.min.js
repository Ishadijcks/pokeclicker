class App {
    static start() {
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(function () {
            UndergroundItem.initialize();
            App.game = new Game(new Breeding(), new Pokeballs(), new Wallet(), new KeyItems(), new BadgeCase(BadgeCase.Badge.Elite_JohtoChampion), new OakItems([20, 50, 100]), new Party(), new Farming(), new RedeemableCodes());
            Notifier.notify('Game loaded', GameConstants.NotificationOption.info);
            GameController.bindToolTips();
            GameController.addKeyListeners();
            PokedexHelper.populateTypeFilters();
            PokedexHelper.updateList();
            App.game.initialize();
            App.game.load();
            ko.applyBindings(App.game);
            ko.options.deferUpdates = true;
            GameController.applyRouteBindings();
            Preload.hideSplashScreen();
            App.game.start();
        });
    }
}
App.debug = false;
class ArrayOfObservables extends Array {
    constructor(array) {
        super();
        this.array = array;
        this._array = this.array.map((el) => {
            return ko.observable(el);
        });
        return new Proxy(this._array, ArrayOfObservables.proxyHandler);
    }
}
ArrayOfObservables.proxyHandler = {
    get: function (target, prop) {
        if (ko.isObservable(target[prop])) {
            return target[prop]();
        }
        else {
            return Reflect.get(target, prop);
        }
    },
    set: function (target, prop, value) {
        if (Array.prototype.hasOwnProperty(prop)) {
            return Reflect.set(target, prop, value);
        }
        if (ko.isObservable(target[prop])) {
            target[prop](value);
        }
        else {
            target[prop] = ko.observable(value);
        }
        return true;
    },
};
class Evolution {
    constructor(basePokemon, evolvedPokemon, type) {
        this.basePokemon = basePokemon;
        this.evolvedPokemon = evolvedPokemon;
        this.type = type;
    }
    isSatisfied() {
        return false;
    }
    evolve(notification = false) {
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(this.evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        if (notification) {
            Notifier.notify(`Your ${this.basePokemon} evolved into a ${this.evolvedPokemon}`, GameConstants.NotificationOption.success);
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(this.evolvedPokemon).id, shiny);
        return shiny;
    }
}
var EvolutionType;
(function (EvolutionType) {
    EvolutionType[EvolutionType["Level"] = 0] = "Level";
    EvolutionType[EvolutionType["Stone"] = 1] = "Stone";
    EvolutionType[EvolutionType["Other"] = 2] = "Other";
})(EvolutionType || (EvolutionType = {}));
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class LevelEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, level) {
        super(basePokemon, evolvedPokemon, EvolutionType.Level);
        this.level = level;
    }
    isSatisfied() {
        return App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).level >= this.level;
    }
    evolve() {
        if (this.triggered) {
            return false;
        }
        this.triggered = true;
        // We have already obtained the evolution
        if (App.game.party.alreadyCaughtPokemonByName(this.evolvedPokemon)) {
            return false;
        }
        return super.evolve(true);
    }
}
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class StoneEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, stone) {
        super(basePokemon, evolvedPokemon, EvolutionType.Level);
        this.stone = stone;
    }
    isSatisfied() {
        return true;
    }
}
class BadgeCase {
    constructor(highestBadge) {
        this.name = 'Badge Case';
        this.saveKey = 'badgeCase';
        this.defaults = {};
        this.badgeAmount = highestBadge + 1;
        this.badgeList = this.createDefaultBadgeList();
    }
    createDefaultBadgeList() {
        const list = new Array(this.badgeAmount).fill(false);
        return new ArrayOfObservables(list);
    }
    badgeCount() {
        let count = 0;
        for (let i = 0; i < this.badgeList.length; i++) {
            if (this.badgeList[i]) {
                count++;
            }
        }
        return count;
    }
    gainBadge(badge) {
        this.badgeList[badge] = true;
    }
    hasBadge(badge) {
        if (badge == null || badge == BadgeCase.Badge.None) {
            return true;
        }
        return this.badgeList[badge];
    }
    initialize() {
        // This method intentionally left blank
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        for (let i = 0; i < this.badgeList.length; i++) {
            this.badgeList[i] = json[i];
        }
    }
    toJSON() {
        return this.badgeList.map(badge => {
            return badge;
        });
    }
    update(delta) {
        // This method intentionally left blank
    }
}
(function (BadgeCase) {
    let Badge;
    (function (Badge) {
        Badge[Badge["None"] = 0] = "None";
        Badge[Badge["Boulder"] = 1] = "Boulder";
        Badge[Badge["Cascade"] = 2] = "Cascade";
        Badge[Badge["Thunder"] = 3] = "Thunder";
        Badge[Badge["Rainbow"] = 4] = "Rainbow";
        Badge[Badge["Soul"] = 5] = "Soul";
        Badge[Badge["Marsh"] = 6] = "Marsh";
        Badge[Badge["Volcano"] = 7] = "Volcano";
        Badge[Badge["Earth"] = 8] = "Earth";
        Badge[Badge["Elite_Lorelei"] = 9] = "Elite_Lorelei";
        Badge[Badge["Elite_Bruno"] = 10] = "Elite_Bruno";
        Badge[Badge["Elite_Agatha"] = 11] = "Elite_Agatha";
        Badge[Badge["Elite_Lance"] = 12] = "Elite_Lance";
        Badge[Badge["Elite_KantoChampion"] = 13] = "Elite_KantoChampion";
        Badge[Badge["Zephyr"] = 14] = "Zephyr";
        Badge[Badge["Hive"] = 15] = "Hive";
        Badge[Badge["Plain"] = 16] = "Plain";
        Badge[Badge["Fog"] = 17] = "Fog";
        Badge[Badge["Storm"] = 18] = "Storm";
        Badge[Badge["Mineral"] = 19] = "Mineral";
        Badge[Badge["Glacier"] = 20] = "Glacier";
        Badge[Badge["Rising"] = 21] = "Rising";
        Badge[Badge["Elite_Will"] = 22] = "Elite_Will";
        Badge[Badge["Elite_Koga"] = 23] = "Elite_Koga";
        Badge[Badge["Elite_Bruno2"] = 24] = "Elite_Bruno2";
        Badge[Badge["Elite_Karen"] = 25] = "Elite_Karen";
        Badge[Badge["Elite_JohtoChampion"] = 26] = "Elite_JohtoChampion";
        Badge[Badge["Stone"] = 27] = "Stone";
        Badge[Badge["Knuckle"] = 28] = "Knuckle";
        Badge[Badge["Dynamo"] = 29] = "Dynamo";
        Badge[Badge["Heat"] = 30] = "Heat";
        Badge[Badge["Balance"] = 31] = "Balance";
        Badge[Badge["Feather"] = 32] = "Feather";
        Badge[Badge["Mind"] = 33] = "Mind";
        Badge[Badge["Rain"] = 34] = "Rain";
        Badge[Badge["Elite_Sidney"] = 35] = "Elite_Sidney";
        Badge[Badge["Elite_Phoebe"] = 36] = "Elite_Phoebe";
        Badge[Badge["Elite_Glacia"] = 37] = "Elite_Glacia";
        Badge[Badge["Elite_Drake"] = 38] = "Elite_Drake";
        Badge[Badge["Elite_HoennChampion"] = 39] = "Elite_HoennChampion";
    })(Badge = BadgeCase.Badge || (BadgeCase.Badge = {}));
})(BadgeCase || (BadgeCase = {}));
///<reference path="./badgeCase/BadgeCase.ts" />
/**
 * Contains all game constants for easy access.
 */
var GameConstants;
(function (GameConstants) {
    // Ticks
    GameConstants.TICK_TIME = 100;
    GameConstants.BATTLE_TICK = 1000;
    GameConstants.UNDERGROUND_TICK = 1000;
    GameConstants.DUNGEON_TIME = 6000;
    GameConstants.DUNGEON_TICK = 10;
    GameConstants.EFFECT_ENGINE_TICK = 1000;
    GameConstants.SAVE_TICK = 10000;
    GameConstants.GYM_TIME = 3000;
    GameConstants.GYM_COUNTDOWN = 1000;
    GameConstants.GYM_TICK = 10;
    GameConstants.ACHIEVEMENT_TICK = 1000;
    GameConstants.MIN_LOAD_TIME = 500;
    GameConstants.MAX_AVAILABLE_REGION = 1;
    GameConstants.TotalPokemonsPerRegion = [
        151,
        251,
        386,
        493,
        649,
        721,
        809,
    ];
    GameConstants.ITEM_USE_TIME = 30;
    GameConstants.ROAMING_MIN_CHANCE = 8192;
    GameConstants.ROAMING_MAX_CHANCE = 4096;
    GameConstants.RoamingPokemon = {
        0: ['Mew'],
        1: ['Raikou', 'Entei', 'Suicune'],
    };
    // Shinies
    GameConstants.SHINY_CHANCE_BATTLE = 8192;
    GameConstants.SHINY_CHANCE_DUNGEON = 4096;
    GameConstants.SHINY_CHANCE_BREEDING = 1024;
    GameConstants.SHINY_CHANCE_SHOP = 2048;
    GameConstants.SHINY_CHANCE_STONE = 4096;
    GameConstants.SHINY_CHANCE_SAFARI = 2048;
    GameConstants.ITEM_PRICE_MULTIPLIER = 1.001;
    GameConstants.ITEM_PRICE_DEDUCT = 1.0005;
    GameConstants.PLATE_VALUE = 100;
    // Breeding
    GameConstants.BREEDING_AMOUNT = 1;
    GameConstants.BREEDING_ATTACK_BONUS = 25;
    GameConstants.BerryDistribution = [0.39, 0.63, 0.78, 0.87, 0.93, 0.96, 0.98, 1];
    // Dungeons
    GameConstants.DUNGEON_SIZE = 5;
    GameConstants.DUNGEON_CHEST_SHOW = 2;
    GameConstants.DUNGEON_MAP_SHOW = 4;
    // Achievements
    let AchievementOption;
    (function (AchievementOption) {
        AchievementOption[AchievementOption["less"] = 0] = "less";
        AchievementOption[AchievementOption["equal"] = 1] = "equal";
        AchievementOption[AchievementOption["more"] = 2] = "more";
    })(AchievementOption = GameConstants.AchievementOption || (GameConstants.AchievementOption = {}));
    let NotificationOption;
    (function (NotificationOption) {
        NotificationOption[NotificationOption["info"] = 0] = "info";
        NotificationOption[NotificationOption["success"] = 1] = "success";
        NotificationOption[NotificationOption["warning"] = 2] = "warning";
        NotificationOption[NotificationOption["danger"] = 3] = "danger";
    })(NotificationOption = GameConstants.NotificationOption || (GameConstants.NotificationOption = {}));
    let DungeonTile;
    (function (DungeonTile) {
        DungeonTile[DungeonTile["empty"] = 0] = "empty";
        DungeonTile[DungeonTile["enemy"] = 1] = "enemy";
        DungeonTile[DungeonTile["chest"] = 2] = "chest";
        DungeonTile[DungeonTile["boss"] = 3] = "boss";
    })(DungeonTile = GameConstants.DungeonTile || (GameConstants.DungeonTile = {}));
    //Shards
    GameConstants.SHARD_UPGRADE_COST = 500;
    GameConstants.SHARD_UPGRADE_STEP = 0.1;
    GameConstants.MAX_SHARD_UPGRADES = 10;
    GameConstants.DUNGEON_SHARDS = 3;
    GameConstants.DUNGEON_BOSS_SHARDS = 20;
    GameConstants.GYM_SHARDS = 5;
    //Safari
    GameConstants.Safari = {
        'SizeY': Math.floor((window.innerHeight - 150) / 32),
        'SizeX': 25,
    };
    GameConstants.SAFARI_BATTLE_CHANCE = 5;
    GameConstants.SAFARI_BASE_POKEBALL_COUNT = 30;
    GameConstants.LEGAL_WALK_BLOCKS = [
        0,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
    ];
    GameConstants.SAFARI_OUT_OF_BALLS = 'Game Over!<br>You have run out of safari balls to use.';
    //Quests
    // Numbers calculated by Dimava assumes ability to 1 shot on high routes and some use oak items,
    //   which are now nerfed slightly until upgraded, so those numbers may need further adjusting
    const questBase = 1; // change this to scale all quest points
    GameConstants.DEFEAT_POKEMONS_BASE_REWARD = questBase * 1;
    GameConstants.CAPTURE_POKEMONS_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD / 0.8; // Defeat reward divided by chance to catch (guessed)
    GameConstants.GAIN_MONEY_BASE_REWARD = questBase * 0.0017; // Dimava
    GameConstants.GAIN_TOKENS_BASE_REWARD = GameConstants.CAPTURE_POKEMONS_BASE_REWARD / 13; // <route number> tokens gained for every capture
    GameConstants.HATCH_EGGS_BASE_REWARD = questBase * 33; // Dimava
    GameConstants.MINE_LAYERS_BASE_REWARD = questBase * 720; // Average of 1/4 squares revealed = 75 energy ~ 12 minutes ~ 720 pokemons
    GameConstants.SHINY_BASE_REWARD = questBase * 6000; // Dimava
    GameConstants.USE_OAK_ITEM_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD; // not balanced at all for some oak items
    GameConstants.ACTIVE_QUEST_MULTIPLIER = 4;
    GameConstants.QuestTypes = [
        'DefeatPokemons',
        'CapturePokemons',
        'GainMoney',
        'GainTokens',
        'GainShards',
        'HatchEggs',
        'MineLayers',
        'CatchShinies',
        'DefeatGym',
        'DefeatDungeon',
        'UsePokeball',
        'UseOakItem',
        'HarvestBerriesQuest',
    ];
    GameConstants.QUESTS_PER_SET = 10;
    /**
     * idle: The game is not doing anything, the battle view isn't shown
     * paused: The battle view is shown, but there are no game ticks
     * fighting: On a route and battling a pokemon
     * gym: Battling a gym
     * dungeon: Exploring a dungeon
     * safari: Exploring the safari zone
     * town: In a town/pre-dungeon, town view is not shown
     */
    let GameState;
    (function (GameState) {
        GameState[GameState["idle"] = 0] = "idle";
        GameState[GameState["paused"] = 1] = "paused";
        GameState[GameState["fighting"] = 2] = "fighting";
        GameState[GameState["gym"] = 3] = "gym";
        GameState[GameState["dungeon"] = 4] = "dungeon";
        GameState[GameState["safari"] = 5] = "safari";
        GameState[GameState["town"] = 6] = "town";
        GameState[GameState["shop"] = 7] = "shop";
    })(GameState = GameConstants.GameState || (GameConstants.GameState = {}));
    let Pokeball;
    (function (Pokeball) {
        Pokeball[Pokeball["None"] = -1] = "None";
        Pokeball[Pokeball["Pokeball"] = 0] = "Pokeball";
        Pokeball[Pokeball["Greatball"] = 1] = "Greatball";
        Pokeball[Pokeball["Ultraball"] = 2] = "Ultraball";
        Pokeball[Pokeball["Masterball"] = 3] = "Masterball";
    })(Pokeball = GameConstants.Pokeball || (GameConstants.Pokeball = {}));
    let Currency;
    (function (Currency) {
        Currency[Currency["money"] = 0] = "money";
        Currency[Currency["questPoint"] = 1] = "questPoint";
        Currency[Currency["dungeonToken"] = 2] = "dungeonToken";
        Currency[Currency["diamond"] = 3] = "diamond";
        Currency[Currency["farmPoint"] = 4] = "farmPoint";
    })(Currency = GameConstants.Currency || (GameConstants.Currency = {}));
    let TypeEffectiveness;
    (function (TypeEffectiveness) {
        TypeEffectiveness[TypeEffectiveness["Immune"] = 0] = "Immune";
        TypeEffectiveness[TypeEffectiveness["NotVery"] = 1] = "NotVery";
        TypeEffectiveness[TypeEffectiveness["Normal"] = 2] = "Normal";
        TypeEffectiveness[TypeEffectiveness["Very"] = 3] = "Very";
    })(TypeEffectiveness = GameConstants.TypeEffectiveness || (GameConstants.TypeEffectiveness = {}));
    let TypeEffectivenessValue;
    (function (TypeEffectivenessValue) {
        TypeEffectivenessValue[TypeEffectivenessValue["Immune"] = 0] = "Immune";
        TypeEffectivenessValue[TypeEffectivenessValue["NotVery"] = 0.5] = "NotVery";
        TypeEffectivenessValue[TypeEffectivenessValue["Normal"] = 1] = "Normal";
        TypeEffectivenessValue[TypeEffectivenessValue["Very"] = 2] = "Very";
    })(TypeEffectivenessValue = GameConstants.TypeEffectivenessValue || (GameConstants.TypeEffectivenessValue = {}));
    function humanifyString(str) {
        return str.replace(/_/g, ' ');
    }
    GameConstants.humanifyString = humanifyString;
    function formatTime(time) {
        if (time == 0) {
            return 'Ready';
        }
        time = parseInt(`${time}`, 10); // don't forget the second param
        const hours = `${Math.floor(time / 3600)}`.padStart(2, '0');
        const minutes = `${Math.floor((time - (hours * 3600)) / 60)}`.padStart(2, '0');
        const seconds = `${time - (hours * 3600) - (minutes * 60)}`.padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    }
    GameConstants.formatTime = formatTime;
    let Region;
    (function (Region) {
        Region[Region["kanto"] = 0] = "kanto";
        Region[Region["johto"] = 1] = "johto";
        Region[Region["hoenn"] = 2] = "hoenn";
        Region[Region["sinnoh"] = 3] = "sinnoh";
        Region[Region["unova"] = 4] = "unova";
        Region[Region["kalos"] = 5] = "kalos";
        Region[Region["alola"] = 6] = "alola";
        Region[Region["galar"] = 7] = "galar";
    })(Region = GameConstants.Region || (GameConstants.Region = {}));
    class Option {
        constructor(text, value) {
            this.text = text;
            this.value = value;
        }
    }
    GameConstants.Option = Option;
    GameConstants.RegionRoute = {
        0: [1, 25],
        1: [26, 48],
        2: [101, 134],
    };
    function randomIntBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    GameConstants.randomIntBetween = randomIntBetween;
    function randomElement(array) {
        return array[GameConstants.randomIntBetween(0, array.length - 1)];
    }
    GameConstants.randomElement = randomElement;
    function clipNumber(num, min, max) {
        return Math.min(Math.max(num, min), max);
    }
    GameConstants.clipNumber = clipNumber;
    GameConstants.TypeColor = [
        '#A8A77A',
        '#EE8130',
        '#6390F0',
        '#F7D02C',
        '#7AC74C',
        '#96D9D6',
        '#C22E28',
        '#A33EA1',
        '#E2BF65',
        '#A98FF3',
        '#F95587',
        '#A6B91A',
        '#B6A136',
        '#735797',
        '#6F35FC',
        '#705746',
        '#B7B7CE',
        '#D685AD',
    ];
    // Map navigation
    GameConstants.AMOUNT_OF_ROUTES = 134;
    GameConstants.AMOUNT_OF_ROUTES_KANTO = 25;
    GameConstants.ROUTE_KILLS_NEEDED = 10;
    /**
     * Each route contains a list of routenumbers that need to be completed
     * Access with routeRequirements.region.routeNumber
     */
    GameConstants.routeRequirements = {
        0: {
            1: [],
            2: [1],
            3: [2],
            4: [3],
            5: [4],
            6: [5],
            7: [5, 10],
            8: [5, 6, 7],
            9: [4],
            10: [9],
            11: [6],
            12: [7, 10, 11],
            13: [11, 12],
            14: [13],
            15: [14],
            16: [8],
            17: [16],
            18: [17],
            19: [15, 18],
            20: [19],
            21: [20],
            22: [1],
            23: [22],
            24: [4],
            25: [24],
        },
        1: {
            30: [29],
            31: [30],
            33: [32],
            36: [35],
            37: [36],
            39: [38],
            40: [39],
            41: [40],
            46: [45],
            26: [46],
            27: [26],
        },
        2: {
            102: [101],
            103: [101],
            104: [102],
            105: [104],
            106: [105],
            107: [106],
            108: [107],
            109: [108],
            110: [116],
            111: [117],
            112: [111],
            113: [111],
            114: [113],
            115: [114],
            116: [104],
            117: [110],
            118: [117],
            119: [118],
            120: [119],
            121: [120],
            122: [121],
            123: [122],
            124: [121],
            125: [124],
            126: [125],
            127: [126],
            128: [127],
            129: [128],
            130: [129],
            131: [130],
            132: [131],
            133: [132],
            134: [133],
        },
    };
    GameConstants.routeBadgeRequirements = {
        0: {
            3: BadgeCase.Badge.Boulder,
            5: BadgeCase.Badge.Cascade,
            7: BadgeCase.Badge.Thunder,
            8: BadgeCase.Badge.Thunder,
            9: BadgeCase.Badge.Cascade,
            11: BadgeCase.Badge.Thunder,
            12: BadgeCase.Badge.Marsh,
            13: BadgeCase.Badge.Marsh,
            16: BadgeCase.Badge.Marsh,
            19: BadgeCase.Badge.Soul,
            21: BadgeCase.Badge.Volcano,
            22: BadgeCase.Badge.Earth,
            24: BadgeCase.Badge.Cascade,
        },
        1: {
            28: BadgeCase.Badge.Elite_JohtoChampion,
            32: BadgeCase.Badge.Zephyr,
            34: BadgeCase.Badge.Hive,
            35: BadgeCase.Badge.Plain,
            38: BadgeCase.Badge.Fog,
            42: BadgeCase.Badge.Mineral,
            43: BadgeCase.Badge.Glacier,
            44: BadgeCase.Badge.Glacier,
            45: BadgeCase.Badge.Rising,
        },
        2: {
            116: BadgeCase.Badge.Stone,
            117: BadgeCase.Badge.Knuckle,
            111: BadgeCase.Badge.Dynamo,
            112: BadgeCase.Badge.Heat,
            105: BadgeCase.Badge.Balance,
            118: BadgeCase.Badge.Balance,
            120: BadgeCase.Badge.Feather,
            126: BadgeCase.Badge.Mind,
            127: BadgeCase.Badge.Rain,
        },
    };
    GameConstants.WaterRoutes = {
        0: new Set([19, 20, 21]),
        1: new Set([40, 41]),
        2: new Set([105, 106, 107, 108, 109, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134]),
    };
    GameConstants.routeDungeonRequirements = {
        0: {
            4: 'Mt. Moon',
            20: 'Seafoam Islands',
        },
        1: {
            33: 'Union Cave',
            34: 'Ilex Forest',
        },
        2: {
            116: 'Petalburg Woods',
            110: 'Granite Cave',
            113: 'Fiery Path',
            115: 'Meteor Falls',
            112: 'Jagged Pass',
            124: 'Mt. Pyre',
            128: 'Seafloor Cavern',
        },
    };
    let Starter;
    (function (Starter) {
        Starter[Starter["None"] = -1] = "None";
        Starter[Starter["Bulbasaur"] = 0] = "Bulbasaur";
        Starter[Starter["Charmander"] = 1] = "Charmander";
        Starter[Starter["Squirtle"] = 2] = "Squirtle";
    })(Starter = GameConstants.Starter || (GameConstants.Starter = {}));
    GameConstants.ItemPrice = {
        // Money
        'Pokeball': 100,
        'Greatball': 500,
        'Ultraball': 2000,
        'Masterball': 2500,
        'xAttack': 600,
        'xClick': 400,
        'xExp': 800,
        'Token_collector': 1000,
        'Item_magnet': 1500,
        'Lucky_incense': 2000,
        'SmallRestore': 20000,
        'MediumRestore': 40000,
        'LargeRestore': 100000,
        'PokeBlock': Infinity,
        'Protein': Infinity,
        'RareCandy': Infinity,
        // Quest points
        'Eevee': 5000,
        'Porygon': 2000,
        'Jynx': 2500,
        'Mr. Mime': 1500,
        'Lickitung': 1000,
        'Togepi': 2500,
        // TODO: Set prices for different kinds of eggs and stones
        'Egg': 1000,
        'EvolutionStone': 2500,
    };
    let StoneType;
    (function (StoneType) {
        StoneType[StoneType["None"] = -1] = "None";
        StoneType[StoneType["Fire_stone"] = 0] = "Fire_stone";
        StoneType[StoneType["Water_stone"] = 1] = "Water_stone";
        StoneType[StoneType["Thunder_stone"] = 2] = "Thunder_stone";
        StoneType[StoneType["Leaf_stone"] = 3] = "Leaf_stone";
        StoneType[StoneType["Moon_stone"] = 4] = "Moon_stone";
        StoneType[StoneType["Sun_stone"] = 5] = "Sun_stone";
        StoneType[StoneType["Trade_stone"] = 6] = "Trade_stone";
        StoneType[StoneType["Dragon_scale"] = 7] = "Dragon_scale";
        StoneType[StoneType["Metal_coat"] = 8] = "Metal_coat";
        StoneType[StoneType["Kings_rock"] = 9] = "Kings_rock";
        StoneType[StoneType["Upgrade"] = 10] = "Upgrade";
        StoneType[StoneType["Time_stone"] = 11] = "Time_stone";
    })(StoneType = GameConstants.StoneType || (GameConstants.StoneType = {}));
    let BattleItemType;
    (function (BattleItemType) {
        BattleItemType["xAttack"] = "xAttack";
        BattleItemType["xClick"] = "xClick";
        BattleItemType["xExp"] = "xExp";
        BattleItemType["Token_collector"] = "Token_collector";
        BattleItemType["Item_magnet"] = "Item_magnet";
        BattleItemType["Lucky_incense"] = "Lucky_incense";
    })(BattleItemType = GameConstants.BattleItemType || (GameConstants.BattleItemType = {}));
    let PokemonItemType;
    (function (PokemonItemType) {
        PokemonItemType[PokemonItemType["Eevee"] = 0] = "Eevee";
        PokemonItemType[PokemonItemType["Porygon"] = 1] = "Porygon";
        PokemonItemType[PokemonItemType["Jynx"] = 2] = "Jynx";
        PokemonItemType[PokemonItemType["Mr. Mime"] = 3] = "Mr. Mime";
        PokemonItemType[PokemonItemType["Lickitung"] = 4] = "Lickitung";
        PokemonItemType[PokemonItemType["Togepi"] = 5] = "Togepi";
    })(PokemonItemType = GameConstants.PokemonItemType || (GameConstants.PokemonItemType = {}));
    let PokeBlockColor;
    (function (PokeBlockColor) {
        PokeBlockColor[PokeBlockColor["Black"] = 0] = "Black";
        PokeBlockColor[PokeBlockColor["Red"] = 1] = "Red";
        PokeBlockColor[PokeBlockColor["Gold"] = 2] = "Gold";
        PokeBlockColor[PokeBlockColor["Purple"] = 3] = "Purple";
        PokeBlockColor[PokeBlockColor["Gray"] = 4] = "Gray";
        PokeBlockColor[PokeBlockColor["White"] = 5] = "White";
    })(PokeBlockColor = GameConstants.PokeBlockColor || (GameConstants.PokeBlockColor = {}));
    let VitaminType;
    (function (VitaminType) {
        VitaminType[VitaminType["Protein"] = 0] = "Protein";
        VitaminType[VitaminType["RareCandy"] = 1] = "RareCandy";
    })(VitaminType = GameConstants.VitaminType || (GameConstants.VitaminType = {}));
    let EnergyRestoreSize;
    (function (EnergyRestoreSize) {
        EnergyRestoreSize[EnergyRestoreSize["SmallRestore"] = 0] = "SmallRestore";
        EnergyRestoreSize[EnergyRestoreSize["MediumRestore"] = 1] = "MediumRestore";
        EnergyRestoreSize[EnergyRestoreSize["LargeRestore"] = 2] = "LargeRestore";
    })(EnergyRestoreSize = GameConstants.EnergyRestoreSize || (GameConstants.EnergyRestoreSize = {}));
    let EggItemType;
    (function (EggItemType) {
        EggItemType[EggItemType["Fire_egg"] = 0] = "Fire_egg";
        EggItemType[EggItemType["Water_egg"] = 1] = "Water_egg";
        EggItemType[EggItemType["Grass_egg"] = 2] = "Grass_egg";
        EggItemType[EggItemType["Fighting_egg"] = 3] = "Fighting_egg";
        EggItemType[EggItemType["Electric_egg"] = 4] = "Electric_egg";
        EggItemType[EggItemType["Dragon_egg"] = 5] = "Dragon_egg";
        EggItemType[EggItemType["Pokemon_egg"] = 6] = "Pokemon_egg";
        EggItemType[EggItemType["Mystery_egg"] = 7] = "Mystery_egg";
    })(EggItemType = GameConstants.EggItemType || (GameConstants.EggItemType = {}));
    let EggType;
    (function (EggType) {
        EggType[EggType["Fire"] = 0] = "Fire";
        EggType[EggType["Water"] = 1] = "Water";
        EggType[EggType["Grass"] = 2] = "Grass";
        EggType[EggType["Fighting"] = 3] = "Fighting";
        EggType[EggType["Electric"] = 4] = "Electric";
        EggType[EggType["Dragon"] = 5] = "Dragon";
        EggType[EggType["Pokemon"] = 6] = "Pokemon";
        EggType[EggType["Mystery"] = 7] = "Mystery";
        EggType[EggType["Fossil"] = 8] = "Fossil";
    })(EggType = GameConstants.EggType || (GameConstants.EggType = {}));
    GameConstants.EnergyRestoreEffect = {
        SmallRestore: 0.1,
        MediumRestore: 0.2,
        LargeRestore: 0.5,
    };
    GameConstants.KeyToDirection = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        65: 'left',
        68: 'right',
        83: 'down',
        87: 'up',
    };
    GameConstants.FossilToPokemon = {
        'Helix Fossil': 'Omanyte',
        'Dome Fossil': 'Kabuto',
        'Old Amber': 'Aerodactyl',
    };
    //Used for image name
    GameConstants.PokemonToFossil = {
        'Omanyte': 'helix',
        'Kabuto': 'dome',
        'Aerodactyl': 'amber',
    };
    // For random quest, name matches entry in gymList (created in Gym.ts)
    GameConstants.KantoGyms = [
        'Pewter City',
        'Cerulean City',
        'Vermillion City',
        'Celadon City',
        'Saffron City',
        'Fuchsia City',
        'Cinnabar Island',
        'Viridian City',
        'Elite Lorelei',
        'Elite Bruno',
        'Elite Agatha',
        'Elite Lance',
        'Champion Blue',
    ];
    GameConstants.JohtoGyms = [
        'Violet City',
        'Azalea Town',
        'Goldenrod City',
        'Ecruteak City',
        'Cianwood City',
        'Olivine City',
        'Mahogany Town',
        'Blackthorn City',
        'Elite Will',
        'Elite Koga',
        'Elite Bruno2',
        'Elite Karen',
        'Champion Lance',
    ];
    GameConstants.HoennGyms = [
        'Rustboro City',
        'Dewford Town',
        'Mauville City',
        'Lavaridge Town',
        'Petalburg City',
        'Fortree City',
        'Mossdeep City',
        'Sootopolis City',
        'Elite Sidney',
        'Elite Phoebe',
        'Elite Glacia',
        'Elite Drake',
        'Champion Wallace',
    ];
    GameConstants.RegionGyms = [
        GameConstants.KantoGyms,
        GameConstants.JohtoGyms,
        GameConstants.HoennGyms,
    ];
    GameConstants.KantoDungeons = [
        'Viridian Forest',
        'Digletts Cave',
        'Mt. Moon',
        'Rock Tunnel',
        'Power Plant',
        'Pokemon Tower',
        'Seafoam Islands',
        'Pokemon Mansion',
        'Victory Road',
        'Cerulean Cave',
    ];
    GameConstants.JohtoDungeons = [
        'Sprout Tower',
        'Ruins of Alph',
        'Union Cave',
        'Slowpoke Well',
        'Ilex Forest',
        'Burned Tower',
        'Tin Tower',
        'Whirl Islands',
        'Mt Mortar',
        'Ice Path',
        'Dark Cave',
        'Mt Silver',
    ];
    GameConstants.HoennDungeons = [
        'Rusturf Tunnel',
        'Granite Cave',
        'Jagged Pass',
        'Fiery Path',
        'Mt. Chimney',
        'Meteor Falls',
        'Mt. Pyre',
        'Shoal Cave',
        'Seafloor Cavern',
        'Cave of Origin',
        'Sky Pillar',
        'Victory Road Hoenn',
        'Petalburg Woods',
        'New Mauville',
        'Sea Mauville',
    ];
    GameConstants.RegionDungeons = [
        GameConstants.KantoDungeons,
        GameConstants.JohtoDungeons,
        GameConstants.HoennDungeons,
    ];
    GameConstants.StartingTowns = [
        'Pallet Town',
        'New Bark Town',
        'Littleroot Town',
    ];
})(GameConstants || (GameConstants = {}));
var LevelType;
(function (LevelType) {
    LevelType[LevelType["erratic"] = 0] = "erratic";
    LevelType[LevelType["fast"] = 1] = "fast";
    LevelType[LevelType["mediumfast"] = 2] = "mediumfast";
    LevelType[LevelType["mediumslow"] = 3] = "mediumslow";
    LevelType[LevelType["slow"] = 4] = "slow";
    LevelType[LevelType["fluctuating"] = 5] = "fluctuating";
})(LevelType || (LevelType = {}));
const levelRequirements = [
    [0, 15, 52, 122, 237, 406, 637, 942, 1326, 1800, 2369, 3041, 3822, 4719, 5737, 6881, 8155, 9564, 11111, 12800, 14632, 16610, 18737, 21012, 23437, 26012, 28737, 31610, 34632, 37800, 41111, 44564, 48155, 51881, 55737, 59719, 63822, 68041, 72369, 76800, 81326, 85942, 90637, 95406, 100237, 105122, 110052, 115015, 120001, 125000, 131324, 137795, 144410, 151165, 158056, 165079, 172229, 179503, 186894, 194400, 202013, 209728, 217540, 225443, 233431, 241496, 249633, 257834, 267406, 276458, 286328, 296358, 305767, 316074, 326531, 336255, 346965, 357812, 367807, 378880, 390077, 400293, 411686, 423190, 433572, 445239, 457001, 467489, 479378, 491346, 501878, 513934, 526049, 536557, 548720, 560922, 571333, 583539, 591882, 600000, Number.MAX_SAFE_INTEGER],
    [0, 6, 21, 51, 100, 172, 274, 409, 583, 800, 1064, 1382, 1757, 2195, 2700, 3276, 3930, 4665, 5487, 6400, 7408, 8518, 9733, 11059, 12500, 14060, 15746, 17561, 19511, 21600, 23832, 26214, 28749, 31443, 34300, 37324, 40522, 43897, 47455, 51200, 55136, 59270, 63605, 68147, 72900, 77868, 83058, 88473, 94119, 100000, 106120, 112486, 119101, 125971, 133100, 140492, 148154, 156089, 164303, 172800, 181584, 190662, 200037, 209715, 219700, 229996, 240610, 251545, 262807, 274400, 286328, 298598, 311213, 324179, 337500, 351180, 365226, 379641, 394431, 409600, 425152, 441094, 457429, 474163, 491300, 508844, 526802, 545177, 563975, 583200, 602856, 622950, 643485, 664467, 685900, 707788, 730138, 752953, 776239, 800000, Number.MAX_SAFE_INTEGER],
    [0, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 512000, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 729000, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299, 1000000, Number.MAX_SAFE_INTEGER],
    [0, 9, 57, 96, 135, 179, 236, 314, 419, 560, 742, 973, 1261, 1612, 2035, 2535, 3120, 3798, 4575, 5460, 6458, 7577, 8825, 10208, 11735, 13411, 15244, 17242, 19411, 21760, 24294, 27021, 29949, 33084, 36435, 40007, 43808, 47846, 52127, 56660, 61450, 66505, 71833, 77440, 83335, 89523, 96012, 102810, 109923, 117360, 125126, 133229, 141677, 150476, 159635, 169159, 179056, 189334, 199999, 211060, 222522, 234393, 246681, 259392, 272535, 286115, 300140, 314618, 329555, 344960, 360838, 377197, 394045, 411388, 429235, 447591, 466464, 485862, 505791, 526260, 547274, 568841, 590969, 613664, 636935, 660787, 685228, 710266, 735907, 762160, 789030, 816525, 844653, 873420, 902835, 932903, 963632, 995030, 1027103, 1059860, Number.MAX_SAFE_INTEGER],
    [0, 10, 33, 80, 156, 270, 428, 640, 911, 1250, 1663, 2160, 2746, 3430, 4218, 5120, 6141, 7290, 8573, 10000, 11576, 13310, 15208, 17280, 19531, 21970, 24603, 27440, 30486, 33750, 37238, 40960, 44921, 49130, 53593, 58320, 63316, 68590, 74148, 80000, 86151, 92610, 99383, 106480, 113906, 121670, 129778, 138240, 147061, 156250, 165813, 175760, 186096, 196830, 207968, 219520, 231491, 243890, 256723, 270000, 283726, 297910, 312558, 327680, 343281, 359370, 375953, 393040, 410636, 428750, 447388, 466560, 486271, 506530, 527343, 548720, 570666, 593190, 616298, 640000, 664301, 689210, 714733, 740880, 767656, 795070, 823128, 851840, 881211, 911250, 941963, 973360, 1005446, 1038230, 1071718, 1105920, 1140841, 1176490, 1212873, 1250000, Number.MAX_SAFE_INTEGER],
    [0, 4, 13, 32, 65, 112, 178, 276, 393, 540, 745, 967, 1230, 1591, 1957, 2457, 3046, 3732, 4526, 5440, 6482, 7666, 9003, 10506, 12187, 14060, 16140, 18439, 20974, 23760, 26811, 30146, 33780, 37731, 42017, 46656, 50653, 55969, 60505, 66560, 71677, 78533, 84277, 91998, 98415, 107069, 114205, 123863, 131766, 142500, 151222, 163105, 172697, 185807, 196322, 210739, 222231, 238036, 250562, 267840, 281456, 300293, 315059, 335544, 351520, 373744, 390991, 415050, 433631, 459620, 479600, 507617, 529063, 559209, 582187, 614566, 639146, 673863, 700115, 737280, 765275, 804997, 834809, 877201, 908905, 954084, 987754, 1035837, 1071552, 1122660, 1160499, 1214753, 1254796, 1312322, 1354652, 1415577, 1460276, 1524731, 1571884, 1640000, Number.MAX_SAFE_INTEGER],
];
var PokemonType;
(function (PokemonType) {
    PokemonType[PokemonType["None"] = -1] = "None";
    PokemonType[PokemonType["Normal"] = 0] = "Normal";
    PokemonType[PokemonType["Fire"] = 1] = "Fire";
    PokemonType[PokemonType["Water"] = 2] = "Water";
    PokemonType[PokemonType["Electric"] = 3] = "Electric";
    PokemonType[PokemonType["Grass"] = 4] = "Grass";
    PokemonType[PokemonType["Ice"] = 5] = "Ice";
    PokemonType[PokemonType["Fighting"] = 6] = "Fighting";
    PokemonType[PokemonType["Poison"] = 7] = "Poison";
    PokemonType[PokemonType["Ground"] = 8] = "Ground";
    PokemonType[PokemonType["Flying"] = 9] = "Flying";
    PokemonType[PokemonType["Psychic"] = 10] = "Psychic";
    PokemonType[PokemonType["Bug"] = 11] = "Bug";
    PokemonType[PokemonType["Rock"] = 12] = "Rock";
    PokemonType[PokemonType["Ghost"] = 13] = "Ghost";
    PokemonType[PokemonType["Dragon"] = 14] = "Dragon";
    PokemonType[PokemonType["Dark"] = 15] = "Dark";
    PokemonType[PokemonType["Steel"] = 16] = "Steel";
    PokemonType[PokemonType["Fairy"] = 17] = "Fairy";
})(PokemonType || (PokemonType = {}));
///<reference path="../party/evolutions/LevelEvolution.ts"/>
///<reference path="../party/evolutions/StoneEvolution.ts"/>
///<reference path="../GameConstants.ts"/>
///<reference path="../party/LevelType.ts"/>
///<reference path="PokemonType.ts"/>
/**
 * Pokémon data, accessible by name or id.
 * @type {{}}
 */
const pokemonMap = {};
const pokemonMapId = {};
const pokemonDevolutionMap = {};
/**
 * Datalist that contains all Pokémon data
 */
const pokemonList = [
    {
        'id': 1,
        'name': 'Bulbasaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bulbasaur', 'Ivysaur', 16)],
    }, {
        'id': 2,
        'name': 'Ivysaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ivysaur', 'Venusaur', 32)],
    }, {
        'id': 3,
        'name': 'Venusaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'eggCycles': 20,
    }, {
        'id': 4,
        'name': 'Charmander',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 60,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmander', 'Charmeleon', 16)],
    }, {
        'id': 5,
        'name': 'Charmeleon',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmeleon', 'Charizard', 36)],
    }, {
        'id': 6,
        'name': 'Charizard',
        'catchRate': 45,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 105,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'eggCycles': 20,
    }, {
        'id': 7,
        'name': 'Squirtle',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 50,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Squirtle', 'Wartortle', 16)],
    }, {
        'id': 8,
        'name': 'Wartortle',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Wartortle', 'Blastoise', 36)],
    }, {
        'id': 9,
        'name': 'Blastoise',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 85,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'eggCycles': 20,
    }, {
        'id': 10,
        'name': 'Caterpie',
        'catchRate': 255,
        'type': [PokemonType.Bug],
        'attack': 30,
        'levelType': LevelType.mediumfast,
        'exp': 39,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Caterpie', 'Metapod', 7)],
    }, {
        'id': 11,
        'name': 'Metapod',
        'catchRate': 120,
        'type': [PokemonType.Bug],
        'attack': 25,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Metapod', 'Butterfree', 10)],
    }, {
        'id': 12,
        'name': 'Butterfree',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'eggCycles': 15,
    }, {
        'id': 13,
        'name': 'Weedle',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 35,
        'levelType': LevelType.mediumfast,
        'exp': 39,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Weedle', 'Kakuna', 7)],
    }, {
        'id': 14,
        'name': 'Kakuna',
        'catchRate': 120,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 25,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Kakuna', 'Beedrill', 10)],
    }, {
        'id': 15,
        'name': 'Beedrill',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'eggCycles': 15,
    }, {
        'id': 16,
        'name': 'Pidgey',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 45,
        'levelType': LevelType.mediumslow,
        'exp': 50,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Pidgey', 'Pidgeotto', 18)],
    }, {
        'id': 17,
        'name': 'Pidgeotto',
        'catchRate': 120,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 60,
        'levelType': LevelType.mediumslow,
        'exp': 122,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Pidgeotto', 'Pidgeot', 36)],
    }, {
        'id': 18,
        'name': 'Pidgeot',
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'eggCycles': 15,
    }, {
        'id': 19,
        'name': 'Rattata',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'attack': 56,
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Rattata', 'Raticate', 20)],
    }, {
        'id': 20,
        'name': 'Raticate',
        'catchRate': 127,
        'type': [PokemonType.Normal],
        'attack': 81,
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 15,
    }, {
        'id': 21,
        'name': 'Spearow',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 60,
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Spearow', 'Fearow', 20)],
    }, {
        'id': 22,
        'name': 'Fearow',
        'catchRate': 90,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 155,
        'eggCycles': 15,
    }, {
        'id': 23,
        'name': 'Ekans',
        'catchRate': 255,
        'type': [PokemonType.Poison],
        'attack': 60,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ekans', 'Arbok', 22)],
    }, {
        'id': 24,
        'name': 'Arbok',
        'catchRate': 90,
        'type': [PokemonType.Poison],
        'attack': 85,
        'levelType': LevelType.mediumfast,
        'exp': 157,
        'eggCycles': 20,
    }, {
        'id': 25,
        'name': 'Pikachu',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'attack': 55,
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Pikachu', 'Raichu', GameConstants.StoneType.Thunder_stone)],
    }, {
        'id': 26,
        'name': 'Raichu',
        'catchRate': 75,
        'type': [PokemonType.Electric],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 218,
        'eggCycles': 10,
    }, {
        'id': 27,
        'name': 'Sandshrew',
        'catchRate': 255,
        'type': [PokemonType.Ground],
        'attack': 75,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Sandshrew', 'Sandslash', 22)],
    }, {
        'id': 28,
        'name': 'Sandslash',
        'catchRate': 90,
        'type': [PokemonType.Ground],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
    }, {
        'id': 29,
        'name': 'Nidoran(F)',
        'catchRate': 235,
        'type': [PokemonType.Poison],
        'attack': 47,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Nidoran(F)', 'Nidorina', 16)],
    }, {
        'id': 30,
        'name': 'Nidorina',
        'catchRate': 120,
        'type': [PokemonType.Poison],
        'attack': 62,
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Nidorina', 'Nidoqueen', GameConstants.StoneType.Moon_stone)],
    }, {
        'id': 31,
        'name': 'Nidoqueen',
        'catchRate': 45,
        'type': [PokemonType.Poison, PokemonType.Ground],
        'attack': 92,
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
    }, {
        'id': 32,
        'name': 'Nidoran(M)',
        'catchRate': 235,
        'type': [PokemonType.Poison],
        'attack': 57,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Nidoran(M)', 'Nidorino', 16)],
    }, {
        'id': 33,
        'name': 'Nidorino',
        'catchRate': 120,
        'type': [PokemonType.Poison],
        'attack': 72,
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Nidorino', 'Nidoking', GameConstants.StoneType.Moon_stone)],
    }, {
        'id': 34,
        'name': 'Nidoking',
        'catchRate': 45,
        'type': [PokemonType.Poison, PokemonType.Ground],
        'attack': 102,
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
    }, {
        'id': 35,
        'name': 'Clefairy',
        'catchRate': 150,
        'type': [PokemonType.Fairy],
        'attack': 60,
        'levelType': LevelType.fast,
        'exp': 113,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Clefairy', 'Clefable', GameConstants.StoneType.Moon_stone)],
    }, {
        'id': 36,
        'name': 'Clefable',
        'catchRate': 25,
        'type': [PokemonType.Fairy],
        'attack': 95,
        'levelType': LevelType.fast,
        'exp': 217,
        'eggCycles': 10,
    }, {
        'id': 37,
        'name': 'Vulpix',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'attack': 50,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Vulpix', 'Ninetales', GameConstants.StoneType.Fire_stone)],
    }, {
        'id': 38,
        'name': 'Ninetales',
        'catchRate': 75,
        'type': [PokemonType.Fire],
        'attack': 81,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'eggCycles': 20,
    }, {
        'id': 39,
        'name': 'Jigglypuff',
        'catchRate': 170,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'attack': 45,
        'levelType': LevelType.fast,
        'exp': 95,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Jigglypuff', 'Wigglytuff', GameConstants.StoneType.Moon_stone)],
    }, {
        'id': 40,
        'name': 'Wigglytuff',
        'catchRate': 50,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'attack': 85,
        'levelType': LevelType.fast,
        'exp': 196,
        'eggCycles': 10,
    }, {
        'id': 41,
        'name': 'Zubat',
        'catchRate': 255,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'attack': 45,
        'levelType': LevelType.mediumfast,
        'exp': 49,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Zubat', 'Golbat', 22)],
    }, {
        'id': 42,
        'name': 'Golbat',
        'catchRate': 90,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Golbat', 'Crobat', 100)],
    }, {
        'id': 43,
        'name': 'Oddish',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 75,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Oddish', 'Gloom', 21)],
    }, {
        'id': 44,
        'name': 'Gloom',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 85,
        'levelType': LevelType.mediumslow,
        'exp': 138,
        'eggCycles': 20,
        'evolutions': [
            new StoneEvolution('Gloom', 'Vileplume', GameConstants.StoneType.Leaf_stone),
            new StoneEvolution('Gloom', 'Bellossom', GameConstants.StoneType.Sun_stone),
        ],
    }, {
        'id': 45,
        'name': 'Vileplume',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 110,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
    }, {
        'id': 46,
        'name': 'Paras',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 70,
        'levelType': LevelType.mediumfast,
        'exp': 57,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Paras', 'Parasect', 24)],
    }, {
        'id': 47,
        'name': 'Parasect',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'eggCycles': 20,
    }, {
        'id': 48,
        'name': 'Venonat',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 55,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Venonat', 'Venomoth', 31)],
    }, {
        'id': 49,
        'name': 'Venomoth',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
    }, {
        'id': 50,
        'name': 'Diglett',
        'catchRate': 255,
        'type': [PokemonType.Ground],
        'attack': 55,
        'levelType': LevelType.mediumfast,
        'exp': 53,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Diglett', 'Dugtrio', 26)],
    }, {
        'id': 51,
        'name': 'Dugtrio',
        'catchRate': 50,
        'type': [PokemonType.Ground],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'eggCycles': 20,
    }, {
        'id': 52,
        'name': 'Meowth',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'attack': 45,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Meowth', 'Persian', 28)],
    }, {
        'id': 53,
        'name': 'Persian',
        'catchRate': 90,
        'type': [PokemonType.Normal],
        'attack': 70,
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'eggCycles': 20,
    }, {
        'id': 54,
        'name': 'Psyduck',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Psyduck', 'Golduck', 33)],
    }, {
        'id': 55,
        'name': 'Golduck',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 56,
        'name': 'Mankey',
        'catchRate': 190,
        'type': [PokemonType.Fighting],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Mankey', 'Primeape', 28)],
    }, {
        'id': 57,
        'name': 'Primeape',
        'catchRate': 75,
        'type': [PokemonType.Fighting],
        'attack': 105,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 20,
    }, {
        'id': 58,
        'name': 'Growlithe',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'attack': 70,
        'levelType': LevelType.slow,
        'exp': 70,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Growlithe', 'Arcanine', GameConstants.StoneType.Fire_stone)],
    }, {
        'id': 59,
        'name': 'Arcanine',
        'catchRate': 75,
        'type': [PokemonType.Fire],
        'attack': 110,
        'levelType': LevelType.slow,
        'exp': 194,
        'eggCycles': 20,
    }, {
        'id': 60,
        'name': 'Poliwag',
        'catchRate': 255,
        'type': [PokemonType.Water],
        'attack': 50,
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Poliwag', 'Poliwhirl', 25)],
    }, {
        'id': 61,
        'name': 'Poliwhirl',
        'catchRate': 120,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 135,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Poliwhirl', 'Poliwrath', GameConstants.StoneType.Water_stone), new StoneEvolution('Poliwhirl', 'Politoed', GameConstants.StoneType.Kings_rock)],
    }, {
        'id': 62,
        'name': 'Poliwrath',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Fighting],
        'attack': 95,
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'eggCycles': 20,
    }, {
        'id': 63,
        'name': 'Abra',
        'catchRate': 200,
        'type': [PokemonType.Psychic],
        'attack': 105,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Abra', 'Kadabra', 16)],
    }, {
        'id': 64,
        'name': 'Kadabra',
        'catchRate': 100,
        'type': [PokemonType.Psychic],
        'attack': 120,
        'levelType': LevelType.mediumslow,
        'exp': 140,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Kadabra', 'Alakazam', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 65,
        'name': 'Alakazam',
        'catchRate': 50,
        'type': [PokemonType.Psychic],
        'attack': 135,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
    }, {
        'id': 66,
        'name': 'Machop',
        'catchRate': 180,
        'type': [PokemonType.Fighting],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Machop', 'Machoke', 28)],
    }, {
        'id': 67,
        'name': 'Machoke',
        'catchRate': 90,
        'type': [PokemonType.Fighting],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Machoke', 'Machamp', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 68,
        'name': 'Machamp',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'attack': 130,
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
    }, {
        'id': 69,
        'name': 'Bellsprout',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 75,
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bellsprout', 'Weepinbell', 21)],
    }, {
        'id': 70,
        'name': 'Weepinbell',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 90,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Weepinbell', 'Victreebel', GameConstants.StoneType.Leaf_stone)],
    }, {
        'id': 71,
        'name': 'Victreebel',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 105,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
    }, {
        'id': 72,
        'name': 'Tentacool',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Poison],
        'attack': 50,
        'levelType': LevelType.slow,
        'exp': 67,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Tentacool', 'Tentacruel', 30)],
    }, {
        'id': 73,
        'name': 'Tentacruel',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Poison],
        'attack': 80,
        'levelType': LevelType.slow,
        'exp': 180,
        'eggCycles': 20,
    }, {
        'id': 74,
        'name': 'Geodude',
        'catchRate': 255,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Geodude', 'Graveler', 25)],
    }, {
        'id': 75,
        'name': 'Graveler',
        'catchRate': 120,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 95,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'eggCycles': 15,
        'evolutions': [new StoneEvolution('Graveler', 'Golem', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 76,
        'name': 'Golem',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 120,
        'levelType': LevelType.mediumslow,
        'exp': 223,
        'eggCycles': 15,
    }, {
        'id': 77,
        'name': 'Ponyta',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'attack': 85,
        'levelType': LevelType.mediumfast,
        'exp': 82,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ponyta', 'Rapidash', 40)],
    }, {
        'id': 78,
        'name': 'Rapidash',
        'catchRate': 60,
        'type': [PokemonType.Fire],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 79,
        'name': 'Slowpoke',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Slowpoke', 'Slowbro', 37), new StoneEvolution('Slowpoke', 'Slowking', GameConstants.StoneType.Kings_rock)],
    }, {
        'id': 80,
        'name': 'Slowbro',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 81,
        'name': 'Magnemite',
        'catchRate': 190,
        'type': [PokemonType.Electric, PokemonType.Steel],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Magnemite', 'Magneton', 30)],
    }, {
        'id': 82,
        'name': 'Magneton',
        'catchRate': 60,
        'type': [PokemonType.Electric, PokemonType.Steel],
        'attack': 120,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'eggCycles': 20,
    }, {
        'id': 83,
        'name': "Farfetch'd",
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 132,
        'eggCycles': 20,
    }, {
        'id': 84,
        'name': 'Doduo',
        'catchRate': 190,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 85,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Doduo', 'Dodrio', 31)],
    }, {
        'id': 85,
        'name': 'Dodrio',
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'eggCycles': 20,
    }, {
        'id': 86,
        'name': 'Seel',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'attack': 45,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Seel', 'Dewgong', 34)],
    }, {
        'id': 87,
        'name': 'Dewgong',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Ice],
        'attack': 70,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'eggCycles': 20,
    }, {
        'id': 88,
        'name': 'Grimer',
        'catchRate': 190,
        'type': [PokemonType.Poison],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Grimer', 'Muk', 38)],
    }, {
        'id': 89,
        'name': 'Muk',
        'catchRate': 75,
        'type': [PokemonType.Poison],
        'attack': 105,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 90,
        'name': 'Shellder',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.slow,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Shellder', 'Cloyster', GameConstants.StoneType.Water_stone)],
    }, {
        'id': 91,
        'name': 'Cloyster',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Ice],
        'attack': 95,
        'levelType': LevelType.slow,
        'exp': 184,
        'eggCycles': 20,
    }, {
        'id': 92,
        'name': 'Gastly',
        'catchRate': 190,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Gastly', 'Haunter', 25)],
    }, {
        'id': 93,
        'name': 'Haunter',
        'catchRate': 90,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'attack': 115,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Haunter', 'Gengar', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 94,
        'name': 'Gengar',
        'catchRate': 45,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'attack': 130,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
    }, {
        'id': 95,
        'name': 'Onix',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 45,
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Onix', 'Steelix', GameConstants.StoneType.Metal_coat)],
    }, {
        'id': 96,
        'name': 'Drowzee',
        'catchRate': 190,
        'type': [PokemonType.Psychic],
        'attack': 48,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Drowzee', 'Hypno', 26)],
    }, {
        'id': 97,
        'name': 'Hypno',
        'catchRate': 75,
        'type': [PokemonType.Psychic],
        'attack': 73,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'eggCycles': 20,
    }, {
        'id': 98,
        'name': 'Krabby',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'attack': 105,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Krabby', 'Kingler', 28)],
    }, {
        'id': 99,
        'name': 'Kingler',
        'catchRate': 60,
        'type': [PokemonType.Water],
        'attack': 130,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'eggCycles': 20,
    }, {
        'id': 100,
        'name': 'Voltorb',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'attack': 55,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Voltorb', 'Electrode', 30)],
    }, {
        'id': 101,
        'name': 'Electrode',
        'catchRate': 60,
        'type': [PokemonType.Electric],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 102,
        'name': 'Exeggcute',
        'catchRate': 90,
        'type': [PokemonType.Grass, PokemonType.Psychic],
        'attack': 60,
        'levelType': LevelType.slow,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Exeggcute', 'Exeggutor', GameConstants.StoneType.Leaf_stone)],
    }, {
        'id': 103,
        'name': 'Exeggutor',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Psychic],
        'attack': 125,
        'levelType': LevelType.slow,
        'exp': 186,
        'eggCycles': 20,
    }, {
        'id': 104,
        'name': 'Cubone',
        'catchRate': 190,
        'type': [PokemonType.Ground],
        'attack': 50,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Cubone', 'Marowak', 28)],
    }, {
        'id': 105,
        'name': 'Marowak',
        'catchRate': 75,
        'type': [PokemonType.Ground],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'eggCycles': 20,
    }, {
        'id': 106,
        'name': 'Hitmonlee',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'attack': 120,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
    }, {
        'id': 107,
        'name': 'Hitmonchan',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'attack': 105,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
    }, {
        'id': 108,
        'name': 'Lickitung',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 60,
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'eggCycles': 20,
    }, {
        'id': 109,
        'name': 'Koffing',
        'catchRate': 190,
        'type': [PokemonType.Poison],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Koffing', 'Weezing', 35)],
    }, {
        'id': 110,
        'name': 'Weezing',
        'catchRate': 60,
        'type': [PokemonType.Poison],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 111,
        'name': 'Rhyhorn',
        'catchRate': 120,
        'type': [PokemonType.Ground, PokemonType.Rock],
        'attack': 85,
        'levelType': LevelType.slow,
        'exp': 69,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Rhyhorn', 'Rhydon', 42)],
    }, {
        'id': 112,
        'name': 'Rhydon',
        'catchRate': 60,
        'type': [PokemonType.Ground, PokemonType.Rock],
        'attack': 130,
        'levelType': LevelType.slow,
        'exp': 170,
        'eggCycles': 20,
    }, {
        'id': 113,
        'name': 'Chansey',
        'catchRate': 30,
        'type': [PokemonType.Normal],
        'attack': 35,
        'levelType': LevelType.fast,
        'exp': 395,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Chansey', 'Blissey', 100)],
    }, {
        'id': 114,
        'name': 'Tangela',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 87,
        'eggCycles': 20,
    }, {
        'id': 115,
        'name': 'Kangaskhan',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 116,
        'name': 'Horsea',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'attack': 70,
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Horsea', 'Seadra', 32)],
    }, {
        'id': 117,
        'name': 'Seadra',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Seadra', 'Kingdra', GameConstants.StoneType.Dragon_scale)],
    }, {
        'id': 118,
        'name': 'Goldeen',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'attack': 67,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Goldeen', 'Seaking', 33)],
    }, {
        'id': 119,
        'name': 'Seaking',
        'catchRate': 60,
        'type': [PokemonType.Water],
        'attack': 92,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
    }, {
        'id': 120,
        'name': 'Staryu',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'attack': 70,
        'levelType': LevelType.slow,
        'exp': 68,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Staryu', 'Starmie', GameConstants.StoneType.Water_stone)],
    }, {
        'id': 121,
        'name': 'Starmie',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'attack': 100,
        'levelType': LevelType.slow,
        'exp': 182,
        'eggCycles': 20,
    }, {
        'id': 122,
        'name': 'Mr. Mime',
        'catchRate': 45,
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'eggCycles': 25,
    }, {
        'id': 123,
        'name': 'Scyther',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 100,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Scyther', 'Scizor', GameConstants.StoneType.Metal_coat)],
    }, {
        'id': 124,
        'name': 'Jynx',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Psychic],
        'attack': 115,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
    }, {
        'id': 125,
        'name': 'Electabuzz',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Electabuzz', 'Electivire', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 126,
        'name': 'Magmar',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Magmar', 'Magmortar', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 127,
        'name': 'Pinsir',
        'catchRate': 45,
        'type': [PokemonType.Bug],
        'attack': 125,
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 25,
    }, {
        'id': 128,
        'name': 'Tauros',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 100,
        'levelType': LevelType.slow,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 129,
        'name': 'Magikarp',
        'catchRate': 255,
        'type': [PokemonType.Water],
        'attack': 15,
        'levelType': LevelType.slow,
        'exp': 40,
        'eggCycles': 5,
        'evolutions': [new LevelEvolution('Magikarp', 'Gyarados', 20)],
    }, {
        'id': 130,
        'name': 'Gyarados',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 125,
        'levelType': LevelType.slow,
        'exp': 189,
        'eggCycles': 5,
    }, {
        'id': 131,
        'name': 'Lapras',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Ice],
        'attack': 85,
        'levelType': LevelType.slow,
        'exp': 187,
        'eggCycles': 40,
    }, {
        'id': 132,
        'name': 'Ditto',
        'catchRate': 35,
        'type': [PokemonType.Normal],
        'attack': 48,
        'levelType': LevelType.mediumfast,
        'exp': 101,
        'eggCycles': 20,
    }, {
        'id': 133,
        'name': 'Eevee',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'attack': 55,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 35,
        'evolutions': [
            new StoneEvolution('Eevee', 'Vaporeon', GameConstants.StoneType.Water_stone),
            new StoneEvolution('Eevee', 'Jolteon', GameConstants.StoneType.Thunder_stone),
            new StoneEvolution('Eevee', 'Flareon', GameConstants.StoneType.Fire_stone),
            new StoneEvolution('Eevee', 'Espeon', GameConstants.StoneType.Time_stone),
            new StoneEvolution('Eevee', 'Umbreon', GameConstants.StoneType.Time_stone),
        ],
    }, {
        'id': 134,
        'name': 'Vaporeon',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
    }, {
        'id': 135,
        'name': 'Jolteon',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
    }, {
        'id': 136,
        'name': 'Flareon',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 130,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
    }, {
        'id': 137,
        'name': 'Porygon',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 85,
        'levelType': LevelType.mediumfast,
        'exp': 79,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Porygon', 'Porygon2', GameConstants.StoneType.Upgrade)],
    }, {
        'id': 138,
        'name': 'Omanyte',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'eggCycles': 30,
        'evolutions': [new LevelEvolution('Omanyte', 'Omastar', 40)],
    }, {
        'id': 139,
        'name': 'Omastar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 115,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 30,
    }, {
        'id': 140,
        'name': 'Kabuto',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'eggCycles': 30,
        'evolutions': [new LevelEvolution('Kabuto', 'Kabutops', 40)],
    }, {
        'id': 141,
        'name': 'Kabutops',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 115,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 30,
    }, {
        'id': 142,
        'name': 'Aerodactyl',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Flying],
        'attack': 105,
        'levelType': LevelType.slow,
        'exp': 180,
        'eggCycles': 35,
    }, {
        'id': 143,
        'name': 'Snorlax',
        'catchRate': 25,
        'type': [PokemonType.Normal],
        'attack': 110,
        'levelType': LevelType.slow,
        'exp': 189,
        'eggCycles': 40,
    }, {
        'id': 144,
        'name': 'Articuno',
        'catchRate': 3,
        'type': [PokemonType.Ice, PokemonType.Flying],
        'attack': 95,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 145,
        'name': 'Zapdos',
        'catchRate': 3,
        'type': [PokemonType.Electric, PokemonType.Flying],
        'attack': 125,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 146,
        'name': 'Moltres',
        'catchRate': 3,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 125,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 147,
        'name': 'Dratini',
        'catchRate': 45,
        'type': [PokemonType.Dragon],
        'attack': 64,
        'levelType': LevelType.slow,
        'exp': 60,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Dratini', 'Dragonair', 30)],
    }, {
        'id': 148,
        'name': 'Dragonair',
        'catchRate': 45,
        'type': [PokemonType.Dragon],
        'attack': 84,
        'levelType': LevelType.slow,
        'exp': 147,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Dragonair', 'Dragonite', 55)],
    }, {
        'id': 149,
        'name': 'Dragonite',
        'catchRate': 45,
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'attack': 134,
        'levelType': LevelType.slow,
        'exp': 270,
        'eggCycles': 40,
    }, {
        'id': 150,
        'name': 'Mewtwo',
        'catchRate': 3,
        'type': [PokemonType.Psychic],
        'attack': 154,
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
    }, {
        'id': 151,
        'name': 'Mew',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'eggCycles': 120,
    }, {
        'id': 152,
        'name': 'Chikorita',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Chikorita', 'Bayleef', 16)],
    }, {
        'id': 153,
        'name': 'Bayleef',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bayleef', 'Meganium', 32)],
    }, {
        'id': 154,
        'name': 'Meganium',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'eggCycles': 20,
    }, {
        'id': 155,
        'name': 'Cyndaquil',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 52,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Cyndaquil', 'Quilava', 14)],
    }, {
        'id': 156,
        'name': 'Quilava',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Quilava', 'Typhlosion', 36)],
    }, {
        'id': 157,
        'name': 'Typhlosion',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 85,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'eggCycles': 20,
    }, {
        'id': 158,
        'name': 'Totodile',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Totodile', 'Croconaw', 18)],
    }, {
        'id': 159,
        'name': 'Croconaw',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 80,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Croconaw', 'Feraligatr', 30)],
    }, {
        'id': 160,
        'name': 'Feraligatr',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 105,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'eggCycles': 20,
    }, {
        'id': 161,
        'name': 'Sentret',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'attack': 46,
        'levelType': LevelType.mediumfast,
        'exp': 43,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Sentret', 'Furret', 15)],
    }, {
        'id': 162,
        'name': 'Furret',
        'catchRate': 90,
        'type': [PokemonType.Normal],
        'attack': 76,
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 15,
    }, {
        'id': 163,
        'name': 'Hoothoot',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 56,
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Hoothoot', 'Noctowl', 20)],
    }, {
        'id': 164,
        'name': 'Noctowl',
        'catchRate': 90,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 96,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 15,
    }, {
        'id': 165,
        'name': 'Ledyba',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 80,
        'levelType': LevelType.fast,
        'exp': 53,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Ledyba', 'Ledian', 18)],
    }, {
        'id': 166,
        'name': 'Ledian',
        'catchRate': 90,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 110,
        'levelType': LevelType.fast,
        'exp': 137,
        'eggCycles': 15,
    }, {
        'id': 167,
        'name': 'Spinarak',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 60,
        'levelType': LevelType.fast,
        'exp': 50,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Spinarak', 'Ariados', 22)],
    }, {
        'id': 168,
        'name': 'Ariados',
        'catchRate': 90,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 90,
        'levelType': LevelType.fast,
        'exp': 140,
        'eggCycles': 15,
    }, {
        'id': 169,
        'name': 'Crobat',
        'catchRate': 90,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'eggCycles': 15,
    }, {
        'id': 170,
        'name': 'Chinchou',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Electric],
        'attack': 56,
        'levelType': LevelType.slow,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Chinchou', 'Lanturn', 27)],
    }, {
        'id': 171,
        'name': 'Lanturn',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Electric],
        'attack': 76,
        'levelType': LevelType.slow,
        'exp': 161,
        'eggCycles': 20,
    }, {
        'id': 172,
        'name': 'Pichu',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'attack': 40,
        'levelType': LevelType.mediumfast,
        'exp': 41,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Pichu', 'Pikachu', 100)],
        'baby': true,
    }, {
        'id': 173,
        'name': 'Cleffa',
        'catchRate': 150,
        'type': [PokemonType.Fairy],
        'attack': 55,
        'levelType': LevelType.fast,
        'exp': 44,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Cleffa', 'Clefairy', 100)],
        'baby': true,
    }, {
        'id': 174,
        'name': 'Igglybuff',
        'catchRate': 170,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'attack': 30,
        'levelType': LevelType.fast,
        'exp': 42,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Igglybuff', 'Jigglypuff', 100)],
        'baby': true,
    }, {
        'id': 175,
        'name': 'Togepi',
        'catchRate': 190,
        'type': [PokemonType.Fairy],
        'attack': 65,
        'levelType': LevelType.fast,
        'exp': 49,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Togepi', 'Togetic', 100)],
    }, {
        'id': 176,
        'name': 'Togetic',
        'catchRate': 75,
        'type': [PokemonType.Fairy, PokemonType.Flying],
        'attack': 105,
        'levelType': LevelType.fast,
        'exp': 142,
        'eggCycles': 10,
    }, {
        'id': 177,
        'name': 'Natu',
        'catchRate': 190,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 50,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Natu', 'Xatu', 25)],
    }, {
        'id': 178,
        'name': 'Xatu',
        'catchRate': 75,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 75,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'eggCycles': 20,
    }, {
        'id': 179,
        'name': 'Mareep',
        'catchRate': 235,
        'type': [PokemonType.Electric],
        'attack': 45,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Mareep', 'Flaaffy', 15)],
    }, {
        'id': 180,
        'name': 'Flaaffy',
        'catchRate': 120,
        'type': [PokemonType.Electric],
        'attack': 60,
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Flaaffy', 'Ampharos', 30)],
    }, {
        'id': 181,
        'name': 'Ampharos',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'attack': 110,
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'eggCycles': 20,
    }, {
        'id': 182,
        'name': 'Bellossom',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
    }, {
        'id': 183,
        'name': 'Marill',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Fairy],
        'attack': 50,
        'levelType': LevelType.fast,
        'exp': 88,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Marill', 'Azumarill', 18)],
    }, {
        'id': 184,
        'name': 'Azumarill',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Fairy],
        'attack': 80,
        'levelType': LevelType.fast,
        'exp': 189,
        'eggCycles': 10,
    }, {
        'id': 185,
        'name': 'Sudowoodo',
        'catchRate': 65,
        'type': [PokemonType.Rock],
        'attack': 100,
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'eggCycles': 20,
    }, {
        'id': 186,
        'name': 'Politoed',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
    }, {
        'id': 187,
        'name': 'Hoppip',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 55,
        'levelType': LevelType.mediumslow,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Hoppip', 'Skiploom', 18)],
    }, {
        'id': 188,
        'name': 'Skiploom',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 65,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Skiploom', 'Jumpluff', 27)],
    }, {
        'id': 189,
        'name': 'Jumpluff',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 95,
        'levelType': LevelType.mediumslow,
        'exp': 207,
        'eggCycles': 20,
    }, {
        'id': 190,
        'name': 'Aipom',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 70,
        'levelType': LevelType.fast,
        'exp': 72,
        'eggCycles': 20,
    }, {
        'id': 191,
        'name': 'Sunkern',
        'catchRate': 235,
        'type': [PokemonType.Grass],
        'attack': 30,
        'levelType': LevelType.mediumslow,
        'exp': 36,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Sunkern', 'Sunflora', GameConstants.StoneType.Sun_stone)],
    }, {
        'id': 192,
        'name': 'Sunflora',
        'catchRate': 120,
        'type': [PokemonType.Grass],
        'attack': 85,
        'levelType': LevelType.mediumslow,
        'exp': 149,
        'eggCycles': 20,
    }, {
        'id': 193,
        'name': 'Yanma',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 78,
        'eggCycles': 20,
    }, {
        'id': 194,
        'name': 'Wooper',
        'catchRate': 255,
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 45,
        'levelType': LevelType.mediumfast,
        'exp': 42,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Wooper', 'Quagsire', 20)],
    }, {
        'id': 195,
        'name': 'Quagsire',
        'catchRate': 90,
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 85,
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'eggCycles': 20,
    }, {
        'id': 196,
        'name': 'Espeon',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
    }, {
        'id': 197,
        'name': 'Umbreon',
        'catchRate': 45,
        'type': [PokemonType.Dark],
        'attack': 130,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
    }, {
        'id': 198,
        'name': 'Murkrow',
        'catchRate': 30,
        'type': [PokemonType.Dark, PokemonType.Flying],
        'attack': 85,
        'levelType': LevelType.mediumslow,
        'exp': 81,
        'eggCycles': 20,
    }, {
        'id': 199,
        'name': 'Slowking',
        'catchRate': 70,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 200,
        'name': 'Misdreavus',
        'catchRate': 45,
        'type': [PokemonType.Ghost],
        'attack': 85,
        'levelType': LevelType.fast,
        'exp': 87,
        'eggCycles': 25,
    }, {
        'id': 201,
        'name': 'Unown',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'attack': 72,
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
    }, {
        'id': 202,
        'name': 'Wobbuffet',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'attack': 58,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'eggCycles': 20,
    }, {
        'id': 203,
        'name': 'Girafarig',
        'catchRate': 60,
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 20,
    }, {
        'id': 204,
        'name': 'Pineco',
        'catchRate': 190,
        'type': [PokemonType.Bug],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Pineco', 'Forretress', 31)],
    }, {
        'id': 205,
        'name': 'Forretress',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Steel],
        'attack': 90,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'eggCycles': 20,
    }, {
        'id': 206,
        'name': 'Dunsparce',
        'catchRate': 190,
        'type': [PokemonType.Normal],
        'attack': 70,
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 20,
    }, {
        'id': 207,
        'name': 'Gligar',
        'catchRate': 60,
        'type': [PokemonType.Ground, PokemonType.Flying],
        'attack': 75,
        'levelType': LevelType.mediumslow,
        'exp': 86,
        'eggCycles': 20,
    }, {
        'id': 208,
        'name': 'Steelix',
        'catchRate': 25,
        'type': [PokemonType.Steel, PokemonType.Ground],
        'attack': 125,
        'levelType': LevelType.mediumfast,
        'exp': 179,
        'eggCycles': 25,
    }, {
        'id': 209,
        'name': 'Snubbull',
        'catchRate': 190,
        'type': [PokemonType.Fairy],
        'attack': 80,
        'levelType': LevelType.fast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Snubbull', 'Granbull', 23)],
    }, {
        'id': 210,
        'name': 'Granbull',
        'catchRate': 75,
        'type': [PokemonType.Fairy],
        'attack': 120,
        'levelType': LevelType.fast,
        'exp': 158,
        'eggCycles': 20,
    }, {
        'id': 211,
        'name': 'Qwilfish',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Poison],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 88,
        'eggCycles': 20,
    }, {
        'id': 212,
        'name': 'Scizor',
        'catchRate': 25,
        'type': [PokemonType.Bug, PokemonType.Steel],
        'attack': 150,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 25,
    }, {
        'id': 213,
        'name': 'Shuckle',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Rock],
        'attack': 230,
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'eggCycles': 20,
    }, {
        'id': 214,
        'name': 'Heracross',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'attack': 185,
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 25,
    }, {
        'id': 215,
        'name': 'Sneasel',
        'catchRate': 60,
        'type': [PokemonType.Dark, PokemonType.Ice],
        'attack': 95,
        'levelType': LevelType.mediumslow,
        'exp': 86,
        'eggCycles': 20,
    }, {
        'id': 216,
        'name': 'Teddiursa',
        'catchRate': 120,
        'type': [PokemonType.Normal],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Teddiursa', 'Ursaring', 30)],
    }, {
        'id': 217,
        'name': 'Ursaring',
        'catchRate': 60,
        'type': [PokemonType.Normal],
        'attack': 130,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 218,
        'name': 'Slugma',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'attack': 40,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Slugma', 'Magcargo', 38)],
    }, {
        'id': 219,
        'name': 'Magcargo',
        'catchRate': 75,
        'type': [PokemonType.Fire, PokemonType.Rock],
        'attack': 80,
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'eggCycles': 20,
    }, {
        'id': 220,
        'name': 'Swinub',
        'catchRate': 225,
        'type': [PokemonType.Ice, PokemonType.Ground],
        'attack': 50,
        'levelType': LevelType.slow,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Swinub', 'Piloswine', 33)],
    }, {
        'id': 221,
        'name': 'Piloswine',
        'catchRate': 75,
        'type': [PokemonType.Ice, PokemonType.Ground],
        'attack': 100,
        'levelType': LevelType.slow,
        'exp': 158,
        'eggCycles': 20,
    }, {
        'id': 222,
        'name': 'Corsola',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Rock],
        'attack': 95,
        'levelType': LevelType.fast,
        'exp': 144,
        'eggCycles': 20,
    }, {
        'id': 223,
        'name': 'Remoraid',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Remoraid', 'Octillery', 25)],
    }, {
        'id': 224,
        'name': 'Octillery',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'attack': 105,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'eggCycles': 20,
    }, {
        'id': 225,
        'name': 'Delibird',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Flying],
        'attack': 55,
        'levelType': LevelType.fast,
        'exp': 116,
        'eggCycles': 20,
    }, {
        'id': 226,
        'name': 'Mantine',
        'catchRate': 25,
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 140,
        'levelType': LevelType.slow,
        'exp': 170,
        'eggCycles': 25,
    }, {
        'id': 227,
        'name': 'Skarmory',
        'catchRate': 25,
        'type': [PokemonType.Steel, PokemonType.Flying],
        'attack': 80,
        'levelType': LevelType.slow,
        'exp': 163,
        'eggCycles': 25,
    }, {
        'id': 228,
        'name': 'Houndour',
        'catchRate': 120,
        'type': [PokemonType.Dark, PokemonType.Fire],
        'attack': 60,
        'levelType': LevelType.slow,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Houndour', 'Houndoom', 24)],
    }, {
        'id': 229,
        'name': 'Houndoom',
        'catchRate': 45,
        'type': [PokemonType.Dark, PokemonType.Fire],
        'attack': 90,
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 230,
        'name': 'Kingdra',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Dragon],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'eggCycles': 20,
    }, {
        'id': 231,
        'name': 'Phanpy',
        'catchRate': 120,
        'type': [PokemonType.Ground],
        'attack': 60,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Phanpy', 'Donphan', 25)],
    }, {
        'id': 232,
        'name': 'Donphan',
        'catchRate': 60,
        'type': [PokemonType.Ground],
        'attack': 120,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
    }, {
        'id': 233,
        'name': 'Porygon2',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 95,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'eggCycles': 20,
    }, {
        'id': 234,
        'name': 'Stantler',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 95,
        'levelType': LevelType.slow,
        'exp': 163,
        'eggCycles': 20,
    }, {
        'id': 235,
        'name': 'Smeargle',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 45,
        'levelType': LevelType.fast,
        'exp': 88,
        'eggCycles': 20,
    }, {
        'id': 236,
        'name': 'Tyrogue',
        'catchRate': 75,
        'type': [PokemonType.Fighting],
        'attack': 35,
        'levelType': LevelType.mediumfast,
        'exp': 42,
        'eggCycles': 25,
        'evolutions': [
            new LevelEvolution('Tyrogue', 'Hitmonlee', 20),
            new LevelEvolution('Tyrogue', 'Hitmonchan', 20),
            new LevelEvolution('Tyrogue', 'Hitmontop', 20),
        ],
        'baby': true,
    }, {
        'id': 237,
        'name': 'Hitmontop',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'attack': 110,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
    }, {
        'id': 238,
        'name': 'Smoochum',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Psychic],
        'attack': 65,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Smoochum', 'Jynx', 30)],
        'baby': true,
    }, {
        'id': 239,
        'name': 'Elekid',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'attack': 63,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Elekid', 'Electabuzz', 30)],
        'baby': true,
    }, {
        'id': 240,
        'name': 'Magby',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'attack': 75,
        'levelType': LevelType.mediumfast,
        'exp': 73,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Magby', 'Magmar', 30)],
        'baby': true,
    }, {
        'id': 241,
        'name': 'Miltank',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'attack': 80,
        'levelType': LevelType.slow,
        'exp': 172,
        'eggCycles': 20,
    }, {
        'id': 242,
        'name': 'Blissey',
        'catchRate': 30,
        'type': [PokemonType.Normal],
        'attack': 135,
        'levelType': LevelType.fast,
        'exp': 608,
        'eggCycles': 40,
    }, {
        'id': 243,
        'name': 'Raikou',
        'catchRate': 3,
        'type': [PokemonType.Electric],
        'attack': 100,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 244,
        'name': 'Entei',
        'catchRate': 3,
        'type': [PokemonType.Fire],
        'attack': 115,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 245,
        'name': 'Suicune',
        'catchRate': 3,
        'type': [PokemonType.Water],
        'attack': 115,
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
    }, {
        'id': 246,
        'name': 'Larvitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 64,
        'levelType': LevelType.slow,
        'exp': 60,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Larvitar', 'Pupitar', 30)],
    }, {
        'id': 247,
        'name': 'Pupitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'attack': 84,
        'levelType': LevelType.slow,
        'exp': 144,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Pupitar', 'Tyranitar', 55)],
    }, {
        'id': 248,
        'name': 'Tyranitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Dark],
        'attack': 164,
        'levelType': LevelType.slow,
        'exp': 270,
        'eggCycles': 40,
    }, {
        'id': 249,
        'name': 'Lugia',
        'catchRate': 3,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 154,
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
    }, {
        'id': 250,
        'name': 'Ho-Oh',
        'catchRate': 3,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 154,
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
    }, {
        'id': 251,
        'name': 'Celebi',
        'catchRate': 45,
        'type': [PokemonType.Psychic, PokemonType.Grass],
        'attack': 100,
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'eggCycles': 120,
    }, {
        'id': 252,
        'name': 'Treecko',
        'type': [PokemonType.Grass],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Treecko', 'Grovyle', 16)],
    }, {
        'id': 253,
        'name': 'Grovyle',
        'type': [PokemonType.Grass],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Grovyle', 'Sceptile', 36)],
    }, {
        'id': 254,
        'name': 'Sceptile',
        'type': [PokemonType.Grass],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    }, {
        'id': 255,
        'name': 'Torchic',
        'type': [PokemonType.Fire],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Torchic', 'Combusken', 16)],
    }, {
        'id': 256,
        'name': 'Combusken',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Combusken', 'Blaziken', 36)],
    }, {
        'id': 257,
        'name': 'Blaziken',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    }, {
        'id': 258,
        'name': 'Mudkip',
        'type': [PokemonType.Water],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Mudkip', 'Marshtomp', 16)],
    }, {
        'id': 259,
        'name': 'Marshtomp',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Marshtomp', 'Swampert', 36)],
    }, {
        'id': 260,
        'name': 'Swampert',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 241,
        'catchRate': 45,
    }, {
        'id': 261,
        'name': 'Poochyena',
        'type': [PokemonType.Dark],
        'attack': 55,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Poochyena', 'Mightyena', 18)],
    }, {
        'id': 262,
        'name': 'Mightyena',
        'type': [PokemonType.Dark],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 127,
    }, {
        'id': 263,
        'name': 'Zigzagoon',
        'type': [PokemonType.Normal],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Zigzagoon', 'Linoone', 20)],
    }, {
        'id': 264,
        'name': 'Linoone',
        'type': [PokemonType.Normal],
        'attack': 100,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 90,
    }, {
        'id': 265,
        'name': 'Wurmple',
        'type': [PokemonType.Bug],
        'attack': 45,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [
            new LevelEvolution('Wurmple', 'Silcoon', 7),
            new LevelEvolution('Wurmple', 'Cascoon', 7),
        ],
    }, {
        'id': 266,
        'name': 'Silcoon',
        'type': [PokemonType.Bug],
        'attack': 55,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Silcoon', 'Beautifly', 10)],
    }, {
        'id': 267,
        'name': 'Beautifly',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 100,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'catchRate': 45,
    }, {
        'id': 268,
        'name': 'Cascoon',
        'type': [PokemonType.Bug],
        'attack': 55,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 120,
    }, {
        'id': 269,
        'name': 'Dustox',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 45,
    }, {
        'id': 270,
        'name': 'Lotad',
        'type': [PokemonType.Water, PokemonType.Grass],
        'attack': 50,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 44,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Lotad', 'Lombre', 14)],
    }, {
        'id': 271,
        'name': 'Lombre',
        'type': [PokemonType.Water, PokemonType.Grass],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Lombre', 'Ludicolo', GameConstants.StoneType.Water_stone)],
    }, {
        'id': 272,
        'name': 'Ludicolo',
        'type': [PokemonType.Water, PokemonType.Grass],
        'attack': 100,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'catchRate': 45,
    }, {
        'id': 273,
        'name': 'Seedot',
        'type': [PokemonType.Grass],
        'attack': 50,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 44,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Seedot', 'Nuzleaf', 14)],
    }, {
        'id': 274,
        'name': 'Nuzleaf',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Nuzleaf', 'Shiftry', GameConstants.StoneType.Leaf_stone)],
    }, {
        'id': 275,
        'name': 'Shiftry',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'attack': 100,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'catchRate': 45,
    }, {
        'id': 276,
        'name': 'Taillow',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Taillow', 'Swellow', 22)],
    }, {
        'id': 277,
        'name': 'Swellow',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 125,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 159,
        'catchRate': 45,
    }, {
        'id': 278,
        'name': 'Wingull',
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Wingull', 'Pelipper', 25)],
    }, {
        'id': 279,
        'name': 'Pelipper',
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'catchRate': 45,
    }, {
        'id': 280,
        'name': 'Ralts',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 45,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 40,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Ralts', 'Kirlia', 20)],
    }, {
        'id': 281,
        'name': 'Kirlia',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 97,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Kirlia', 'Gardevoir', 30)],
    }, {
        'id': 282,
        'name': 'Gardevoir',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 233,
        'catchRate': 45,
    }, {
        'id': 283,
        'name': 'Surskit',
        'type': [PokemonType.Bug, PokemonType.Water],
        'attack': 65,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Surskit', 'Masquerain', 22)],
    }, {
        'id': 284,
        'name': 'Masquerain',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 100,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'catchRate': 75,
    }, {
        'id': 285,
        'name': 'Shroomish',
        'type': [PokemonType.Grass],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 59,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Shroomish', 'Breloom', 23)],
    }, {
        'id': 286,
        'name': 'Breloom',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'attack': 130,
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 161,
        'catchRate': 90,
    }, {
        'id': 287,
        'name': 'Slakoth',
        'type': [PokemonType.Normal],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Slakoth', 'Vigoroth', 18)],
    }, {
        'id': 288,
        'name': 'Vigoroth',
        'type': [PokemonType.Normal],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 154,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vigoroth', 'Slaking', 36)],
    }, {
        'id': 289,
        'name': 'Slaking',
        'type': [PokemonType.Normal],
        'attack': 160,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 252,
        'catchRate': 45,
    }, {
        'id': 290,
        'name': 'Nincada',
        'type': [PokemonType.Bug, PokemonType.Ground],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Nincada', 'Ninjask', 20)],
    }, {
        'id': 291,
        'name': 'Ninjask',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 160,
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 160,
        'catchRate': 120,
    }, {
        'id': 292,
        'name': 'Shedinja',
        'type': [PokemonType.Bug, PokemonType.Ghost],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 83,
        'catchRate': 45,
    }, {
        'id': 293,
        'name': 'Whismur',
        'type': [PokemonType.Normal],
        'attack': 64,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 48,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Whismur', 'Loudred', 20)],
    }, {
        'id': 294,
        'name': 'Loudred',
        'type': [PokemonType.Normal],
        'attack': 84,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 126,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Loudred', 'Exploud', 40)],
    }, {
        'id': 295,
        'name': 'Exploud',
        'type': [PokemonType.Normal],
        'attack': 104,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 45,
    }, {
        'id': 296,
        'name': 'Makuhita',
        'type': [PokemonType.Fighting],
        'attack': 72,
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 47,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Makuhita', 'Hariyama', 24)],
    }, {
        'id': 297,
        'name': 'Hariyama',
        'type': [PokemonType.Fighting],
        'attack': 144,
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 166,
        'catchRate': 200,
    }, {
        'id': 298,
        'name': 'Azurill',
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'attack': 50,
        'eggCycles': 10,
        'levelType': LevelType.fast,
        'exp': 38,
        'catchRate': 150,
        'evolutions': [new LevelEvolution('Azurill', 'Marill', 100)],
        'baby': true,
    }, {
        'id': 299,
        'name': 'Nosepass',
        'type': [PokemonType.Rock],
        'attack': 135,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 75,
        'catchRate': 255,
    }, {
        'id': 300,
        'name': 'Skitty',
        'type': [PokemonType.Normal],
        'attack': 50,
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 52,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Skitty', 'Delcatty', GameConstants.StoneType.Moon_stone)],
    }, {
        'id': 301,
        'name': 'Delcatty',
        'type': [PokemonType.Normal],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 140,
        'catchRate': 60,
    }, {
        'id': 302,
        'name': 'Sableye',
        'type': [PokemonType.Dark, PokemonType.Ghost],
        'attack': 75,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 133,
        'catchRate': 45,
    }, {
        'id': 303,
        'name': 'Mawile',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 133,
        'catchRate': 45,
    }, {
        'id': 304,
        'name': 'Aron',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'attack': 100,
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Aron', 'Lairon', 32)],
    }, {
        'id': 305,
        'name': 'Lairon',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'attack': 140,
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 151,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Lairon', 'Aggron', 42)],
    }, {
        'id': 306,
        'name': 'Aggron',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'attack': 180,
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 239,
        'catchRate': 45,
    }, {
        'id': 307,
        'name': 'Meditite',
        'type': [PokemonType.Fighting, PokemonType.Psychic],
        'attack': 60,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Meditite', 'Medicham', 37)],
    }, {
        'id': 308,
        'name': 'Medicham',
        'type': [PokemonType.Fighting, PokemonType.Psychic],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'catchRate': 90,
    }, {
        'id': 309,
        'name': 'Electrike',
        'type': [PokemonType.Electric],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 59,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Electrike', 'Manectric', 26)],
    }, {
        'id': 310,
        'name': 'Manectric',
        'type': [PokemonType.Electric],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 166,
        'catchRate': 45,
    }, {
        'id': 311,
        'name': 'Plusle',
        'type': [PokemonType.Electric],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
    }, {
        'id': 312,
        'name': 'Minun',
        'type': [PokemonType.Electric],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
    }, {
        'id': 313,
        'name': 'Volbeat',
        'type': [PokemonType.Bug],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 151,
        'catchRate': 150,
    }, {
        'id': 314,
        'name': 'Illumise',
        'type': [PokemonType.Bug],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 151,
        'catchRate': 150,
    }, {
        'id': 315,
        'name': 'Roselia',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 140,
        'catchRate': 150,
    }, {
        'id': 316,
        'name': 'Gulpin',
        'type': [PokemonType.Poison],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 60,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Gulpin', 'Swalot', 26)],
    }, {
        'id': 317,
        'name': 'Swalot',
        'type': [PokemonType.Poison],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 163,
        'catchRate': 75,
    }, {
        'id': 318,
        'name': 'Carvanha',
        'type': [PokemonType.Water, PokemonType.Dark],
        'attack': 90,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 61,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Carvanha', 'Sharpedo', 30)],
    }, {
        'id': 319,
        'name': 'Sharpedo',
        'type': [PokemonType.Water, PokemonType.Dark],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 161,
        'catchRate': 60,
    }, {
        'id': 320,
        'name': 'Wailmer',
        'type': [PokemonType.Water],
        'attack': 130,
        'eggCycles': 40,
        'levelType': LevelType.fluctuating,
        'exp': 80,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Wailmer', 'Wailord', 40)],
    }, {
        'id': 321,
        'name': 'Wailord',
        'type': [PokemonType.Water],
        'attack': 170,
        'eggCycles': 40,
        'levelType': LevelType.fluctuating,
        'exp': 175,
        'catchRate': 60,
    }, {
        'id': 322,
        'name': 'Numel',
        'type': [PokemonType.Fire, PokemonType.Ground],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Numel', 'Camerupt', 33)],
    }, {
        'id': 323,
        'name': 'Camerupt',
        'type': [PokemonType.Fire, PokemonType.Ground],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 150,
    }, {
        'id': 324,
        'name': 'Torkoal',
        'type': [PokemonType.Fire],
        'attack': 140,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 90,
    }, {
        'id': 325,
        'name': 'Spoink',
        'type': [PokemonType.Psychic],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 66,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Spoink', 'Grumpig', 32)],
    }, {
        'id': 326,
        'name': 'Grumpig',
        'type': [PokemonType.Psychic],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 165,
        'catchRate': 60,
    }, {
        'id': 327,
        'name': 'Spinda',
        'type': [PokemonType.Normal],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 126,
        'catchRate': 255,
    }, {
        'id': 328,
        'name': 'Trapinch',
        'type': [PokemonType.Ground],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Trapinch', 'Vibrava', 35)],
    }, {
        'id': 329,
        'name': 'Vibrava',
        'type': [PokemonType.Ground, PokemonType.Dragon],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vibrava', 'Flygon', 45)],
    }, {
        'id': 330,
        'name': 'Flygon',
        'type': [PokemonType.Ground, PokemonType.Dragon],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
    }, {
        'id': 331,
        'name': 'Cacnea',
        'type': [PokemonType.Grass],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Cacnea', 'Cacturne', 32)],
    }, {
        'id': 332,
        'name': 'Cacturne',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 166,
        'catchRate': 60,
    }, {
        'id': 333,
        'name': 'Swablu',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 75,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 62,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Swablu', 'Altaria', 35)],
    }, {
        'id': 334,
        'name': 'Altaria',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 172,
        'catchRate': 45,
    }, {
        'id': 335,
        'name': 'Zangoose',
        'type': [PokemonType.Normal],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 160,
        'catchRate': 90,
    }, {
        'id': 336,
        'name': 'Seviper',
        'type': [PokemonType.Poison],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 160,
        'catchRate': 90,
    }, {
        'id': 337,
        'name': 'Lunatone',
        'type': [PokemonType.Rock, PokemonType.Psychic],
        'attack': 95,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 161,
        'catchRate': 45,
    }, {
        'id': 338,
        'name': 'Solrock',
        'type': [PokemonType.Rock, PokemonType.Psychic],
        'attack': 95,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 161,
        'catchRate': 45,
    }, {
        'id': 339,
        'name': 'Barboach',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 60,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Barboach', 'Whiscash', 30)],
    }, {
        'id': 340,
        'name': 'Whiscash',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 164,
        'catchRate': 75,
    }, {
        'id': 341,
        'name': 'Corphish',
        'type': [PokemonType.Water],
        'attack': 80,
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 62,
        'catchRate': 205,
        'evolutions': [new LevelEvolution('Corphish', 'Crawdaunt', 30)],
    }, {
        'id': 342,
        'name': 'Crawdaunt',
        'type': [PokemonType.Water, PokemonType.Dark],
        'attack': 120,
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 164,
        'catchRate': 155,
    }, {
        'id': 343,
        'name': 'Baltoy',
        'type': [PokemonType.Ground, PokemonType.Psychic],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Baltoy', 'Claydol', 36)],
    }, {
        'id': 344,
        'name': 'Claydol',
        'type': [PokemonType.Ground, PokemonType.Psychic],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 90,
    }, {
        'id': 345,
        'name': 'Lileep',
        'type': [PokemonType.Rock, PokemonType.Grass],
        'attack': 87,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Lileep', 'Cradily', 40)],
    }, {
        'id': 346,
        'name': 'Cradily',
        'type': [PokemonType.Rock, PokemonType.Grass],
        'attack': 107,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
    }, {
        'id': 347,
        'name': 'Anorith',
        'type': [PokemonType.Rock, PokemonType.Bug],
        'attack': 95,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Anorith', 'Armaldo', 40)],
    }, {
        'id': 348,
        'name': 'Armaldo',
        'type': [PokemonType.Rock, PokemonType.Bug],
        'attack': 125,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
    }, {
        'id': 349,
        'name': 'Feebas',
        'type': [PokemonType.Water],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 40,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Feebas', 'Milotic', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 350,
        'name': 'Milotic',
        'type': [PokemonType.Water],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 189,
        'catchRate': 60,
    }, {
        'id': 351,
        'name': 'Castform',
        'type': [PokemonType.Normal],
        'attack': 70,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 45,
    }, {
        'id': 352,
        'name': 'Kecleon',
        'type': [PokemonType.Normal],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 200,
    }, {
        'id': 353,
        'name': 'Shuppet',
        'type': [PokemonType.Ghost],
        'attack': 75,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 59,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Shuppet', 'Banette', 37)],
    }, {
        'id': 354,
        'name': 'Banette',
        'type': [PokemonType.Ghost],
        'attack': 115,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 45,
    }, {
        'id': 355,
        'name': 'Duskull',
        'type': [PokemonType.Ghost],
        'attack': 90,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Duskull', 'Dusclops', 37)],
    }, {
        'id': 356,
        'name': 'Dusclops',
        'type': [PokemonType.Ghost],
        'attack': 130,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 90,
    }, {
        'id': 357,
        'name': 'Tropius',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 99,
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 161,
        'catchRate': 200,
    }, {
        'id': 358,
        'name': 'Chimecho',
        'type': [PokemonType.Psychic],
        'attack': 95,
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 45,
    }, {
        'id': 359,
        'name': 'Absol',
        'type': [PokemonType.Dark],
        'attack': 130,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 163,
        'catchRate': 30,
    }, {
        'id': 360,
        'name': 'Wynaut',
        'type': [PokemonType.Psychic],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Wynaut', 'Wobbuffet', 15)],
        'baby': true,
    }, {
        'id': 361,
        'name': 'Snorunt',
        'type': [PokemonType.Ice],
        'attack': 50,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Snorunt', 'Glalie', 42)],
    }, {
        'id': 362,
        'name': 'Glalie',
        'type': [PokemonType.Ice],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    }, {
        'id': 363,
        'name': 'Spheal',
        'type': [PokemonType.Ice, PokemonType.Water],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Spheal', 'Sealeo', 32)],
    }, {
        'id': 364,
        'name': 'Sealeo',
        'type': [PokemonType.Ice, PokemonType.Water],
        'attack': 90,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 144,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Sealeo', 'Walrein', 44)],
    }, {
        'id': 365,
        'name': 'Walrein',
        'type': [PokemonType.Ice, PokemonType.Water],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    }, {
        'id': 366,
        'name': 'Clamperl',
        'type': [PokemonType.Water],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 69,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Clamperl', 'Huntail', GameConstants.StoneType.Trade_stone)],
    }, {
        'id': 367,
        'name': 'Huntail',
        'type': [PokemonType.Water],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 60,
    }, {
        'id': 368,
        'name': 'Gorebyss',
        'type': [PokemonType.Water],
        'attack': 114,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 60,
    }, {
        'id': 369,
        'name': 'Relicanth',
        'type': [PokemonType.Water, PokemonType.Rock],
        'attack': 130,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 170,
        'catchRate': 25,
    }, {
        'id': 370,
        'name': 'Luvdisc',
        'type': [PokemonType.Water],
        'attack': 97,
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 116,
        'catchRate': 225,
    }, {
        'id': 371,
        'name': 'Bagon',
        'type': [PokemonType.Dragon],
        'attack': 75,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Bagon', 'Shelgon', 30)],
    }, {
        'id': 372,
        'name': 'Shelgon',
        'type': [PokemonType.Dragon],
        'attack': 100,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Shelgon', 'Salamence', 50)],
    }, {
        'id': 373,
        'name': 'Salamence',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'attack': 135,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
    }, {
        'id': 374,
        'name': 'Beldum',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 80,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 3,
        'evolutions': [new LevelEvolution('Beldum', 'Metang', 20)],
    }, {
        'id': 375,
        'name': 'Metang',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 100,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 3,
        'evolutions': [new LevelEvolution('Metang', 'Metagross', 45)],
    }, {
        'id': 376,
        'name': 'Metagross',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 135,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    }, {
        'id': 377,
        'name': 'Regirock',
        'type': [PokemonType.Rock],
        'attack': 200,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    }, {
        'id': 378,
        'name': 'Regice',
        'type': [PokemonType.Ice],
        'attack': 200,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    }, {
        'id': 379,
        'name': 'Registeel',
        'type': [PokemonType.Steel],
        'attack': 150,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    }, {
        'id': 380,
        'name': 'Latias',
        'type': [PokemonType.Dragon, PokemonType.Psychic],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    }, {
        'id': 381,
        'name': 'Latios',
        'type': [PokemonType.Dragon, PokemonType.Psychic],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    }, {
        'id': 382,
        'name': 'Kyogre',
        'type': [PokemonType.Water],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
    }, {
        'id': 383,
        'name': 'Groudon',
        'type': [PokemonType.Ground],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
    }, {
        'id': 384,
        'name': 'Rayquaza',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
    }, {
        'id': 385,
        'name': 'Jirachi',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 100,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    }, {
        'id': 386,
        'name': 'Deoxys\nNormal Forme',
        'type': [PokemonType.Psychic],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 387,
        'name': 'Turtwig',
        'type': [PokemonType.Grass],
        'attack': 68,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Turtwig', 'Grotle', 18)],
    },
    {
        'id': 388,
        'name': 'Grotle',
        'type': [PokemonType.Grass],
        'attack': 89,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Grotle', 'Torterra', 32)],
    },
    {
        'id': 389,
        'name': 'Torterra',
        'type': [PokemonType.Grass, PokemonType.Ground],
        'attack': 109,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'catchRate': 45,
    },
    {
        'id': 390,
        'name': 'Chimchar',
        'type': [PokemonType.Fire],
        'attack': 61,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Chimchar', 'Monferno', 14)],
    },
    {
        'id': 391,
        'name': 'Monferno',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 81,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Monferno', 'Infernape', 36)],
    },
    {
        'id': 392,
        'name': 'Infernape',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 108,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'catchRate': 45,
    },
    {
        'id': 393,
        'name': 'Piplup',
        'type': [PokemonType.Water],
        'attack': 61,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Piplup', 'Prinplup', 16)],
    },
    {
        'id': 394,
        'name': 'Prinplup',
        'type': [PokemonType.Water],
        'attack': 81,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Prinplup', 'Empoleon', 36)],
    },
    {
        'id': 395,
        'name': 'Empoleon',
        'type': [PokemonType.Water, PokemonType.Steel],
        'attack': 111,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 396,
        'name': 'Starly',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 49,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Starly', 'Staravia', 14)],
    },
    {
        'id': 397,
        'name': 'Staravia',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 80,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Staravia', 'Staraptor', 34)],
    },
    {
        'id': 398,
        'name': 'Staraptor',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 120,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 218,
        'catchRate': 45,
    },
    {
        'id': 399,
        'name': 'Bidoof',
        'type': [PokemonType.Normal],
        'attack': 59,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bidoof', 'Bibarel', 15)],
    },
    {
        'id': 400,
        'name': 'Bibarel',
        'type': [PokemonType.Normal, PokemonType.Water],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'catchRate': 127,
    },
    {
        'id': 401,
        'name': 'Kricketot',
        'type': [PokemonType.Bug],
        'attack': 41,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 39,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Kricketot', 'Kricketune', 10)],
    },
    {
        'id': 402,
        'name': 'Kricketune',
        'type': [PokemonType.Bug],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 45,
    },
    {
        'id': 403,
        'name': 'Shinx',
        'type': [PokemonType.Electric],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 53,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Shinx', 'Luxio', 15)],
    },
    {
        'id': 404,
        'name': 'Luxio',
        'type': [PokemonType.Electric],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 127,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Luxio', 'Luxray', 30)],
    },
    {
        'id': 405,
        'name': 'Luxray',
        'type': [PokemonType.Electric],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 235,
        'catchRate': 45,
    },
    {
        'id': 406,
        'name': 'Budew',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Budew', 'Roselia', 100)],
        'baby': true,
    },
    {
        'id': 407,
        'name': 'Roserade',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 232,
        'catchRate': 75,
    },
    {
        'id': 408,
        'name': 'Cranidos',
        'type': [PokemonType.Rock],
        'attack': 125,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 70,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cranidos', 'Rampardos', 30)],
    },
    {
        'id': 409,
        'name': 'Rampardos',
        'type': [PokemonType.Rock],
        'attack': 165,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
    },
    {
        'id': 410,
        'name': 'Shieldon',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'attack': 118,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 70,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Shieldon', 'Bastiodon', 30)],
    },
    {
        'id': 411,
        'name': 'Bastiodon',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'attack': 168,
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
    },
    {
        'id': 412,
        'name': 'Burmy',
        'type': [PokemonType.Bug],
        'attack': 45,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 45,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Burmy', 'Wormadam', 20)],
    },
    {
        'id': 413,
        'name': 'Wormadam\nPlant Cloak',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 105,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
    },
    {
        'id': 414,
        'name': 'Mothim',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 94,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
    },
    {
        'id': 415,
        'name': 'Combee',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 49,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Combee', 'Vespiquen', 21)],
    },
    {
        'id': 416,
        'name': 'Vespiquen',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 102,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 166,
        'catchRate': 45,
    },
    {
        'id': 417,
        'name': 'Pachirisu',
        'type': [PokemonType.Electric],
        'attack': 95,
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
    },
    {
        'id': 418,
        'name': 'Buizel',
        'type': [PokemonType.Water],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Buizel', 'Floatzel', 26)],
    },
    {
        'id': 419,
        'name': 'Floatzel',
        'type': [PokemonType.Water],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
    },
    {
        'id': 420,
        'name': 'Cherubi',
        'type': [PokemonType.Grass],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Cherubi', 'Cherrim', 25)],
    },
    {
        'id': 421,
        'name': 'Cherrim',
        'type': [PokemonType.Grass],
        'attack': 87,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'catchRate': 75,
    },
    {
        'id': 422,
        'name': 'Shellos',
        'type': [PokemonType.Water],
        'attack': 76,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Shellos', 'Gastrodon', 30)],
    },
    {
        'id': 423,
        'name': 'Gastrodon',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 111,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
    },
    {
        'id': 424,
        'name': 'Ambipom',
        'type': [PokemonType.Normal],
        'attack': 115,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 169,
        'catchRate': 45,
    },
    {
        'id': 425,
        'name': 'Drifloon',
        'type': [PokemonType.Ghost, PokemonType.Flying],
        'attack': 90,
        'eggCycles': 30,
        'levelType': LevelType.fluctuating,
        'exp': 70,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Drifloon', 'Drifblim', 28)],
    },
    {
        'id': 426,
        'name': 'Drifblim',
        'type': [PokemonType.Ghost, PokemonType.Flying],
        'attack': 150,
        'eggCycles': 30,
        'levelType': LevelType.fluctuating,
        'exp': 174,
        'catchRate': 60,
    },
    {
        'id': 427,
        'name': 'Buneary',
        'type': [PokemonType.Normal],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Buneary', 'Lopunny', 100)],
    },
    {
        'id': 428,
        'name': 'Lopunny',
        'type': [PokemonType.Normal],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
    },
    {
        'id': 429,
        'name': 'Mismagius',
        'type': [PokemonType.Ghost],
        'attack': 105,
        'eggCycles': 25,
        'levelType': 4,
        'exp': 173,
        'catchRate': 45,
    },
    {
        'id': 430,
        'name': 'Honchkrow',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'catchRate': 30,
    },
    {
        'id': 431,
        'name': 'Glameow',
        'type': [PokemonType.Normal],
        'attack': 85,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 62,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Glameow', 'Purugly', 38)],
    },
    {
        'id': 432,
        'name': 'Purugly',
        'type': [PokemonType.Normal],
        'attack': 112,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 158,
        'catchRate': 75,
    },
    {
        'id': 433,
        'name': 'Chingling',
        'type': [PokemonType.Psychic],
        'attack': 65,
        'eggCycles': 25,
        'levelType': 4,
        'exp': 57,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Chingling', 'Chimecho', 100)],
        'baby': true,
    },
    {
        'id': 434,
        'name': 'Stunky',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'attack': 74,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Stunky', 'Skuntank', 34)],
    },
    {
        'id': 435,
        'name': 'Skuntank',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'attack': 103,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
    },
    {
        'id': 436,
        'name': 'Bronzor',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 86,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bronzor', 'Bronzong', 33)],
    },
    {
        'id': 437,
        'name': 'Bronzong',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'attack': 116,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 90,
    },
    {
        'id': 438,
        'name': 'Bonsly',
        'type': [PokemonType.Rock],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Bonsly', 'Sudowoodo', GameConstants.StoneType.None)],
        'baby': true,
    },
    {
        'id': 439,
        'name': 'Mime Jr.',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 90,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'catchRate': 145,
        'evolutions': [new StoneEvolution('Mime Jr.', 'Mr. Mime', GameConstants.StoneType.None)],
        'baby': true,
    },
    {
        'id': 440,
        'name': 'Happiny',
        'type': [PokemonType.Normal],
        'attack': 100,
        'eggCycles': 40,
        'levelType': 4,
        'exp': 110,
        'catchRate': 130,
        'evolutions': [new StoneEvolution('Happiny', 'Chansey', GameConstants.StoneType.None)],
        'baby': true,
    },
    {
        'id': 441,
        'name': 'Chatot',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 92,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 144,
        'catchRate': 30,
    },
    {
        'id': 442,
        'name': 'Spiritomb',
        'type': [PokemonType.Ghost, PokemonType.Dark],
        'attack': 108,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 100,
    },
    {
        'id': 443,
        'name': 'Gible',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'attack': 70,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Gible', 'Gabite', 24)],
    },
    {
        'id': 444,
        'name': 'Gabite',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'attack': 90,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 144,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Gabite', 'Garchomp', 48)],
    },
    {
        'id': 445,
        'name': 'Garchomp',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'attack': 130,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
    },
    {
        'id': 446,
        'name': 'Munchlax',
        'type': [PokemonType.Normal],
        'attack': 135,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 78,
        'catchRate': 50,
        'evolutions': [new LevelEvolution('Munchlax', 'Snorlax', 100)],
        'baby': true,
    },
    {
        'id': 447,
        'name': 'Riolu',
        'type': [PokemonType.Fighting],
        'attack': 70,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 57,
        'catchRate': 75,
        'evolutions': [new LevelEvolution('Riolu', 'Lucario', 100)],
    },
    {
        'id': 448,
        'name': 'Lucario',
        'type': [PokemonType.Fighting, PokemonType.Steel],
        'attack': 115,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 184,
        'catchRate': 45,
    },
    {
        'id': 449,
        'name': 'Hippopotas',
        'type': [PokemonType.Ground],
        'attack': 78,
        'eggCycles': 30,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Hippopotas', 'Hippowdon', 34)],
    },
    {
        'id': 450,
        'name': 'Hippowdon',
        'type': [PokemonType.Ground],
        'attack': 118,
        'eggCycles': 30,
        'levelType': LevelType.slow,
        'exp': 184,
        'catchRate': 60,
    },
    {
        'id': 451,
        'name': 'Skorupi',
        'type': [PokemonType.Poison, PokemonType.Bug],
        'attack': 90,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Skorupi', 'Drapion', 40)],
    },
    {
        'id': 452,
        'name': 'Drapion',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 175,
        'catchRate': 45,
    },
    {
        'id': 453,
        'name': 'Croagunk',
        'type': [PokemonType.Poison, PokemonType.Fighting],
        'attack': 61,
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Croagunk', 'Toxicroak', 37)],
    },
    {
        'id': 454,
        'name': 'Toxicroak',
        'type': [PokemonType.Poison, PokemonType.Fighting],
        'attack': 106,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 75,
    },
    {
        'id': 455,
        'name': 'Carnivine',
        'type': [PokemonType.Grass],
        'attack': 100,
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 159,
        'catchRate': 200,
    },
    {
        'id': 456,
        'name': 'Finneon',
        'type': [PokemonType.Water],
        'attack': 66,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Finneon', 'Lumineon', 31)],
    },
    {
        'id': 457,
        'name': 'Lumineon',
        'type': [PokemonType.Water],
        'attack': 91,
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 161,
        'catchRate': 75,
    },
    {
        'id': 458,
        'name': 'Mantyke',
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 120,
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 69,
        'catchRate': 25,
        'evolutions': [new StoneEvolution('Mantyke', 'Mantine', GameConstants.StoneType.None)],
        'baby': true,
    },
    {
        'id': 459,
        'name': 'Snover',
        'type': [PokemonType.Grass, PokemonType.Ice],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 67,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Snover', 'Abomasnow', 40)],
    },
    {
        'id': 460,
        'name': 'Abomasnow',
        'type': [PokemonType.Grass, PokemonType.Ice],
        'attack': 92,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 173,
        'catchRate': 60,
    },
    {
        'id': 461,
        'name': 'Weavile',
        'type': [PokemonType.Dark, PokemonType.Ice],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
    },
    {
        'id': 462,
        'name': 'Magnezone',
        'type': [PokemonType.Electric, PokemonType.Steel],
        'attack': 130,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'catchRate': 30,
    },
    {
        'id': 463,
        'name': 'Lickilicky',
        'type': [PokemonType.Normal],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 30,
    },
    {
        'id': 464,
        'name': 'Rhyperior',
        'type': [PokemonType.Ground, PokemonType.Rock],
        'attack': 140,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 241,
        'catchRate': 30,
    },
    {
        'id': 465,
        'name': 'Tangrowth',
        'type': [PokemonType.Grass],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 187,
        'catchRate': 30,
    },
    {
        'id': 466,
        'name': 'Electivire',
        'type': [PokemonType.Electric],
        'attack': 123,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'catchRate': 30,
    },
    {
        'id': 467,
        'name': 'Magmortar',
        'type': [PokemonType.Fire],
        'attack': 125,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'catchRate': 30,
    },
    {
        'id': 468,
        'name': 'Togekiss',
        'type': [PokemonType.Fairy, PokemonType.Flying],
        'attack': 120,
        'eggCycles': 10,
        'levelType': 4,
        'exp': 245,
        'catchRate': 30,
    },
    {
        'id': 469,
        'name': 'Yanmega',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 116,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 30,
    },
    {
        'id': 470,
        'name': 'Leafeon',
        'type': [PokemonType.Grass],
        'attack': 130,
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
    },
    {
        'id': 471,
        'name': 'Glaceon',
        'type': [PokemonType.Ice],
        'attack': 130,
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
    },
    {
        'id': 472,
        'name': 'Gliscor',
        'type': [PokemonType.Ground, PokemonType.Flying],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 30,
    },
    {
        'id': 473,
        'name': 'Mamoswine',
        'type': [PokemonType.Ice, PokemonType.Ground],
        'attack': 130,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 239,
        'catchRate': 50,
    },
    {
        'id': 474,
        'name': 'Porygon-Z',
        'type': [PokemonType.Normal],
        'attack': 135,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'catchRate': 30,
    },
    {
        'id': 475,
        'name': 'Gallade',
        'type': [PokemonType.Psychic, PokemonType.Fighting],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 233,
        'catchRate': 45,
    },
    {
        'id': 476,
        'name': 'Probopass',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'attack': 150,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 60,
    },
    {
        'id': 477,
        'name': 'Dusknoir',
        'type': [PokemonType.Ghost],
        'attack': 135,
        'eggCycles': 25,
        'levelType': 4,
        'exp': 236,
        'catchRate': 45,
    },
    {
        'id': 478,
        'name': 'Froslass',
        'type': [PokemonType.Ice, PokemonType.Ghost],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    },
    {
        'id': 479,
        'name': 'Rotom',
        'type': [PokemonType.Electric, PokemonType.Ghost],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
    },
    {
        'id': 480,
        'name': 'Uxie',
        'type': [PokemonType.Psychic],
        'attack': 130,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 481,
        'name': 'Mesprit',
        'type': [PokemonType.Psychic],
        'attack': 105,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 482,
        'name': 'Azelf',
        'type': [PokemonType.Psychic],
        'attack': 125,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 483,
        'name': 'Dialga',
        'type': [PokemonType.Steel, PokemonType.Dragon],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
    {
        'id': 484,
        'name': 'Palkia',
        'type': [PokemonType.Water, PokemonType.Dragon],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
    {
        'id': 485,
        'name': 'Heatran',
        'type': [PokemonType.Fire, PokemonType.Steel],
        'attack': 130,
        'eggCycles': 10,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 486,
        'name': 'Regigigas',
        'type': [PokemonType.Normal],
        'attack': 160,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
    },
    {
        'id': 487,
        'name': 'Giratina\nAltered Forme',
        'type': [PokemonType.Ghost, PokemonType.Dragon],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
    {
        'id': 488,
        'name': 'Cresselia',
        'type': [PokemonType.Psychic],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 489,
        'name': 'Phione',
        'type': [PokemonType.Water],
        'attack': 80,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 216,
        'catchRate': 30,
    },
    {
        'id': 490,
        'name': 'Manaphy',
        'type': [PokemonType.Water],
        'attack': 100,
        'eggCycles': 10,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 491,
        'name': 'Darkrai',
        'type': [PokemonType.Dark],
        'attack': 135,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 492,
        'name': 'Shaymin\nLand Forme',
        'type': [PokemonType.Grass],
        'attack': 100,
        'eggCycles': 120,
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'catchRate': 45,
    },
    {
        'id': 493,
        'name': 'Arceus',
        'type': [PokemonType.Normal],
        'attack': 120,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
    },
    {
        'id': 494,
        'name': 'Victini',
        'type': [PokemonType.Psychic, PokemonType.Fire],
        'attack': 100,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 495,
        'name': 'Snivy',
        'type': [PokemonType.Grass],
        'attack': 63,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Snivy', 'Servine', 17)],
    },
    {
        'id': 496,
        'name': 'Servine',
        'type': [PokemonType.Grass],
        'attack': 83,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 145,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Servine', 'Serperior', 36)],
    },
    {
        'id': 497,
        'name': 'Serperior',
        'type': [PokemonType.Grass],
        'attack': 113,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
    },
    {
        'id': 498,
        'name': 'Tepig',
        'type': [PokemonType.Fire],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tepig', 'Pignite', 17)],
    },
    {
        'id': 499,
        'name': 'Pignite',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 93,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 146,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Pignite', 'Emboar', 36)],
    },
    {
        'id': 500,
        'name': 'Emboar',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'attack': 123,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
    },
    {
        'id': 501,
        'name': 'Oshawott',
        'type': [PokemonType.Water],
        'attack': 63,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Oshawott', 'Dewott', 17)],
    },
    {
        'id': 502,
        'name': 'Dewott',
        'type': [PokemonType.Water],
        'attack': 83,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 145,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Dewott', 'Samurott', 36)],
    },
    {
        'id': 503,
        'name': 'Samurott',
        'type': [PokemonType.Water],
        'attack': 108,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
    },
    {
        'id': 504,
        'name': 'Patrat',
        'type': [PokemonType.Normal],
        'attack': 55,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Patrat', 'Watchog', 20)],
    },
    {
        'id': 505,
        'name': 'Watchog',
        'type': [PokemonType.Normal],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 255,
    },
    {
        'id': 506,
        'name': 'Lillipup',
        'type': [PokemonType.Normal],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Lillipup', 'Herdier', 16)],
    },
    {
        'id': 507,
        'name': 'Herdier',
        'type': [PokemonType.Normal],
        'attack': 80,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Herdier', 'Stoutland', 32)],
    },
    {
        'id': 508,
        'name': 'Stoutland',
        'type': [PokemonType.Normal],
        'attack': 110,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'catchRate': 45,
    },
    {
        'id': 509,
        'name': 'Purrloin',
        'type': [PokemonType.Dark],
        'attack': 66,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Purrloin', 'Liepard', 20)],
    },
    {
        'id': 510,
        'name': 'Liepard',
        'type': [PokemonType.Dark],
        'attack': 106,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 156,
        'catchRate': 90,
    },
    {
        'id': 511,
        'name': 'Pansage',
        'type': [PokemonType.Grass],
        'attack': 64,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Pansage', 'Simisage', GameConstants.StoneType.Leaf_stone)],
    },
    {
        'id': 512,
        'name': 'Simisage',
        'type': [PokemonType.Grass],
        'attack': 101,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
    },
    {
        'id': 513,
        'name': 'Pansear',
        'type': [PokemonType.Fire],
        'attack': 64,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Pansear', 'Simisear', GameConstants.StoneType.Fire_stone)],
    },
    {
        'id': 514,
        'name': 'Simisear',
        'type': [PokemonType.Fire],
        'attack': 101,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
    },
    {
        'id': 515,
        'name': 'Panpour',
        'type': [PokemonType.Water],
        'attack': 64,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Panpour', 'Simipour', GameConstants.StoneType.Water_stone)],
    },
    {
        'id': 516,
        'name': 'Simipour',
        'type': [PokemonType.Water],
        'attack': 101,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
    },
    {
        'id': 517,
        'name': 'Munna',
        'type': [PokemonType.Psychic],
        'attack': 76,
        'eggCycles': 10,
        'levelType': 4,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Munna', 'Musharna', GameConstants.StoneType.Moon_stone)],
    },
    {
        'id': 518,
        'name': 'Musharna',
        'type': [PokemonType.Psychic],
        'attack': 116,
        'eggCycles': 10,
        'levelType': 4,
        'exp': 170,
        'catchRate': 75,
    },
    {
        'id': 519,
        'name': 'Pidove',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 55,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Pidove', 'Tranquill', 21)],
    },
    {
        'id': 520,
        'name': 'Tranquill',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 77,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 125,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Tranquill', 'Unfezant', 32)],
    },
    {
        'id': 521,
        'name': 'Unfezant',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 115,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 220,
        'catchRate': 45,
    },
    {
        'id': 522,
        'name': 'Blitzle',
        'type': [PokemonType.Electric],
        'attack': 76,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Blitzle', 'Zebstrika', 27)],
    },
    {
        'id': 523,
        'name': 'Zebstrika',
        'type': [PokemonType.Electric],
        'attack': 116,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
    },
    {
        'id': 524,
        'name': 'Roggenrola',
        'type': [PokemonType.Rock],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Roggenrola', 'Boldore', 25)],
    },
    {
        'id': 525,
        'name': 'Boldore',
        'type': [PokemonType.Rock],
        'attack': 105,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Boldore', 'Gigalith', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 526,
        'name': 'Gigalith',
        'type': [PokemonType.Rock],
        'attack': 135,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 232,
        'catchRate': 45,
    },
    {
        'id': 527,
        'name': 'Woobat',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 72,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Woobat', 'Swoobat', 100)],
    },
    {
        'id': 528,
        'name': 'Swoobat',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 114,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'catchRate': 45,
    },
    {
        'id': 529,
        'name': 'Drilbur',
        'type': [PokemonType.Ground],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Drilbur', 'Excadrill', 31)],
    },
    {
        'id': 530,
        'name': 'Excadrill',
        'type': [PokemonType.Ground, PokemonType.Steel],
        'attack': 135,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'catchRate': 60,
    },
    {
        'id': 531,
        'name': 'Audino',
        'type': [PokemonType.Normal],
        'attack': 103,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 390,
        'catchRate': 255,
    },
    {
        'id': 532,
        'name': 'Timburr',
        'type': [PokemonType.Fighting],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Timburr', 'Gurdurr', 25)],
    },
    {
        'id': 533,
        'name': 'Gurdurr',
        'type': [PokemonType.Fighting],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Gurdurr', 'Conkeldurr', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 534,
        'name': 'Conkeldurr',
        'type': [PokemonType.Fighting],
        'attack': 140,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'catchRate': 45,
    },
    {
        'id': 535,
        'name': 'Tympole',
        'type': [PokemonType.Water],
        'attack': 64,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 59,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Tympole', 'Palpitoad', 25)],
    },
    {
        'id': 536,
        'name': 'Palpitoad',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 75,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Palpitoad', 'Seismitoad', 36)],
    },
    {
        'id': 537,
        'name': 'Seismitoad',
        'type': [PokemonType.Water, PokemonType.Ground],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 229,
        'catchRate': 45,
    },
    {
        'id': 538,
        'name': 'Throh',
        'type': [PokemonType.Fighting],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 45,
    },
    {
        'id': 539,
        'name': 'Sawk',
        'type': [PokemonType.Fighting],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 45,
    },
    {
        'id': 540,
        'name': 'Sewaddle',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Sewaddle', 'Swadloon', 20)],
    },
    {
        'id': 541,
        'name': 'Swadloon',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 133,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Swadloon', 'Leavanny', 100)],
    },
    {
        'id': 542,
        'name': 'Leavanny',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'attack': 103,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'catchRate': 45,
    },
    {
        'id': 543,
        'name': 'Venipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 59,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 52,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Venipede', 'Whirlipede', 22)],
    },
    {
        'id': 544,
        'name': 'Whirlipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 99,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 126,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Whirlipede', 'Scolipede', 30)],
    },
    {
        'id': 545,
        'name': 'Scolipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'attack': 112,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 218,
        'catchRate': 45,
    },
    {
        'id': 546,
        'name': 'Cottonee',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'attack': 66,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Cottonee', 'Whimsicott', GameConstants.StoneType.Sun_stone)],
    },
    {
        'id': 547,
        'name': 'Whimsicott',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'attack': 116,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    },
    {
        'id': 548,
        'name': 'Petilil',
        'type': [PokemonType.Grass],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Petilil', 'Lilligant', GameConstants.StoneType.Sun_stone)],
    },
    {
        'id': 549,
        'name': 'Lilligant',
        'type': [PokemonType.Grass],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    },
    {
        'id': 550,
        'name': 'Basculin\nRed-Striped Form',
        'type': [PokemonType.Water],
        'attack': 98,
        'eggCycles': 40,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 25,
    },
    {
        'id': 551,
        'name': 'Sandile',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'attack': 72,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Sandile', 'Krokorok', 29)],
    },
    {
        'id': 552,
        'name': 'Krokorok',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'attack': 82,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 123,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Krokorok', 'Krookodile', 40)],
    },
    {
        'id': 553,
        'name': 'Krookodile',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'attack': 117,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
    },
    {
        'id': 554,
        'name': 'Darumaka',
        'type': [PokemonType.Fire],
        'attack': 90,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Darumaka', 'Darmanitan', 35)],
    },
    {
        'id': 555,
        'name': 'Darmanitan\nStandard Mode',
        'type': [PokemonType.Fire],
        'attack': 140,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 189,
        'catchRate': 60,
    },
    {
        'id': 556,
        'name': 'Maractus',
        'type': [PokemonType.Grass],
        'attack': 106,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 255,
    },
    {
        'id': 557,
        'name': 'Dwebble',
        'type': [PokemonType.Bug, PokemonType.Rock],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Dwebble', 'Crustle', 34)],
    },
    {
        'id': 558,
        'name': 'Crustle',
        'type': [PokemonType.Bug, PokemonType.Rock],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 75,
    },
    {
        'id': 559,
        'name': 'Scraggy',
        'type': [PokemonType.Dark, PokemonType.Fighting],
        'attack': 75,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Scraggy', 'Scrafty', 39)],
    },
    {
        'id': 560,
        'name': 'Scrafty',
        'type': [PokemonType.Dark, PokemonType.Fighting],
        'attack': 115,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 171,
        'catchRate': 90,
    },
    {
        'id': 561,
        'name': 'Sigilyph',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'attack': 103,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 562,
        'name': 'Yamask',
        'type': [PokemonType.Ghost],
        'attack': 85,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Yamask', 'Cofagrigus', 34)],
    },
    {
        'id': 563,
        'name': 'Cofagrigus',
        'type': [PokemonType.Ghost],
        'attack': 145,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
    },
    {
        'id': 564,
        'name': 'Tirtouga',
        'type': [PokemonType.Water, PokemonType.Rock],
        'attack': 103,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tirtouga', 'Carracosta', 37)],
    },
    {
        'id': 565,
        'name': 'Carracosta',
        'type': [PokemonType.Water, PokemonType.Rock],
        'attack': 133,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 45,
    },
    {
        'id': 566,
        'name': 'Archen',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'attack': 112,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Archen', 'Archeops', 37)],
    },
    {
        'id': 567,
        'name': 'Archeops',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'attack': 140,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 568,
        'name': 'Trubbish',
        'type': [PokemonType.Poison],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Trubbish', 'Garbodor', 36)],
    },
    {
        'id': 569,
        'name': 'Garbodor',
        'type': [PokemonType.Poison],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 60,
    },
    {
        'id': 570,
        'name': 'Zorua',
        'type': [PokemonType.Dark],
        'attack': 80,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 66,
        'catchRate': 75,
        'evolutions': [new LevelEvolution('Zorua', 'Zoroark', 30)],
    },
    {
        'id': 571,
        'name': 'Zoroark',
        'type': [PokemonType.Dark],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
    },
    {
        'id': 572,
        'name': 'Minccino',
        'type': [PokemonType.Normal],
        'attack': 75,
        'eggCycles': 15,
        'levelType': 4,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Minccino', 'Cinccino', GameConstants.StoneType.None)],
    },
    {
        'id': 573,
        'name': 'Cinccino',
        'type': [PokemonType.Normal],
        'attack': 115,
        'eggCycles': 15,
        'levelType': 4,
        'exp': 165,
        'catchRate': 60,
    },
    {
        'id': 574,
        'name': 'Gothita',
        'type': [PokemonType.Psychic],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Gothita', 'Gothorita', 32)],
    },
    {
        'id': 575,
        'name': 'Gothorita',
        'type': [PokemonType.Psychic],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'catchRate': 100,
        'evolutions': [new LevelEvolution('Gothorita', 'Gothitelle', 41)],
    },
    {
        'id': 576,
        'name': 'Gothitelle',
        'type': [PokemonType.Psychic],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 50,
    },
    {
        'id': 577,
        'name': 'Solosis',
        'type': [PokemonType.Psychic],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Solosis', 'Duosion', 32)],
    },
    {
        'id': 578,
        'name': 'Duosion',
        'type': [PokemonType.Psychic],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 100,
        'evolutions': [new LevelEvolution('Duosion', 'Reuniclus', 41)],
    },
    {
        'id': 579,
        'name': 'Reuniclus',
        'type': [PokemonType.Psychic],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 50,
    },
    {
        'id': 580,
        'name': 'Ducklett',
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Ducklett', 'Swanna', 35)],
    },
    {
        'id': 581,
        'name': 'Swanna',
        'type': [PokemonType.Water, PokemonType.Flying],
        'attack': 98,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 45,
    },
    {
        'id': 582,
        'name': 'Vanillite',
        'type': [PokemonType.Ice],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Vanillite', 'Vanillish', 35)],
    },
    {
        'id': 583,
        'name': 'Vanillish',
        'type': [PokemonType.Ice],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 138,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vanillish', 'Vanilluxe', 47)],
    },
    {
        'id': 584,
        'name': 'Vanilluxe',
        'type': [PokemonType.Ice],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 241,
        'catchRate': 45,
    },
    {
        'id': 585,
        'name': 'Deerling',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'attack': 75,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Deerling', 'Sawsbuck', 34)],
    },
    {
        'id': 586,
        'name': 'Sawsbuck',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
    },
    {
        'id': 587,
        'name': 'Emolga',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'attack': 103,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 150,
        'catchRate': 200,
    },
    {
        'id': 588,
        'name': 'Karrablast',
        'type': [PokemonType.Bug],
        'attack': 75,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Karrablast', 'Escavalier', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 589,
        'name': 'Escavalier',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'attack': 135,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
    },
    {
        'id': 590,
        'name': 'Foongus',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 69,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Foongus', 'Amoonguss', 39)],
    },
    {
        'id': 591,
        'name': 'Amoonguss',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'attack': 114,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 75,
    },
    {
        'id': 592,
        'name': 'Frillish',
        'type': [PokemonType.Water, PokemonType.Ghost],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Frillish', 'Jellicent', 40)],
    },
    {
        'id': 593,
        'name': 'Jellicent',
        'type': [PokemonType.Water, PokemonType.Ghost],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
    },
    {
        'id': 594,
        'name': 'Alomomola',
        'type': [PokemonType.Water],
        'attack': 165,
        'eggCycles': 40,
        'levelType': 4,
        'exp': 165,
        'catchRate': 75,
    },
    {
        'id': 595,
        'name': 'Joltik',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Joltik', 'Galvantula', 36)],
    },
    {
        'id': 596,
        'name': 'Galvantula',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'attack': 108,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 75,
    },
    {
        'id': 597,
        'name': 'Ferroseed',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'attack': 91,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Ferroseed', 'Ferrothorn', 40)],
    },
    {
        'id': 598,
        'name': 'Ferrothorn',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'attack': 131,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 171,
        'catchRate': 90,
    },
    {
        'id': 599,
        'name': 'Klink',
        'type': [PokemonType.Steel],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'catchRate': 130,
        'evolutions': [new LevelEvolution('Klink', 'Klang', 38)],
    },
    {
        'id': 600,
        'name': 'Klang',
        'type': [PokemonType.Steel],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 60,
        'evolutions': [new LevelEvolution('Klang', 'Klinklang', 49)],
    },
    {
        'id': 601,
        'name': 'Klinklang',
        'type': [PokemonType.Steel],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 30,
    },
    {
        'id': 602,
        'name': 'Tynamo',
        'type': [PokemonType.Electric],
        'attack': 60,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Tynamo', 'Eelektrik', 39)],
    },
    {
        'id': 603,
        'name': 'Eelektrik',
        'type': [PokemonType.Electric],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 142,
        'catchRate': 60,
        'evolutions': [new StoneEvolution('Eelektrik', 'Eelektross', GameConstants.StoneType.Thunder_stone)],
    },
    {
        'id': 604,
        'name': 'Eelektross',
        'type': [PokemonType.Electric],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 232,
        'catchRate': 30,
    },
    {
        'id': 605,
        'name': 'Elgyem',
        'type': [PokemonType.Psychic],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Elgyem', 'Beheeyem', 42)],
    },
    {
        'id': 606,
        'name': 'Beheeyem',
        'type': [PokemonType.Psychic],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 90,
    },
    {
        'id': 607,
        'name': 'Litwick',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Litwick', 'Lampent', 41)],
    },
    {
        'id': 608,
        'name': 'Lampent',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Lampent', 'Chandelure', GameConstants.StoneType.None)],
    },
    {
        'id': 609,
        'name': 'Chandelure',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'attack': 145,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
    },
    {
        'id': 610,
        'name': 'Axew',
        'type': [PokemonType.Dragon],
        'attack': 87,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 64,
        'catchRate': 75,
        'evolutions': [new LevelEvolution('Axew', 'Fraxure', 38)],
    },
    {
        'id': 611,
        'name': 'Fraxure',
        'type': [PokemonType.Dragon],
        'attack': 117,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 144,
        'catchRate': 60,
        'evolutions': [new LevelEvolution('Fraxure', 'Haxorus', 48)],
    },
    {
        'id': 612,
        'name': 'Haxorus',
        'type': [PokemonType.Dragon],
        'attack': 147,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 243,
        'catchRate': 45,
    },
    {
        'id': 613,
        'name': 'Cubchoo',
        'type': [PokemonType.Ice],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Cubchoo', 'Beartic', 37)],
    },
    {
        'id': 614,
        'name': 'Beartic',
        'type': [PokemonType.Ice],
        'attack': 130,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'catchRate': 60,
    },
    {
        'id': 615,
        'name': 'Cryogonal',
        'type': [PokemonType.Ice],
        'attack': 135,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 25,
    },
    {
        'id': 616,
        'name': 'Shelmet',
        'type': [PokemonType.Bug],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Shelmet', 'Accelgor', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 617,
        'name': 'Accelgor',
        'type': [PokemonType.Bug],
        'attack': 145,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
    },
    {
        'id': 618,
        'name': 'Stunfisk',
        'type': [PokemonType.Ground, PokemonType.Electric],
        'attack': 109,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 75,
    },
    {
        'id': 619,
        'name': 'Mienfoo',
        'type': [PokemonType.Fighting],
        'attack': 85,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 70,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Mienfoo', 'Mienshao', 50)],
    },
    {
        'id': 620,
        'name': 'Mienshao',
        'type': [PokemonType.Fighting],
        'attack': 125,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
    },
    {
        'id': 621,
        'name': 'Druddigon',
        'type': [PokemonType.Dragon],
        'attack': 120,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 45,
    },
    {
        'id': 622,
        'name': 'Golett',
        'type': [PokemonType.Ground, PokemonType.Ghost],
        'attack': 74,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Golett', 'Golurk', 43)],
    },
    {
        'id': 623,
        'name': 'Golurk',
        'type': [PokemonType.Ground, PokemonType.Ghost],
        'attack': 124,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
    },
    {
        'id': 624,
        'name': 'Pawniard',
        'type': [PokemonType.Dark, PokemonType.Steel],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Pawniard', 'Bisharp', 52)],
    },
    {
        'id': 625,
        'name': 'Bisharp',
        'type': [PokemonType.Dark, PokemonType.Steel],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 626,
        'name': 'Bouffalant',
        'type': [PokemonType.Normal],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 627,
        'name': 'Rufflet',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 83,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 70,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Rufflet', 'Braviary', 54)],
    },
    {
        'id': 628,
        'name': 'Braviary',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 123,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 179,
        'catchRate': 60,
    },
    {
        'id': 629,
        'name': 'Vullaby',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'attack': 75,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 74,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Vullaby', 'Mandibuzz', 54)],
    },
    {
        'id': 630,
        'name': 'Mandibuzz',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 179,
        'catchRate': 60,
    },
    {
        'id': 631,
        'name': 'Heatmor',
        'type': [PokemonType.Fire],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
    },
    {
        'id': 632,
        'name': 'Durant',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'attack': 112,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
    },
    {
        'id': 633,
        'name': 'Deino',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'attack': 65,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Deino', 'Zweilous', 50)],
    },
    {
        'id': 634,
        'name': 'Zweilous',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'attack': 85,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Zweilous', 'Hydreigon', 64)],
    },
    {
        'id': 635,
        'name': 'Hydreigon',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'attack': 125,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
    },
    {
        'id': 636,
        'name': 'Larvesta',
        'type': [PokemonType.Bug, PokemonType.Fire],
        'attack': 85,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Larvesta', 'Volcarona', 59)],
    },
    {
        'id': 637,
        'name': 'Volcarona',
        'type': [PokemonType.Bug, PokemonType.Fire],
        'attack': 135,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 248,
        'catchRate': 15,
    },
    {
        'id': 638,
        'name': 'Cobalion',
        'type': [PokemonType.Steel, PokemonType.Fighting],
        'attack': 129,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 639,
        'name': 'Terrakion',
        'type': [PokemonType.Rock, PokemonType.Fighting],
        'attack': 129,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 640,
        'name': 'Virizion',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'attack': 129,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 641,
        'name': 'Tornadus\nIncarnate Forme',
        'type': [PokemonType.Flying],
        'attack': 125,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 642,
        'name': 'Thundurus\nIncarnate Forme',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'attack': 125,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 643,
        'name': 'Reshiram',
        'type': [PokemonType.Dragon, PokemonType.Fire],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
    {
        'id': 644,
        'name': 'Zekrom',
        'type': [PokemonType.Dragon, PokemonType.Electric],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
    {
        'id': 645,
        'name': 'Landorus\nIncarnate Forme',
        'type': [PokemonType.Ground, PokemonType.Flying],
        'attack': 125,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 646,
        'name': 'Kyurem',
        'type': [PokemonType.Dragon, PokemonType.Ice],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 315,
        'catchRate': 3,
    },
    {
        'id': 647,
        'name': 'Keldeo\nOrdinary Forme',
        'type': [PokemonType.Water, PokemonType.Fighting],
        'attack': 129,
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
    },
    {
        'id': 648,
        'name': 'Meloetta\nAria Forme',
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'attack': 128,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 649,
        'name': 'Genesect',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'attack': 120,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 650,
        'name': 'Chespin',
        'type': [PokemonType.Grass],
        'attack': 65,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Chespin', 'Quilladin', 16)],
    },
    {
        'id': 651,
        'name': 'Quilladin',
        'type': [PokemonType.Grass],
        'attack': 95,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Quilladin', 'Chesnaught', 36)],
    },
    {
        'id': 652,
        'name': 'Chesnaught',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'attack': 122,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 653,
        'name': 'Fennekin',
        'type': [PokemonType.Fire],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Fennekin', 'Braixen', 16)],
    },
    {
        'id': 654,
        'name': 'Braixen',
        'type': [PokemonType.Fire],
        'attack': 90,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 143,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Braixen', 'Delphox', 36)],
    },
    {
        'id': 655,
        'name': 'Delphox',
        'type': [PokemonType.Fire, PokemonType.Psychic],
        'attack': 114,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'catchRate': 45,
    },
    {
        'id': 656,
        'name': 'Froakie',
        'type': [PokemonType.Water],
        'attack': 71,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Froakie', 'Frogadier', 16)],
    },
    {
        'id': 657,
        'name': 'Frogadier',
        'type': [PokemonType.Water],
        'attack': 97,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Frogadier', 'Greninja', 36)],
    },
    {
        'id': 658,
        'name': 'Greninja',
        'type': [PokemonType.Water, PokemonType.Dark],
        'attack': 122,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 659,
        'name': 'Bunnelby',
        'type': [PokemonType.Normal],
        'attack': 57,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 47,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bunnelby', 'Diggersby', 20)],
    },
    {
        'id': 660,
        'name': 'Diggersby',
        'type': [PokemonType.Normal, PokemonType.Ground],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 127,
    },
    {
        'id': 661,
        'name': 'Fletchling',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 62,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Fletchling', 'Fletchinder', 17)],
    },
    {
        'id': 662,
        'name': 'Fletchinder',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 84,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Fletchinder', 'Talonflame', 35)],
    },
    {
        'id': 663,
        'name': 'Talonflame',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 126,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 175,
        'catchRate': 45,
    },
    {
        'id': 664,
        'name': 'Scatterbug',
        'type': [PokemonType.Bug],
        'attack': 40,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 40,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Scatterbug', 'Spewpa', 9)],
    },
    {
        'id': 665,
        'name': 'Spewpa',
        'type': [PokemonType.Bug],
        'attack': 60,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 75,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Spewpa', 'Vivillon', 12)],
    },
    {
        'id': 666,
        'name': 'Vivillon',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 185,
        'catchRate': 45,
    },
    {
        'id': 667,
        'name': 'Litleo',
        'type': [PokemonType.Fire, PokemonType.Normal],
        'attack': 73,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 74,
        'catchRate': 220,
        'evolutions': [new LevelEvolution('Litleo', 'Pyroar', 35)],
    },
    {
        'id': 668,
        'name': 'Pyroar',
        'type': [PokemonType.Fire, PokemonType.Normal],
        'attack': 109,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'catchRate': 65,
    },
    {
        'id': 669,
        'name': 'Flabébé',
        'type': [PokemonType.Fairy],
        'attack': 79,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Flabébé', 'Floette', 19)],
    },
    {
        'id': 670,
        'name': 'Floette',
        'type': [PokemonType.Fairy],
        'attack': 98,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Floette', 'Florges', GameConstants.StoneType.None)],
    },
    {
        'id': 671,
        'name': 'Florges',
        'type': [PokemonType.Fairy],
        'attack': 154,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 248,
        'catchRate': 45,
    },
    {
        'id': 672,
        'name': 'Skiddo',
        'type': [PokemonType.Grass],
        'attack': 66,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Skiddo', 'Gogoat', 32)],
    },
    {
        'id': 673,
        'name': 'Gogoat',
        'type': [PokemonType.Grass],
        'attack': 123,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 186,
        'catchRate': 45,
    },
    {
        'id': 674,
        'name': 'Pancham',
        'type': [PokemonType.Fighting],
        'attack': 82,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 220,
        'evolutions': [new LevelEvolution('Pancham', 'Pangoro', 32)],
    },
    {
        'id': 675,
        'name': 'Pangoro',
        'type': [PokemonType.Fighting, PokemonType.Dark],
        'attack': 124,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 65,
    },
    {
        'id': 676,
        'name': 'Furfrou',
        'type': [PokemonType.Normal],
        'attack': 102,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 160,
    },
    {
        'id': 677,
        'name': 'Espurr',
        'type': [PokemonType.Psychic],
        'attack': 68,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Espurr', 'Meowstic', 25)],
    },
    {
        'id': 678,
        'name': 'Meowstic\nMale',
        'type': [PokemonType.Psychic],
        'attack': 104,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 75,
    },
    {
        'id': 679,
        'name': 'Honedge',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Honedge', 'Doublade', 35)],
    },
    {
        'id': 680,
        'name': 'Doublade',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'attack': 150,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 157,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Doublade', 'Aegislash', GameConstants.StoneType.None)],
    },
    {
        'id': 681,
        'name': 'Aegislash\nBlade Forme',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'attack': 150,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 234,
        'catchRate': 45,
    },
    {
        'id': 682,
        'name': 'Spritzee',
        'type': [PokemonType.Fairy],
        'attack': 78,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Spritzee', 'Aromatisse', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 683,
        'name': 'Aromatisse',
        'type': [PokemonType.Fairy],
        'attack': 101,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 140,
    },
    {
        'id': 684,
        'name': 'Swirlix',
        'type': [PokemonType.Fairy],
        'attack': 66,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Swirlix', 'Slurpuff', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 685,
        'name': 'Slurpuff',
        'type': [PokemonType.Fairy],
        'attack': 86,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 140,
    },
    {
        'id': 686,
        'name': 'Inkay',
        'type': [PokemonType.Dark, PokemonType.Psychic],
        'attack': 54,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Inkay', 'Malamar', 30)],
    },
    {
        'id': 687,
        'name': 'Malamar',
        'type': [PokemonType.Dark, PokemonType.Psychic],
        'attack': 92,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 80,
    },
    {
        'id': 688,
        'name': 'Binacle',
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 67,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Binacle', 'Barbaracle', 39)],
    },
    {
        'id': 689,
        'name': 'Barbaracle',
        'type': [PokemonType.Rock, PokemonType.Water],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 45,
    },
    {
        'id': 690,
        'name': 'Skrelp',
        'type': [PokemonType.Poison, PokemonType.Water],
        'attack': 60,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Skrelp', 'Dragalge', 48)],
    },
    {
        'id': 691,
        'name': 'Dragalge',
        'type': [PokemonType.Poison, PokemonType.Dragon],
        'attack': 123,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 55,
    },
    {
        'id': 692,
        'name': 'Clauncher',
        'type': [PokemonType.Water],
        'attack': 63,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Clauncher', 'Clawitzer', 37)],
    },
    {
        'id': 693,
        'name': 'Clawitzer',
        'type': [PokemonType.Water],
        'attack': 120,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 100,
        'catchRate': 55,
    },
    {
        'id': 694,
        'name': 'Helioptile',
        'type': [PokemonType.Electric, PokemonType.Normal],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Helioptile', 'Heliolisk', GameConstants.StoneType.Sun_stone)],
    },
    {
        'id': 695,
        'name': 'Heliolisk',
        'type': [PokemonType.Electric, PokemonType.Normal],
        'attack': 109,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    },
    {
        'id': 696,
        'name': 'Tyrunt',
        'type': [PokemonType.Rock, PokemonType.Dragon],
        'attack': 89,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tyrunt', 'Tyrantrum', 39)],
    },
    {
        'id': 697,
        'name': 'Tyrantrum',
        'type': [PokemonType.Rock, PokemonType.Dragon],
        'attack': 121,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
    },
    {
        'id': 698,
        'name': 'Amaura',
        'type': [PokemonType.Rock, PokemonType.Ice],
        'attack': 77,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Amaura', 'Aurorus', 39)],
    },
    {
        'id': 699,
        'name': 'Aurorus',
        'type': [PokemonType.Rock, PokemonType.Ice],
        'attack': 123,
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 104,
        'catchRate': 45,
    },
    {
        'id': 700,
        'name': 'Sylveon',
        'type': [PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
    },
    {
        'id': 701,
        'name': 'Hawlucha',
        'type': [PokemonType.Fighting, PokemonType.Flying],
        'attack': 118,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 100,
    },
    {
        'id': 702,
        'name': 'Dedenne',
        'type': [PokemonType.Electric, PokemonType.Fairy],
        'attack': 101,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'catchRate': 180,
    },
    {
        'id': 703,
        'name': 'Carbink',
        'type': [PokemonType.Rock, PokemonType.Fairy],
        'attack': 150,
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 100,
        'catchRate': 60,
    },
    {
        'id': 704,
        'name': 'Goomy',
        'type': [PokemonType.Dragon],
        'attack': 75,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Goomy', 'Sliggoo', 40)],
    },
    {
        'id': 705,
        'name': 'Sliggoo',
        'type': [PokemonType.Dragon],
        'attack': 113,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 158,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Sliggoo', 'Goodra', 50)],
    },
    {
        'id': 706,
        'name': 'Goodra',
        'type': [PokemonType.Dragon],
        'attack': 150,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
    },
    {
        'id': 707,
        'name': 'Klefki',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'attack': 91,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 165,
        'catchRate': 75,
    },
    {
        'id': 708,
        'name': 'Phantump',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Phantump', 'Trevenant', GameConstants.StoneType.Trade_stone)],
    },
    {
        'id': 709,
        'name': 'Trevenant',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 60,
    },
    {
        'id': 710,
        'name': 'Pumpkaboo\nAverage Size',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'attack': 70,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 120,
    },
    {
        'id': 711,
        'name': 'Gourgeist\nAverage Size',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'attack': 122,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 60,
    },
    {
        'id': 712,
        'name': 'Bergmite',
        'type': [PokemonType.Ice],
        'attack': 85,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Bergmite', 'Avalugg', 37)],
    },
    {
        'id': 713,
        'name': 'Avalugg',
        'type': [PokemonType.Ice],
        'attack': 184,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 55,
    },
    {
        'id': 714,
        'name': 'Noibat',
        'type': [PokemonType.Flying, PokemonType.Dragon],
        'attack': 55,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 49,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Noibat', 'Noivern', 48)],
    },
    {
        'id': 715,
        'name': 'Noivern',
        'type': [PokemonType.Flying, PokemonType.Dragon],
        'attack': 123,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 187,
        'catchRate': 45,
    },
    {
        'id': 716,
        'name': 'Xerneas',
        'type': [PokemonType.Fairy],
        'attack': 131,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
    },
    {
        'id': 717,
        'name': 'Yveltal',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'attack': 131,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
    },
    {
        'id': 718,
        'name': 'Zygarde\n50% Forme',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'attack': 121,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 719,
        'name': 'Diancie',
        'type': [PokemonType.Rock, PokemonType.Fairy],
        'attack': 150,
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 720,
        'name': 'Hoopa\nHoopa Confined',
        'type': [PokemonType.Psychic, PokemonType.Ghost],
        'attack': 150,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 721,
        'name': 'Volcanion',
        'type': [PokemonType.Fire, PokemonType.Water],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 722,
        'name': 'Rowlet',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 68,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Rowlet', 'Dartrix', 17)],
    },
    {
        'id': 723,
        'name': 'Dartrix',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'attack': 78,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Dartrix', 'Decidueye', 34)],
    },
    {
        'id': 724,
        'name': 'Decidueye',
        'type': [PokemonType.Grass, PokemonType.Ghost],
        'attack': 107,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 725,
        'name': 'Litten',
        'type': [PokemonType.Fire],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Litten', 'Torracat', 17)],
    },
    {
        'id': 726,
        'name': 'Torracat',
        'type': [PokemonType.Fire],
        'attack': 90,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Torracat', 'Incineroar', 34)],
    },
    {
        'id': 727,
        'name': 'Incineroar',
        'type': [PokemonType.Fire, PokemonType.Dark],
        'attack': 115,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 728,
        'name': 'Popplio',
        'type': [PokemonType.Water],
        'attack': 66,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Popplio', 'Brionne', 17)],
    },
    {
        'id': 729,
        'name': 'Brionne',
        'type': [PokemonType.Water],
        'attack': 91,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Brionne', 'Primarina', 34)],
    },
    {
        'id': 730,
        'name': 'Primarina',
        'type': [PokemonType.Water, PokemonType.Fairy],
        'attack': 126,
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
    },
    {
        'id': 731,
        'name': 'Pikipek',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 75,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Pikipek', 'Trumbeak', 14)],
    },
    {
        'id': 732,
        'name': 'Trumbeak',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 85,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 124,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Trumbeak', 'Toucannon', 28)],
    },
    {
        'id': 733,
        'name': 'Toucannon',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'attack': 120,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 218,
        'catchRate': 45,
    },
    {
        'id': 734,
        'name': 'Yungoos',
        'type': [PokemonType.Normal],
        'attack': 70,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Yungoos', 'Gumshoos', 20)],
    },
    {
        'id': 735,
        'name': 'Gumshoos',
        'type': [PokemonType.Normal],
        'attack': 110,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 146,
        'catchRate': 127,
    },
    {
        'id': 736,
        'name': 'Grubbin',
        'type': [PokemonType.Bug],
        'attack': 62,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Grubbin', 'Charjabug', 20)],
    },
    {
        'id': 737,
        'name': 'Charjabug',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'attack': 95,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 140,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Charjabug', 'Vikavolt', GameConstants.StoneType.None)],
    },
    {
        'id': 738,
        'name': 'Vikavolt',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'attack': 145,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 225,
        'catchRate': 45,
    },
    {
        'id': 739,
        'name': 'Crabrawler',
        'type': [PokemonType.Fighting],
        'attack': 82,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 225,
        'evolutions': [new StoneEvolution('Crabrawler', 'Crabominable', GameConstants.StoneType.None)],
    },
    {
        'id': 740,
        'name': 'Crabominable',
        'type': [PokemonType.Fighting, PokemonType.Ice],
        'attack': 132,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 60,
    },
    {
        'id': 741,
        'name': 'Oricorio\nBaile Style',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'attack': 98,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 45,
    },
    {
        'id': 742,
        'name': 'Cutiefly',
        'type': [PokemonType.Bug, PokemonType.Fairy],
        'attack': 84,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Cutiefly', 'Ribombee', 25)],
    },
    {
        'id': 743,
        'name': 'Ribombee',
        'type': [PokemonType.Bug, PokemonType.Fairy],
        'attack': 124,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 75,
    },
    {
        'id': 744,
        'name': 'Rockruff',
        'type': [PokemonType.Rock],
        'attack': 65,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Rockruff', 'Lycanroc', 25)],
    },
    {
        'id': 745,
        'name': 'Lycanroc\nMidday Form',
        'type': [PokemonType.Rock],
        'attack': 115,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 90,
    },
    {
        'id': 746,
        'name': 'Wishiwashi\nSolo Form',
        'type': [PokemonType.Water],
        'attack': 45,
        'eggCycles': 15,
        'levelType': 4,
        'exp': 61,
        'catchRate': 60,
    },
    {
        'id': 747,
        'name': 'Mareanie',
        'type': [PokemonType.Poison, PokemonType.Water],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Mareanie', 'Toxapex', 38)],
    },
    {
        'id': 748,
        'name': 'Toxapex',
        'type': [PokemonType.Poison, PokemonType.Water],
        'attack': 152,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
    },
    {
        'id': 749,
        'name': 'Mudbray',
        'type': [PokemonType.Ground],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Mudbray', 'Mudsdale', 30)],
    },
    {
        'id': 750,
        'name': 'Mudsdale',
        'type': [PokemonType.Ground],
        'attack': 125,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 60,
    },
    {
        'id': 751,
        'name': 'Dewpider',
        'type': [PokemonType.Water, PokemonType.Bug],
        'attack': 72,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Dewpider', 'Araquanid', 22)],
    },
    {
        'id': 752,
        'name': 'Araquanid',
        'type': [PokemonType.Water, PokemonType.Bug],
        'attack': 132,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'catchRate': 100,
    },
    {
        'id': 753,
        'name': 'Fomantis',
        'type': [PokemonType.Grass],
        'attack': 55,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Fomantis', 'Lurantis', 34)],
    },
    {
        'id': 754,
        'name': 'Lurantis',
        'type': [PokemonType.Grass],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
    },
    {
        'id': 755,
        'name': 'Morelull',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'attack': 75,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 57,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Morelull', 'Shiinotic', 24)],
    },
    {
        'id': 756,
        'name': 'Shiinotic',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'attack': 100,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 75,
    },
    {
        'id': 757,
        'name': 'Salandit',
        'type': [PokemonType.Poison, PokemonType.Fire],
        'attack': 77,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Salandit', 'Salazzle', 33)],
    },
    {
        'id': 758,
        'name': 'Salazzle',
        'type': [PokemonType.Poison, PokemonType.Fire],
        'attack': 117,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 45,
    },
    {
        'id': 759,
        'name': 'Stufful',
        'type': [PokemonType.Normal, PokemonType.Fighting],
        'attack': 75,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Stufful', 'Bewear', 27)],
    },
    {
        'id': 760,
        'name': 'Bewear',
        'type': [PokemonType.Normal, PokemonType.Fighting],
        'attack': 125,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 70,
    },
    {
        'id': 761,
        'name': 'Bounsweet',
        'type': [PokemonType.Grass],
        'attack': 42,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 42,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Bounsweet', 'Steenee', 18)],
    },
    {
        'id': 762,
        'name': 'Steenee',
        'type': [PokemonType.Grass],
        'attack': 62,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 102,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Steenee', 'Tsareena', GameConstants.StoneType.None)],
    },
    {
        'id': 763,
        'name': 'Tsareena',
        'type': [PokemonType.Grass],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'catchRate': 45,
    },
    {
        'id': 764,
        'name': 'Comfey',
        'type': [PokemonType.Fairy],
        'attack': 110,
        'eggCycles': 20,
        'levelType': 4,
        'exp': 170,
        'catchRate': 60,
    },
    {
        'id': 765,
        'name': 'Oranguru',
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'attack': 110,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 766,
        'name': 'Passimian',
        'type': [PokemonType.Fighting],
        'attack': 120,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 767,
        'name': 'Wimpod',
        'type': [PokemonType.Bug, PokemonType.Water],
        'attack': 80,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 46,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Wimpod', 'Golisopod', 30)],
    },
    {
        'id': 768,
        'name': 'Golisopod',
        'type': [PokemonType.Bug, PokemonType.Water],
        'attack': 140,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 186,
        'catchRate': 45,
    },
    {
        'id': 769,
        'name': 'Sandygast',
        'type': [PokemonType.Ghost, PokemonType.Ground],
        'attack': 80,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Sandygast', 'Palossand', 42)],
    },
    {
        'id': 770,
        'name': 'Palossand',
        'type': [PokemonType.Ghost, PokemonType.Ground],
        'attack': 110,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
    },
    {
        'id': 771,
        'name': 'Pyukumuku',
        'type': [PokemonType.Water],
        'attack': 130,
        'eggCycles': 15,
        'levelType': 4,
        'exp': 144,
        'catchRate': 60,
    },
    {
        'id': 772,
        'name': 'Type: Null',
        'type': [PokemonType.Normal],
        'attack': 95,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 107,
        'catchRate': 3,
        'evolutions': [new LevelEvolution('Type: Null', 'Silvally', 100)],
    },
    {
        'id': 773,
        'name': 'Silvally',
        'type': [PokemonType.Normal],
        'attack': 95,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 774,
        'name': 'Minior\nMeteor Form',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'attack': 100,
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 30,
    },
    {
        'id': 775,
        'name': 'Komala',
        'type': [PokemonType.Normal],
        'attack': 115,
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 168,
        'catchRate': 45,
    },
    {
        'id': 776,
        'name': 'Turtonator',
        'type': [PokemonType.Fire, PokemonType.Dragon],
        'attack': 135,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 70,
    },
    {
        'id': 777,
        'name': 'Togedemaru',
        'type': [PokemonType.Electric, PokemonType.Steel],
        'attack': 98,
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 152,
        'catchRate': 180,
    },
    {
        'id': 778,
        'name': 'Mimikyu',
        'type': [PokemonType.Ghost, PokemonType.Fairy],
        'attack': 105,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 45,
    },
    {
        'id': 779,
        'name': 'Bruxish',
        'type': [PokemonType.Water, PokemonType.Psychic],
        'attack': 105,
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 80,
    },
    {
        'id': 780,
        'name': 'Drampa',
        'type': [PokemonType.Normal, PokemonType.Dragon],
        'attack': 135,
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 70,
    },
    {
        'id': 781,
        'name': 'Dhelmise',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'attack': 131,
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 181,
        'catchRate': 25,
    },
    {
        'id': 782,
        'name': 'Jangmo-o',
        'type': [PokemonType.Dragon],
        'attack': 65,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Jangmo-o', 'Hakamo-o', 35)],
    },
    {
        'id': 783,
        'name': 'Hakamo-o',
        'type': [PokemonType.Dragon, PokemonType.Fighting],
        'attack': 90,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Hakamo-o', 'Kommo-o', 45)],
    },
    {
        'id': 784,
        'name': 'Kommo-o',
        'type': [PokemonType.Dragon, PokemonType.Fighting],
        'attack': 125,
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
    },
    {
        'id': 785,
        'name': 'Tapu Koko',
        'type': [PokemonType.Electric, PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 786,
        'name': 'Tapu Lele',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 787,
        'name': 'Tapu Bulu',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 788,
        'name': 'Tapu Fini',
        'type': [PokemonType.Water, PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 789,
        'name': 'Cosmog',
        'type': [PokemonType.Psychic],
        'attack': 43,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 40,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cosmog', 'Cosmoem', 43)],
    },
    {
        'id': 790,
        'name': 'Cosmoem',
        'type': [PokemonType.Psychic],
        'attack': 131,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cosmoem', 'Solgaleo', 53)],
    },
    {
        'id': 791,
        'name': 'Solgaleo',
        'type': [PokemonType.Psychic, PokemonType.Steel],
        'attack': 137,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 792,
        'name': 'Lunala',
        'type': [PokemonType.Psychic, PokemonType.Ghost],
        'attack': 137,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 793,
        'name': 'Nihilego',
        'type': [PokemonType.Rock, PokemonType.Poison],
        'attack': 131,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 794,
        'name': 'Buzzwole',
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'attack': 139,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 795,
        'name': 'Pheromosa',
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'attack': 151,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 796,
        'name': 'Xurkitree',
        'type': [PokemonType.Electric],
        'attack': 173,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 797,
        'name': 'Celesteela',
        'type': [PokemonType.Steel, PokemonType.Flying],
        'attack': 107,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 798,
        'name': 'Kartana',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'attack': 181,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 799,
        'name': 'Guzzlord',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'attack': 223,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
    },
    {
        'id': 800,
        'name': 'Necrozma',
        'type': [PokemonType.Psychic],
        'attack': 127,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 255,
    },
    {
        'id': 801,
        'name': 'Magearna',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'attack': 130,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 802,
        'name': 'Marshadow',
        'type': [PokemonType.Fighting, PokemonType.Ghost],
        'attack': 125,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
    },
    {
        'id': 803,
        'name': 'Poipole',
        'type': [PokemonType.Poison],
        'attack': 73,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 189,
        'catchRate': 45,
        'evolutions': [new StoneEvolution('Poipole', 'Naganadel', GameConstants.StoneType.None)],
    },
    {
        'id': 804,
        'name': 'Naganadel',
        'type': [PokemonType.Poison, PokemonType.Dragon],
        'attack': 127,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 243,
        'catchRate': 45,
    },
    {
        'id': 805,
        'name': 'Stakataka',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'attack': 211,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 257,
        'catchRate': 30,
    },
    {
        'id': 806,
        'name': 'Blacephalon',
        'type': [PokemonType.Fire, PokemonType.Ghost],
        'attack': 151,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 257,
        'catchRate': 30,
    },
    {
        'id': 807,
        'name': 'Zeraora',
        'type': [PokemonType.Electric],
        'attack': 143,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
    },
    {
        'id': 808,
        'name': 'Meltan',
        'type': [PokemonType.Steel],
        'attack': 65,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'evolutions': [new StoneEvolution('Meltan', 'Melmetal', GameConstants.StoneType.None)],
    },
    {
        'id': 809,
        'name': 'Melmetal',
        'type': [PokemonType.Steel],
        'attack': 143,
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
    },
];
// TODO move to its own initialize method that gets called on game start.
pokemonList.forEach(p => {
    var _a;
    if (p.baby) {
        (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.forEach(evo => pokemonDevolutionMap[evo.evolvedPokemon] = evo.basePokemon);
    }
    pokemonMap[p.name] = p;
    pokemonMapId[p.id] = p;
});
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.ts"/>
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            if (!partyPokemon.evolutions) {
                return false;
            }
            for (const evolution of partyPokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && PokemonHelper.calcNativeRegion(evolution.evolvedPokemon) <= player.highestRegion()) {
                    return true;
                }
            }
            return false;
        });
    }
    static getEvolution(id, evoType) {
        for (const pokemon of App.game.party.caughtPokemon) {
            if (pokemon.id == id) {
                for (const evolution of pokemon.evolutions) {
                    if (evolution instanceof StoneEvolution && evolution.stone == evoType) {
                        return evolution.evolvedPokemon;
                    }
                }
            }
        }
        return '';
    }
    static getPokemonById(id) {
        return this.getPokemonByName(pokemonMapId[id].name);
    }
    static getPokemonByName(name) {
        var _a;
        const basePokemon = pokemonMap[name];
        if (!basePokemon) {
            console.log('Could not find pokemon', name);
            return;
        }
        const type1 = basePokemon['type'][0];
        const type2 = (_a = basePokemon['type'][1], (_a !== null && _a !== void 0 ? _a : PokemonType.None));
        const eggCycles = basePokemon['eggCycles'] || 20;
        return new DataPokemon(basePokemon['id'], basePokemon['name'], basePokemon['catchRate'], basePokemon['evolutions'], type1, type2, basePokemon['attack'], basePokemon['levelType'], basePokemon['exp'], eggCycles);
    }
    static typeStringToId(id) {
        return PokemonType[id];
    }
    static typeIdToString(id) {
        return PokemonType[id];
    }
    static getImage(pokemon, shiny) {
        let src = 'assets/images/';
        if (shiny) {
            src += 'shiny';
        }
        src += `pokemon/${pokemon.id}.png`;
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = '';
        if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            src = 'assets/images/pokeball/Pokeball-';
            if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true)) {
                src += 'shiny-';
            }
            src += 'small.png';
        }
        return src;
    }
    static calcNativeRegion(pokemonName) {
        const pokemon = PokemonHelper.getPokemonByName(pokemonName);
        const id = pokemon.id;
        if (id > 251) {
            return GameConstants.Region.hoenn;
        }
        else if (id > 151) {
            return GameConstants.Region.johto;
        }
        else {
            return GameConstants.Region.kanto;
        }
    }
}
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param money exp base exp reward for defeating this Pokémon
     * @param shiny
     */
    constructor(name, id, type1, type2, maxHealth, level, catchRate, exp, money, shiny, shardReward = 1) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.money = money;
        this.shiny = shiny;
        this.shardReward = shardReward;
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('Rattata', 19, PokemonType.Psychic, PokemonType.None, 10000, 1, 0, 0, 0, false, 1);
        }
        let name;
        if (PokemonFactory.roamingEncounter(route)) {
            const possible = GameConstants.RoamingPokemon[region];
            name = possible[Math.floor(Math.random() * possible.length)];
        }
        else {
            const pokemonList = RouteHelper.getAvailablePokemonList(route, region);
            const rand = Math.floor(Math.random() * pokemonList.length);
            name = pokemonList[rand];
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        const maxHealth = PokemonFactory.routeHealth(route, region);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const deviation = Math.floor(Math.random() * 51) - 25;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify(`✨ You encountered a shiny ${name}! ✨`, GameConstants.NotificationOption.warning);
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, route * 2, catchRate, exp, money, shiny);
    }
    static routeHealth(route, region) {
        switch (region) {
            // Hoenn starts at route 101 need to reduce the total hp of pokemon on those routes.
            case 2:
                route -= 54;
                break;
        }
        return Math.max(Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15)), 20) || 20;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance) {
        chance /= App.game.oakItems.calculateBonus(OakItems.OakItem.Shiny_Charm);
        const rand = Math.floor(Math.random() * chance) + 1;
        if (rand <= 1) {
            App.game.oakItems.use(OakItems.OakItem.Shiny_Charm);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, 0, 0, false);
    }
    /**
     * Generate a trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the pokémon that is being generated.
     * @returns {any}
     */
    static generateTrainerPokemon(gymName, index) {
        const gym = gymList[gymName];
        const pokemon = gym.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp * 1.5;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, 0, shiny, GameConstants.GYM_SHARDS);
    }
    static generateDungeonPokemon(pokemonList, chestsOpened, baseHealth, level) {
        const random = GameConstants.randomIntBetween(0, pokemonList.length - 1);
        const name = pokemonList[random];
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify(`✨ You encountered a shiny ${name}! ✨`, GameConstants.NotificationOption.warning);
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, money, shiny, GameConstants.DUNGEON_SHARDS);
    }
    static generateDungeonBoss(bossPokemonList, chestsOpened) {
        const random = GameConstants.randomIntBetween(0, bossPokemonList.length - 1);
        const bossPokemon = bossPokemonList[random];
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify(`✨ You encountered a shiny ${name}! ✨`, GameConstants.NotificationOption.warning);
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, money, shiny, GameConstants.DUNGEON_BOSS_SHARDS);
    }
    static roamingEncounter(route) {
        switch (player.region) {
            case 0:
                return PokemonFactory.roamingChance(GameConstants.ROAMING_MAX_CHANCE, GameConstants.ROAMING_MIN_CHANCE, 25, 1, route);
            case 1:
                return PokemonFactory.roamingChance(GameConstants.ROAMING_MAX_CHANCE, GameConstants.ROAMING_MIN_CHANCE, 46, 26, route);
            default:
                return false;
        }
    }
    static roamingChance(max, min, maxRoute, minRoute, curRoute) {
        return Math.random() < 1 / (max + ((min - max) * (maxRoute - curRoute) / (maxRoute - minRoute)));
    }
    static catchRateHelper(baseCatchRate) {
        const catchVariation = GameConstants.randomIntBetween(-3, 3);
        const catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        var _a;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        var _a;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        App.game.oakItems.use(OakItems.OakItem.Poison_Barb);
        GameHelper.incrementObservable(player.statistics.clicks);
        this.enemyPokemon().damage(App.game.party.calculateClickAttack());
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        GameHelper.incrementObservable(player.statistics.pokemonDefeated);
        App.game.wallet.gainMoney(this.enemyPokemon().money);
        App.game.party.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        player.gainShards(this.enemyPokemon().type1);
        player.gainShards(this.enemyPokemon().type2);
        GameHelper.incrementObservable(player.statistics.routeKills[player.route()]);
        App.game.breeding.progressEggs(Math.floor(Math.sqrt(player.route()) * 100) / 100);
        const isShiny = this.enemyPokemon().shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(this.enemyPokemon().id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(pokeBall);
            setTimeout(() => {
                this.attemptCatch();
                this.generateNewEnemy();
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers();
        player.defeatedAmount[this.enemyPokemon().id](player.defeatedAmount[this.enemyPokemon().id]() + 1);
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        Battle.counter = 0;
        Battle.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region));
    }
    static calculateActualCatchRate(pokeBall) {
        const pokeballBonus = App.game.pokeballs.getCatchBonus(pokeBall);
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        const totalChance = GameConstants.clipNumber(this.enemyPokemon().catchRate + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(pokeBall) {
        this.pokeball = ko.observable(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(pokeBall));
        App.game.pokeballs.usePokeball(pokeBall);
    }
    static attemptCatch() {
        if (this.enemyPokemon() == null) {
            this.catching(false);
            return;
        }
        const random = Math.floor(Math.random() * 100);
        if (random <= this.catchRateActual()) {
            this.catchPokemon();
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon() {
        App.game.wallet.gainDungeonTokens(6 * Math.pow(this.enemyPokemon().level / 3, 1.05));
        App.game.oakItems.use(OakItems.OakItem.Magic_Ball);
        App.game.party.gainPokemonById(this.enemyPokemon().id, this.enemyPokemon().shiny);
    }
    static gainItem() {
        const p = player.route() / 1600 + 0.009375;
        if (Math.random() < p) {
            App.game.farming.gainRandomBerry();
        }
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
const changelogType = {
    VERSION: '<code>',
    NEW: '<span class="badge badge-success">NEW</span>',
    CHANGE: '<span class="badge badge-primary">CHANGE</span>',
    FIXED: '<span class="badge badge-warning">FIXED</span>',
    REMOVED: '<span class="badge badge-danger">REMOVED</span>',
    DEFAULT: '<span class="badge badge-default">-</span>',
    INFO: '<span class="badge badge-info">INFO</span>',
};
class Changelog {
    constructor(type, description) {
        this.type = type;
        this.description = description;
        if (type == changelogType.VERSION) {
            this.description += '</code>';
        }
    }
}
/**
 * TODO(@Isha) Change to unreleased changedlog and add an explanation on how to use it
 */
const unreleasedChangelogItems = [new Changelog(changelogType.INFO, 'Do not add anything to this list yet')];
/**
 * Add your changes to the top of the changelog. Please do not increase the version number.
 *
 * MAJOR - Will stay at 0 during development, 1 after the first public release
 * MINOR - Will increment for each feature refactor or large changes to a feature
 * PATCH - Increment for small changes, bugfixes, UI changes.
 */
const changelogItems = [
    // Unreleased
    // v0.2.1
    new Changelog(changelogType.VERSION, 'v0.2.1'),
    new Changelog(changelogType.REMOVED, 'Remove Hoenn dungeons for now to avoid triggering errors'),
    // v0.2.0
    new Changelog(changelogType.VERSION, 'v0.2.0 Redeemable codes'),
    new Changelog(changelogType.NEW, 'Add redeemable codes to get a quick boost. You can enter them under the Save tab'),
    new Changelog(changelogType.FIXED, 'Gyms no longer reset 1 second in'),
    // v0.1.0
    new Changelog(changelogType.VERSION, 'v0.1.0 Farming refactor'),
    new Changelog(changelogType.CHANGE, 'Farming plots are a bit more expensive'),
    new Changelog(changelogType.CHANGE, 'Wailmer pail unlocks at 3 Cheri berries instead of 5'),
    new Changelog(changelogType.FIXED, 'Tooltips no longer overstay their welcome on the Farm'),
    // v0.0.5
    new Changelog(changelogType.VERSION, 'v0.0.5'),
    new Changelog(changelogType.NEW, 'Can now use spacebar to start Gym/Dungeon'),
    new Changelog(changelogType.FIXED, 'Stones now work with multiple evolutions'),
    new Changelog(changelogType.FIXED, 'Pokemon will no longer evolve into evolutions you have already obtained'),
    new Changelog(changelogType.FIXED, 'Can obtain Pokemon from future generations by re-breeding'),
    new Changelog(changelogType.FIXED, 'Devolutions are obtained when breeding evolved forms'),
    new Changelog(changelogType.NEW, 'Add setting to toggle egg percentage/step count'),
    new Changelog(changelogType.CHANGE, 'Total shiny Pokemon caught no longer adds to your click attack'),
    new Changelog(changelogType.CHANGE, 'Halve xp needed to upgrade Oak items'),
    new Changelog(changelogType.FIXED, 'BattleItems now buy correctly'),
    new Changelog(changelogType.CHANGE, 'Increase dungeon tokens received when catching Pokemon'),
    new Changelog(changelogType.CHANGE, 'Going to the breeder will no longer send you to route 5'),
    new Changelog(changelogType.CHANGE, 'You will now start the game with 25 Pokeballs'),
    new Changelog(changelogType.CHANGE, 'Tutorial quest buy Pokeballs amount reduced'),
    new Changelog(changelogType.FIXED, 'Selecting "max" in store will no longer freeze the game for key items'),
    // v0.0.4 - 01-01-2020
    new Changelog(changelogType.VERSION, 'v0.0.4'),
    new Changelog(changelogType.NEW, 'Show pokeball image by caught Pokemon in the Pokedex'),
    new Changelog(changelogType.CHANGE, 'Show the reason you cannot access a location'),
    new Changelog(changelogType.CHANGE, 'Total shiny Pokemon caught now add to your total click attack'),
    new Changelog(changelogType.FIXED, 'Display floored dungeon tokens amount'),
    // v0.0.3
    new Changelog(changelogType.VERSION, 'v0.0.3'),
    new Changelog(changelogType.NEW, 'Can now progress in multiple quest at a time <i>(amount based on Quest Level)</i>'),
    new Changelog(changelogType.NEW, 'Side cards can now be collapsed for more space'),
    new Changelog(changelogType.CHANGE, 'Move battle item container'),
    new Changelog(changelogType.CHANGE, 'Update how achievement percentages are shown'),
    new Changelog(changelogType.CHANGE, 'Update hatch/catch notification message'),
    new Changelog(changelogType.FIXED, 'Show the hatchery "list" button once Johto unlocked without page refresh'),
    new Changelog(changelogType.FIXED, 'Plates from underground should now sell for their correct value'),
    // v0.0.2
    new Changelog(changelogType.VERSION, 'v0.0.2'),
    new Changelog(changelogType.NEW, 'Added changelog'),
    new Changelog(changelogType.CHANGE, 'Show battle item names and descriptions'),
    new Changelog(changelogType.FIXED, 'Item magnet now works in dungeons'),
    new Changelog(changelogType.FIXED, 'Battle items no longer always active'),
    // v0.0.1
    new Changelog(changelogType.VERSION, 'v0.0.1'),
    new Changelog(changelogType.NEW, 'Add battle items'),
];
/**
 * Main game class.
 */
class Game {
    /**
     * TODO(@Isha) pass all features through the constructor
     */
    constructor(breeding, pokeballs, wallet, keyItems, badgeCase, oakItems, party, farming, codes) {
        this.breeding = breeding;
        this.pokeballs = pokeballs;
        this.wallet = wallet;
        this.keyItems = keyItems;
        this.badgeCase = badgeCase;
        this.oakItems = oakItems;
        this.party = party;
        this.farming = farming;
        this.redeemableCodes = codes;
        this._gameState = ko.observable(GameConstants.GameState.paused);
        player = Save.load();
        AchievementHandler.initialize();
    }
    load() {
        // TODO(@Isha) Refactor this saving logic
        const saveJSON = localStorage.getItem('save');
        if (saveJSON !== null) {
            const saveObject = JSON.parse(saveJSON);
            this.breeding.fromJSON(saveObject[this.breeding.saveKey]);
            this.pokeballs.fromJSON(saveObject[this.pokeballs.saveKey]);
            this.wallet.fromJSON(saveObject[this.wallet.saveKey]);
            this.keyItems.fromJSON(saveObject[this.keyItems.saveKey]);
            this.badgeCase.fromJSON(saveObject[this.badgeCase.saveKey]);
            this.oakItems.fromJSON(saveObject[this.oakItems.saveKey]);
            this.party.fromJSON(saveObject[this.party.saveKey]);
            this.farming.fromJSON(saveObject[this.farming.saveKey]);
            this.redeemableCodes.fromJSON(saveObject[this.redeemableCodes.saveKey]);
        }
    }
    initialize() {
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.farming.initialize();
        // TODO refactor to proper initialization methods
        Battle.generateNewEnemy();
        //Safari.load();
        Save.loadMine();
        Underground.energyTick(Underground.getEnergyRegenTime());
        DailyDeal.generateDeals(Underground.getDailyDealsMax(), new Date());
        QuestHelper.generateQuests(player.questLevel, player.questRefreshes, new Date());
        QuestHelper.loadCurrentQuests(player.currentQuests);
        if (!player.tutorialComplete()) {
            QuestLineHelper.createTutorial();
            QuestLineHelper.tutorial.resumeAt(player.tutorialProgress(), player.tutorialState);
        }
        this.gameState = GameConstants.GameState.fighting;
    }
    start() {
        console.log('game started');
        if (player.starter === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        this.interval = setInterval(this.gameTick.bind(this), GameConstants.TICK_TIME);
    }
    stop() {
        clearTimeout(this.interval);
    }
    gameTick() {
        // Update tick counters
        this.undergroundCounter += GameConstants.TICK_TIME;
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter > GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
        }
        Save.counter += GameConstants.TICK_TIME;
        Underground.counter += GameConstants.TICK_TIME;
        GameHelper.counter += GameConstants.TICK_TIME;
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter > GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter > GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter > GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
        }
        if (Save.counter > GameConstants.SAVE_TICK) {
            const now = new Date();
            if (new Date(player._lastSeen).toLocaleDateString() !== now.toLocaleDateString()) {
                player.questRefreshes = 0;
                QuestHelper.quitAllQuests();
                QuestHelper.clearQuests();
                QuestHelper.generateQuests(player.questLevel, player.questRefreshes, now);
                DailyDeal.generateDeals(Underground.getDailyDealsMax(), now);
                Notifier.notify("It's a new day! Your quests and underground deals have been updated.", GameConstants.NotificationOption.info);
            }
            player._lastSeen = Date.now();
            Save.store(player);
        }
        if (Underground.counter > GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                Underground.gainEnergy();
                Underground.energyTick(Underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        this.farming.update(GameConstants.TICK_TIME / 1000);
        if (EffectEngineRunner.counter > GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        if (GameHelper.counter > 60 * 1000) {
            GameHelper.updateTime();
        }
    }
    save() {
    }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            const id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                const tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, function () {
            const tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static animateCurrency(amount, target) {
        let pos;
        if ($(`#${target}`).offset()) {
            pos = $(`#${target}`).offset();
            pos.top -= 15;
        }
        else {
            pos = { 'top': -200, 'left': 0 };
        }
        const left = ((Math.random() * ((pos.left + 25) - (pos.left - 25)) + (pos.left - 25))).toFixed(2);
        const place = amount.toString().length;
        let multi = 1;
        for (let i = 0; i < place; i++) {
            multi *= 10;
        }
        const ani = `<p style="z-index:50;position:absolute;left:${left}px;top:${pos.top}px; font-size:${10 + 0.5 * Math.log(amount)}px;">+${amount.toLocaleString('en-US')}</p>`;
        $(ani).prependTo('body').animate({
            top: 10,
            opacity: 0,
        }, 200 * Math.log(amount) + 1000, 'linear', function () {
            $(this).remove();
        });
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                const local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).tooltip('dispose');
                });
                if (bindingContext.$data instanceof Plot) {
                    $(element).hover(function () {
                        $(this).data('to', setInterval(function () {
                            $(element).tooltip('hide')
                                .attr('data-original-title', FarmController.getTooltipLabel(bindingContext.$index()))
                                .tooltip('show');
                        }, 100));
                    }, function () {
                        clearInterval($(this).data('to'));
                    });
                }
            },
            options: {
                placement: 'bottom',
                trigger: 'click',
            },
        };
    }
    static addKeyListeners() {
        $(document).on('keydown', function (e) {
            const keyCode = e.keyCode;
            if (App.game.gameState === GameConstants.GameState.dungeon) {
                if (keyCode == 38 || keyCode == 87) { // up || w
                    DungeonRunner.map.moveUp();
                }
                else if (keyCode == 39 || keyCode == 68) { // right || d
                    DungeonRunner.map.moveRight();
                }
                else if (keyCode == 37 || keyCode == 65) { // left || a
                    DungeonRunner.map.moveLeft();
                }
                else if (keyCode == 40 || keyCode == 83) { // down || s
                    DungeonRunner.map.moveDown();
                }
                else if (keyCode == 32) { // space
                    DungeonRunner.openChest();
                    DungeonRunner.startBossFight();
                }
                e.preventDefault();
            }
            else if (App.game.gameState === GameConstants.GameState.town) {
                if (keyCode == 32) { // space
                    if (player.town().gym) {
                        GymRunner.startGym(player.town().gym());
                    }
                    else if (player.town() instanceof DungeonTown) {
                        DungeonRunner.initializeDungeon(player.town().dungeon());
                    }
                    e.preventDefault();
                }
            }
        });
        $(document).on('keydown', function (e) {
            const keyCode = e.keyCode;
            if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyToDirection[keyCode];
                if (dir) {
                    e.preventDefault();
                    Safari.move(dir);
                }
                if (keyCode == 32) { // space
                    e.preventDefault();
                }
            }
        });
        $(document).on('keyup', function (e) {
            const keyCode = e.keyCode;
            if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyToDirection[keyCode];
                if (dir) {
                    e.preventDefault();
                    Safari.stop(dir);
                }
                else if (keyCode == 32) { // space
                    e.preventDefault();
                }
            }
        });
    }
}
$(document).ready(function () {
    $('#pokedexModal').on('show.bs.modal', PokedexHelper.updateList);
});
// For helper functions that may be needed across all files
class GameHelper {
    static incrementObservable(obs, amt = 1) {
        obs(obs() + amt);
    }
    static enumLength(enumerable) {
        return Object.keys(enumerable).length / 2;
    }
    static updateTime() {
        const now = new Date();
        if (now.getDate() == GameHelper.tomorrow.getDate()) {
            GameHelper.tomorrow = GameHelper.getTomorrow();
        }
        GameHelper.currentTime(new Date());
    }
    static getTomorrow() {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0);
        tomorrow.setMinutes(0);
        tomorrow.setSeconds(0);
        tomorrow.setMilliseconds(0);
        return tomorrow;
    }
    static twoDigitNumber(n) {
        // For use in clocks / showing time
        // Turns 4 into 04, does nothing to 23, turns 173 into 73
        return (`0${n}`).slice(-2);
    }
    static formatAmount(n) {
        if (n >= 1e9) {
            return `${Math.floor(n / 1e9)}b`;
        }
        else if (n >= 1e6) {
            return `${Math.floor(n / 1e6)}m`;
        }
        else if (n >= 1e3) {
            return `${Math.floor(n / 1e3)}k`;
        }
        return `${n}`;
    }
    static getIndexFromDistribution(a) {
        const rand = Math.random();
        for (let i = 0; i < a.length; i++) {
            if (rand <= a[i]) {
                return i;
            }
        }
    }
    static getRegion(id) {
        return GameConstants.TotalPokemonsPerRegion.findIndex(p => id < p);
    }
    static createArray(start, max, step) {
        const array = [];
        for (let i = start; i <= max; i += step) {
            array.push(i);
        }
        return array;
    }
    static anOrA(name) {
        return ['a', 'e', 'i', 'o', 'u'].includes(name[0].toLowerCase()) ? 'an' : 'a';
    }
}
GameHelper.MS_IN_MIN = 1000 * 60;
GameHelper.MS_IN_HOUR = GameHelper.MS_IN_MIN * 60;
GameHelper.counter = 0;
GameHelper.currentTime = ko.observable(new Date());
GameHelper.tomorrow = GameHelper.getTomorrow();
GameHelper.msUntilTomorrow = ko.computed(function () {
    return Number(GameHelper.tomorrow) - Number(GameHelper.currentTime());
});
GameHelper.formattedTimeUntilTomorrow = ko.computed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    const hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    const minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}:${GameHelper.twoDigitNumber(minutes)}`;
});
GameHelper.formattedLetterTimeUntilTomorrow = ko.computed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    const hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    const minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}h${GameHelper.twoDigitNumber(minutes)}m`;
});
/* eslint @typescript-eslint/camelcase: off */
class Notifier {
    static notify(message, type) {
        $.notify({
            // options
            icon: 'glyphicon glyphicon-warning-sign',
            title: '',
            message: GameConstants.humanifyString(message),
            url: '',
            target: '',
        }, {
            // settings
            element: 'body',
            position: null,
            type: GameConstants.NotificationOption[type],
            allow_dismiss: true,
            newest_on_top: true,
            showProgressbar: false,
            placement: {
                from: 'top',
                align: 'left',
            },
            offset: 20,
            spacing: 10,
            z_index: 1050,
            delay: 5000,
            timer: 1000,
            url_target: '_blank',
            mouse_over: null,
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp',
            },
            onShow: null,
            onShown: null,
            onClose: null,
            onClosed: null,
            icon_type: 'class',
            template: `<div data-notify="container" class="alert alert-{0}" role="alert">
                      <button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>
                      <span data-notify="icon"></span>
                      <span data-notify="title">{1}</span>
                      <span data-notify="message">{2}</span>
                      <span style="padding: 5px;"></span>
                      <div class="progress" data-notify="progressbar">
                      <div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
                      </div>
                      <a href="{3}" target="{4}" data-notify="url"></a>
                      </div>`,
        });
    }
}
class ObservableArrayProxy extends Array {
    constructor(array) {
        super();
        this.array = array;
        this._array = ko.observableArray(this.array);
        return new Proxy(this._array, ObservableArrayProxy.proxyHandler);
    }
}
ObservableArrayProxy.proxyHandler = {
    get: function (target, prop) {
        if (target[prop]) { // this lets us use ObservableArray functions like reverse or peek
            return target[prop];
        }
        else {
            return target()[prop];
        }
    },
    set: function (target, prop, value) {
        target()[prop] = value;
        return true;
    },
    has: function (target, prop) {
        // This is needed for map, forEach etc to work,
        // because they want to check if target.hasOwnProperty("0") first.
        // The ko function doesn't seem to have any OwnProperties anyway, so no harm here (don't quote me)
        return Reflect.has(target(), prop);
    },
};
class Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        this.defaults = {
            level: 0,
        };
        this._level = ko.observable();
        // Optional array of costs
        this.costList = [];
        // Optional array of benefits
        this.bonusList = [];
        this.saveKey = name;
        this.name = name;
        this.displayName = displayName;
        this.maxLevel = maxLevel;
        this.level = this.defaults.level;
        this.costList = costList;
        this.bonusList = bonusList;
        this.increasing = increasing;
    }
    calculateCost() {
        return this.costList[this.level];
    }
    // Override with a custom function
    calculateBonus(level = this.level) {
        return this.bonusList[level];
    }
    upgradeBonus() {
        if (!this.isMaxLevel()) {
            return this.calculateBonus(this.level + 1) - this.calculateBonus(this.level);
        }
        return 0;
    }
    isMaxLevel() {
        return this.level >= this.maxLevel;
    }
    canAfford() {
        return App.game.wallet.hasAmount(this.calculateCost());
    }
    // Override in subclass when other requirements exist.
    canBuy() {
        return this.level < this.maxLevel && this.canAfford();
    }
    buy() {
        if (this.canBuy()) {
            App.game.wallet.loseAmount(this.calculateCost());
            this.levelUp();
        }
    }
    levelUp() {
        this.level = this.level + 1;
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        this.level = (_a = json['level'], (_a !== null && _a !== void 0 ? _a : this.defaults.level));
    }
    toJSON() {
        return {
            level: this.level,
        };
    }
    // Knockout getters/setters
    get level() {
        return this._level();
    }
    set level(value) {
        this._level(Math.min(value, this.maxLevel));
    }
}
///<reference path="upgrades/Upgrade.ts"/>
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        this.effectList = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {};
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._region = ko.observable(savedPlayer._region);
        if (MapHelper.validRoute(savedPlayer._route, savedPlayer._region)) {
            this._route = ko.observable(savedPlayer._route);
        }
        else {
            switch (savedPlayer._region) {
                case 0:
                    this._route = ko.observable(1);
                    break;
                case 1:
                    this._route = ko.observable(29);
                    break;
                default:
                    this._route = ko.observable(1);
                    this._region = ko.observable(GameConstants.Region.kanto);
            }
        }
        this._defeatedAmount = [...Array(pokemonList.length + 1)].map(function (val, index) {
            return ko.observable(savedPlayer._defeatedAmount ? (savedPlayer._defeatedAmount[index] || 0) : 0);
        });
        this._caughtAmount = [...Array(pokemonList.length + 1)].map(function (val, index) {
            return ko.observable(savedPlayer._caughtAmount ? (savedPlayer._caughtAmount[index] || 0) : 0);
        });
        this._town = ko.observable(TownList['Pallet Town']);
        this._currentTown = ko.observable('');
        this._starter = savedPlayer._starter != undefined ? savedPlayer._starter : GameConstants.Starter.None;
        console.log(savedPlayer._itemList);
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                this._itemList[key] = ko.observable(savedPlayer._itemList[key]);
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        this.mineInventory = new ObservableArrayProxy(savedPlayer.mineInventory || []);
        for (const item of this.mineInventory) {
            item.amount = ko.observable(item.amount);
        }
        this._shardUpgrades = Save.initializeShards(savedPlayer._shardUpgrades);
        this.achievementsCompleted = savedPlayer.achievementsCompleted || {};
        this._shardsCollected = [...Array(18)].map((value, index) => {
            return ko.observable(savedPlayer._shardsCollected ? savedPlayer._shardsCollected[index] : 0);
        });
        const today = new Date();
        const lastSeen = new Date(this._lastSeen);
        if (today.toLocaleDateString() == lastSeen.toLocaleDateString()) {
            this.questRefreshes = savedPlayer.questRefreshes;
            if (savedPlayer.completedQuestList) {
                this.completedQuestList = savedPlayer.completedQuestList.map((bool) => {
                    return ko.observable(bool);
                });
            }
            else {
                this.completedQuestList = [...Array(GameConstants.QUESTS_PER_SET)].map(() => {
                    return ko.observable(false);
                });
            }
            this.currentQuests = ko.observableArray(savedPlayer.currentQuests || []);
            for (const q of this.currentQuests()) {
                q.initial = ko.observable(q.initial);
            }
        }
        else {
            this.questRefreshes = 0;
            this.completedQuestList = [...Array(GameConstants.QUESTS_PER_SET)].map(() => {
                return ko.observable(false);
            });
            this.currentQuests = ko.observableArray([]);
        }
        this._questXP = ko.observable(savedPlayer._questXP || 0);
        this._shinyCatches = ko.observable(savedPlayer._shinyCatches || 0);
        this._lastSeen = Date.now();
        this.statistics = new Statistics(savedPlayer.statistics);
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
        this.tutorialProgress = ko.observable(savedPlayer.tutorialProgress || 0);
        this.tutorialState = savedPlayer.tutorialState;
        this.tutorialComplete = ko.observable(!!savedPlayer.tutorialComplete);
    }
    set defeatedAmount(value) {
        this._defeatedAmount = value;
    }
    get defeatedAmount() {
        return this._defeatedAmount;
    }
    set itemList(value) {
        this._itemList = value;
    }
    get itemList() {
        return this._itemList;
    }
    gainShards(type, amount = 1) {
        if (type === PokemonType.None) {
            return;
        }
        player._shardsCollected[type](player._shardsCollected[type]() + amount);
        GameHelper.incrementObservable(player.statistics.totalShards[type], amount);
    }
    buyShardUpgrade(typeNum, effectNum) {
        if (this.canBuyShardUpgrade(typeNum, effectNum)) {
            this._shardsCollected[typeNum](this._shardsCollected[typeNum]() - this.getShardUpgradeCost(typeNum, effectNum));
            this._shardUpgrades[typeNum][effectNum](this._shardUpgrades[typeNum][effectNum]() + 1);
        }
    }
    shardUpgradeMaxed(typeNum, effectNum) {
        return this._shardUpgrades[typeNum][effectNum]() >= GameConstants.MAX_SHARD_UPGRADES;
    }
    canBuyShardUpgrade(typeNum, effectNum) {
        const lessThanMax = !this.shardUpgradeMaxed(typeNum, effectNum);
        const hasEnoughShards = this._shardsCollected[typeNum]() >= this.getShardUpgradeCost(typeNum, effectNum);
        return lessThanMax && hasEnoughShards;
    }
    getShardUpgradeCost(typeNum, effectNum) {
        const cost = (this._shardUpgrades[typeNum][effectNum]() + 1) * GameConstants.SHARD_UPGRADE_COST;
        return cost;
    }
    get caughtAmount() {
        return this._caughtAmount;
    }
    set caughtAmount(value) {
        this._caughtAmount = value;
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    get currentTown() {
        return this._currentTown;
    }
    set currentTown(value) {
        this._currentTown = value;
    }
    get starter() {
        return this._starter;
    }
    set starter(value) {
        this._starter = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers() {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier();
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this.mineInventory.length; i++) {
            if (this.mineInventory[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        for (let i = 0; i < player.mineInventory.length; i++) {
            if (player.mineInventory[i].id === id) {
                return i;
            }
        }
        return -1;
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        const index = this.mineInventoryIndex(id);
        if (index > -1) {
            return player.mineInventory[index].amount();
        }
        else {
            return 0;
        }
    }
    get shardUpgrades() {
        return this._shardUpgrades;
    }
    set shardUpgrades(value) {
        this._shardUpgrades = value;
    }
    get shardsCollected() {
        return this._shardsCollected;
    }
    set shardsCollected(value) {
        this._shardsCollected = value;
    }
    get questLevel() {
        return QuestHelper.xpToLevel(player.questXP);
    }
    percentToNextQuestLevel() {
        const current = this.questLevel;
        const requiredForCurrent = QuestHelper.levelToXP(current);
        const requiredForNext = QuestHelper.levelToXP(current + 1);
        return 100 * (this.questXP - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    get shinyCatches() {
        return this._shinyCatches();
    }
    set shinyCatches(value) {
        this._shinyCatches(value);
    }
    get questXP() {
        return this._questXP();
    }
    set questXP(value) {
        this._questXP(value);
    }
    toJSON() {
        const keep = [
            '_route',
            '_defeatedAmount',
            '_caughtAmount',
            '_region',
            '_starter',
            '_itemList',
            '_itemMultipliers',
            // TODO(@Isha) remove.
            'mineInventory',
            // TODO(@Isha) remove.
            '_mineLayersCleared',
            '_shardUpgrades',
            '_shardsCollected',
            'achievementsCompleted',
            'completedQuestList',
            'questRefreshes',
            '_questXP',
            '_lastSeen',
            'currentQuests',
            '_shinyCatches',
            'gymDefeats',
            'statistics',
            'achievementsCompleted',
            'effectList',
            'highestRegion',
            'tutorialProgress',
            'tutorialState',
            'tutorialComplete',
        ];
        const plainJS = ko.toJS(this);
        return Save.filter(plainJS, keep);
    }
}
class Save {
    static store(player) {
        const json = JSON.stringify(player);
        localStorage.setItem('player', json);
        localStorage.setItem('mine', Mine.serialize());
        localStorage.setItem('settings', Settings.save());
        localStorage.setItem('save', JSON.stringify(this.getSaveObject()));
        this.counter = 0;
        console.log('Game saved');
    }
    static getSaveObject() {
        const saveObject = {};
        saveObject[Underground.saveKey] = Underground.save();
        saveObject[App.game.breeding.saveKey] = App.game.breeding.toJSON();
        saveObject[App.game.pokeballs.saveKey] = App.game.pokeballs.toJSON();
        saveObject[App.game.wallet.saveKey] = App.game.wallet.toJSON();
        saveObject[App.game.keyItems.saveKey] = App.game.keyItems.toJSON();
        saveObject[App.game.badgeCase.saveKey] = App.game.badgeCase.toJSON();
        saveObject[App.game.oakItems.saveKey] = App.game.oakItems.toJSON();
        saveObject[App.game.party.saveKey] = App.game.party.toJSON();
        saveObject[App.game.farming.saveKey] = App.game.farming.toJSON();
        saveObject[App.game.redeemableCodes.saveKey] = App.game.redeemableCodes.toJSON();
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem('player');
        const settings = localStorage.getItem('settings');
        Settings.load(JSON.parse(settings));
        const saveJSON = localStorage.getItem('save');
        if (saveJSON !== null) {
            const saveObject = JSON.parse(saveJSON);
            Underground.load(saveObject[Underground.saveKey]);
        }
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const element = document.createElement('a');
        element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify({ player, save: this.getSaveObject() })))}`);
        const currentdate = new Date();
        const datestr = currentdate.toISOString().replace('T', ' ').slice(0, 19);
        const filename = `PokeClickerSave_${datestr}.txt`;
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    static loadMine() {
        const mine = localStorage.getItem('mine');
        if (mine) {
            Mine.loadSavedMine(JSON.parse(mine));
        }
        else {
            Mine.loadMine();
        }
    }
    static reset() {
        const confirmDelete = prompt('Are you sure you want reset?\nIf so, type \'DELETE\'');
        if (confirmDelete == 'DELETE') {
            localStorage.removeItem('player');
            localStorage.removeItem('mine');
            localStorage.removeItem('save');
            location.reload();
        }
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.indexOf(prop) > -1) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0);
        }
        return res;
    }
    static initializeShards(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Normal] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(function () {
            try {
                const decoded = atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem('player', JSON.stringify(json.player));
                    localStorage.setItem('save', JSON.stringify(json.save));
                    location.reload();
                }
                else {
                    Notifier.notify('This is not a valid decoded savefile', GameConstants.NotificationOption.danger);
                }
            }
            catch (err) {
                Notifier.notify('This is not a valid savefile', GameConstants.NotificationOption.danger);
            }
        }, 1000);
    }
    static convert() {
        const base64 = $('#convertTextArea').val().toString();
        const json = atob(base64);
        const p = JSON.parse(json);
        Save.convertShinies(p.caughtPokemonList);
        $('#saveModal').modal('hide');
    }
    // TODO (@Isha) reimplement
    static convertShinies(list) {
        // let converted = [];
        // for (let pokemon of list) {
        //     let shiny = parseInt(pokemon['shiny']);
        //     let name = pokemon['name'];
        //     if (shiny == 1 && player.caughtShinyList.indexOf(name) == -1) {
        //         player.caughtShinyList().push(pokemon['name']);
        //         converted.push(pokemon['name']);
        //     }
        // }
        // if (converted.length > 0) {
        //     Notifier.notify("You have gained the following shinies: " + converted, GameConstants.NotificationOption.success)
        // }
    }
}
Save.counter = 0;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#saveModal').on('show.bs.modal', function () {
        $('#saveTextArea').text(JSON.stringify(player));
    });
});
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        this.starterPicked = s;
        $('#pickStarterModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, 0, shiny);
        Battle.enemyPokemon(battlePokemon);
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(function () {
                    player.starter = StartSequenceRunner.starterPicked;
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#startSequenceModal').on('hidden.bs.modal', function () {
        $('#pickStarterModal').modal('show');
    });
    $('#pickStarterModal').on('hidden.bs.modal', function () {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            $('#pickStarterModalText').text("I can't hold off all three! Please pick the pokémon you want to fight!");
            $('#pickStarterModal').modal('show');
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', function () {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
    });
});
/**
 * TODO(@Isha) refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', function () {
    App.start();
});
class Achievement {
    constructor(name, description, property, bonus, unlocked = false) {
        this.name = name;
        this.description = description;
        this.property = property;
        this.bonus = bonus;
        this.unlocked = unlocked;
    }
    check() {
        if (this.isCompleted()) {
            Notifier.notify(`${this.name}<br><small>${this.description}</small>`, GameConstants.NotificationOption.warning);
            player.achievementsCompleted[this.name] = true;
            this.unlocked = true;
        }
    }
    getProgress() {
        return this.isCompleted() ? this.property.requiredValue : this.property.getProgress();
    }
    getProgressPercentage() {
        return this.isCompleted() ? '100.0' : this.property.getProgressPercentage();
    }
    isCompleted() {
        return this.unlocked || this.property.isCompleted();
    }
    getBonus() {
        const max = AchievementHandler.calculateMaxBonus();
        return (this.bonus / max * 100).toFixed(2);
    }
}
class Requirement {
    constructor(requiredValue, type) {
        this.requiredValue = requiredValue;
        this.type = type;
    }
    getProgressPercentage() {
        return (this.getProgress() / this.requiredValue * 100).toFixed(1);
    }
    isCompleted() {
        switch (this.type) {
            case GameConstants.AchievementOption.less:
                return this.getProgress() < this.requiredValue;
            case GameConstants.AchievementOption.equal:
                return this.getProgress() == this.requiredValue;
            case GameConstants.AchievementOption.more:
                return this.getProgress() >= this.requiredValue;
        }
    }
}
///<reference path="Requirement.ts"/>
class MoneyRequirement extends Requirement {
    constructor(requiredValue, type = GameConstants.AchievementOption.more) {
        super(requiredValue, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalMoney(), this.requiredValue);
    }
}
///<reference path="MoneyRequirement.ts"/>
class AchievementHandler {
    static navigateRight() {
        if (AchievementHandler.navigateIndex() < AchievementHandler.getNumberOfTabs()) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() + 1);
        }
    }
    static navigateLeft() {
        if (AchievementHandler.navigateIndex() > 0) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() - 1);
        }
    }
    static getNumberOfTabs() {
        return Math.floor(AchievementHandler.achievementList.length / 10);
    }
    static getAchievementListWithIndex(index) {
        return AchievementHandler.achievementList.slice(index, index + 10);
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus) {
        const unlocked = player.achievementsCompleted[name];
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, unlocked));
    }
    static calculateMaxBonus() {
        let sum = 0;
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            sum += AchievementHandler.achievementList[i].bonus;
        }
        return sum;
    }
    static bonusUnlocked() {
        let sum = 0;
        for (const achievement of AchievementHandler.achievementList) {
            if (achievement.isCompleted()) {
                sum += achievement.bonus;
            }
        }
        return sum;
    }
    static achievementBonus() {
        return AchievementHandler.bonusUnlocked() / AchievementHandler.maxBonus;
    }
    static getMoneyMultiplier() {
        return 1 + this.achievementBonus();
    }
    static achievementBonusPercent() {
        return `${(100 * AchievementHandler.achievementBonus()).toFixed(2)}%`;
    }
    static initialize() {
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Pokédollars', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a PokéMart', 'Obtain 1,000 Pokédollars', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Pokédollars', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Pokédollars', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement("Pfft, I Don't Need a Bike Voucher", 'Obtain 1,000,000 Pokédollars', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A billion Poképennies', 'Obtain 10,000,000 Pokédollars', new MoneyRequirement(10000000), 0.5);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Dungeon Tokens', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Token Collector', 'Obtain 1,000 Dungeon Tokens', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Dungeon Tokens', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Dungeon Tokens', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Dungeon Tokens', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS DOH RAH', 'Have 10,000 Attack', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('Ok, I have enough attack already...', 'Have 25,000 Attack', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Bling', 'Obtain 100 Diamonds', new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 1000 Diamonds', new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement("If you like it, you should've put a ring on it.", 'Obtain 10,000 Diamonds', new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement('Is my thumb green yet?', 'Dig up 1 item', new DigItemsRequirement(1), 0.01);
        AchievementHandler.addAchievement('My shovel is starting to crack', 'Dig up 10 items', new DigItemsRequirement(10), 0.01);
        AchievementHandler.addAchievement("Why can't I make a diamond shovel?", 'Dig up 100 items', new DigItemsRequirement(100), 0.01);
        AchievementHandler.addAchievement('This is definitely not Minecraft', 'Dig up 1,000 items', new DigItemsRequirement(1000), 0.01);
        AchievementHandler.addAchievement('I wonder how much is down there...', 'Dig up 10,000 items', new DigItemsRequirement(10000), 0.01);
        AchievementHandler.addAchievement('The earth is like unions', 'Dig deeper 1 time', new DigDeeperRequirement(1), 0.01);
        AchievementHandler.addAchievement('This takes foreverrrrrrr', 'Dig deeper 10 times', new DigDeeperRequirement(10), 0.01);
        AchievementHandler.addAchievement("DigDug ain't got nothin on me", 'Dig deeper 100 times', new DigDeeperRequirement(100), 0.01);
        AchievementHandler.addAchievement("Both my thumbs are green! This can't be healthy", 'Dig deeper 1000 times', new DigDeeperRequirement(1000), 0.01);
        AchievementHandler.addAchievement('First Team', 'Capture 100 Pokemon', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the PC', 'Capture 1,000 Pokemon', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Pokemon Army', 'Capture 10,000 Pokemon', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Pokemon Collector', 'Capture 100,000 Pokemon', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You get a pokemon, you get a pokemon, everyone gets a pokemon!', 'Capture 1,000,000 Pokemon', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Pokemon', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Highway to Pallet Town', 'Defeat 1,000 Pokemon', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Pokemon', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake is a Lie, but the Grind is real', 'Defeat 100,000 Pokemon', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are there any left?', 'Defeat 1,000,000 Pokemon', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement("Startin' Out", 'Capture your first Pokémon', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Like Ants in a PC', 'Capture 10 unique Pokémons', new CaughtPokemonRequirement(10), 0.02);
        AchievementHandler.addAchievement('Better Than Season 1 Ash', 'Capture 20 unique Pokémons', new CaughtPokemonRequirement(20), 0.03);
        AchievementHandler.addAchievement('More Pokémon than Patrick', 'Capture 30 unique Pokémons', new CaughtPokemonRequirement(30), 0.04);
        AchievementHandler.addAchievement('Rick and Fourty', 'Capture 40 unique Pokémons', new CaughtPokemonRequirement(40), 0.05);
        AchievementHandler.addAchievement('50 Shades of Pikachu', 'Capture 50 unique Pokémons', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Keeping Oak Really Busy', 'Capture 75 unique Pokémons', new CaughtPokemonRequirement(75), 0.15);
        AchievementHandler.addAchievement('Surpassing Ash', 'Capture 88 unique Pokémons', new CaughtPokemonRequirement(88), 0.05);
        AchievementHandler.addAchievement('I Wanna be The Very Best', 'Capture 100 unique Pokémons', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('I Should Probably Take a Break', 'Complete the Kanto Pokédex!', new CaughtPokemonRequirement(151), 0.50);
        AchievementHandler.addAchievement("I'd rather be shiny", 'Capture your first Shiny', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These pokémon must be sick', 'Capture 10 unique Shinies', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Capture 20 unique Shinies', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Capture 30 unique Shinies', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay fine, I can do a few more', 'Capture 40 unique Shinies', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All The Shiny Pokémon Go?', 'Capture 50 unique Shinies', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, found some more', 'Capture 75 unique Shinies', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just keep swimming just keep swimming -- oooo shiny!', 'Capture 100 unique Shinies', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement("I don't know if I can handle the next batch of shinies.", 'Complete the Kanto Pokédex shiny!', new ShinyPokemonRequirement(151), 1.50);
        AchievementHandler.addAchievement('Pokemon Nursery', 'Hatch 1 egg', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs', new HatchRequirement(10), 0.01);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs', new HatchRequirement(100), 0.01);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs', new HatchRequirement(1000), 0.01);
        AchievementHandler.addAchievement('Offical Easter Bunny', 'Hatch 10,000 eggs', new HatchRequirement(10000), 0.01);
        AchievementHandler.addAchievement('Why is my Voltorb Upside Down?', 'Obtain your first Pokéball', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Obtain 10 Pokéballs', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Obtain 100 Pokéballs', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Obtain 1,000 Pokéballs', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe just a few more for the bunker', 'Obtain 10,000 Pokéballs', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker stocked with Pokeballs!', 'Obtain 100,000 Pokéballs', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('ooooo A blue one!', 'Obtain your first Greatball', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('Greatball 2', 'Obtain 10 Greatballs', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Greatball 3', 'Obtain 100 Greatballs', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Greatball 4', 'Obtain 1,000 Greatballs', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('Greatball 5', 'Obtain 10,000 Greatballs', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('Greatball 6', 'Obtain 100,000 Greatballs', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('Ultraball 1', 'Obtain your first Ultraball', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Ultraball 2', 'Obtain 10 Ultraballs', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('Ultraball 3', 'Obtain 100 Ultraballs', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('Ultraball 4', 'Obtain 1,000 Ultraballs', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('Ultraball 5', 'Obtain 10,000 Ultraballs', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Ultraball 6', 'Obtain 100,000 Ultraballs', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('Masterball 1', 'Obtain your first Masterball', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Masterball 2', 'Obtain 10 Masterballs', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('Masterball 3', 'Obtain 100 Masterballs', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click 10 Times', new ClickRequirement(10, 1), 0.02);
        AchievementHandler.addAchievement('Clicking Pro', 'Click 100 Times', new ClickRequirement(100, 1), 0.05);
        AchievementHandler.addAchievement('Ultra Clicker', 'Click 1,000 Times', new ClickRequirement(1000, 1), 0.10);
        AchievementHandler.addAchievement('Need a new mouse yet?', 'Click 10,000 Times', new ClickRequirement(10000, 1), 0.25);
        for (let i = 1; i <= GameConstants.AMOUNT_OF_ROUTES_KANTO; i++) {
            AchievementHandler.addAchievement(`Route ${i} traveler`, `Defeat 100 Pokémon on route ${i}`, new RouteKillRequirement(100, i), 0.02);
            AchievementHandler.addAchievement(`Route ${i} explorer`, `Defeat 1,000 Pokémon on route ${i}`, new RouteKillRequirement(1000, i), 0.05);
            AchievementHandler.addAchievement(`Route ${i} conqueror`, `Defeat 10,000 Pokémon on route ${i}`, new RouteKillRequirement(10000, i), 0.10);
        }
        for (let i = 0; i < GameConstants.KantoGyms.length; i++) {
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym tourist`, 'Clear 1 time', new ClearGymRequirement(1, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym regular`, 'Clear 10 times', new ClearGymRequirement(10, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym ruler`, 'Clear 100 times', new ClearGymRequirement(100, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym owner`, 'Clear 1,000 times', new ClearGymRequirement(1000, i), 0.01);
        }
        for (let i = 0; i < GameConstants.KantoDungeons.length; i++) {
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} visitor`, 'Clear 1 time', new ClearDungeonRequirement(1, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} explorer`, 'Clear 10 times', new ClearDungeonRequirement(10, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} expert`, 'Clear 100 times', new ClearDungeonRequirement(100, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} hermit`, 'Clear 1,000 times', new ClearDungeonRequirement(1000, i), 0.01);
        }
        AchievementHandler.maxBonus = AchievementHandler.calculateMaxBonus();
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
///<reference path="Requirement.ts"/>
class AttackRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.party.pokemonAttackObservable()(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class CapturedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.pokemonCaptured(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class CaughtPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.length, this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClearDungeonRequirement extends Requirement {
    constructor(value, dungeonIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.dungeonIndex = dungeonIndex;
    }
    getProgress() {
        return Math.min(player.statistics.dungeonsCleared[this.dungeonIndex](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClearGymRequirement extends Requirement {
    constructor(value, gymIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.gymIndex = gymIndex;
    }
    getProgress() {
        return Math.min(player.statistics.gymsDefeated[this.gymIndex](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClickRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.clicks(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DefeatedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.pokemonDefeated(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DiamondRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalDiamonds(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DigDeeperRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.digDeeper(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DigItemsRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.digItems(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class HatchRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.hatchedEggs(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class PokeballRequirement extends Requirement {
    constructor(value, pokeball, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.pokeball = pokeball;
    }
    getProgress() {
        return Math.min(player.statistics.pokeballsBought[this.pokeball](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class RouteKillRequirement extends Requirement {
    constructor(value, route, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.route = route;
    }
    getProgress() {
        return Math.min(player.statistics.routeKills[this.route](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ShinyPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.party.shinyPokemon.length, this.requiredValue);
    }
}
class OakItems {
    constructor(unlockRequirements) {
        this.name = 'Oak Items';
        this.saveKey = 'oakItems';
        this.itemList = [];
        this.unlockRequirements = unlockRequirements;
    }
    canAccess() {
        return App.game.party.caughtPokemon.length > 15;
    }
    initialize() {
        this.itemList = [
            new OakItem(OakItems.OakItem.Magic_Ball, 'Magic Ball', [5, 6, 7, 8, 9, 10], 0, true, 20, 'Gives a bonus to your catchrate', 2),
            new OakItem(OakItems.OakItem.Amulet_Coin, 'Amulet Coin', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, true, 30, 'Gain more coins from battling', 1),
            new OakItem(OakItems.OakItem.Poison_Barb, 'Poison Barb', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, true, 40, 'Clicks do more damage', 3),
            new OakItem(OakItems.OakItem.Exp_Share, 'Exp Share', [1.15, 1.18, 1.21, 1.24, 1.27, 1.30], 1, true, 50, 'Gain more exp from battling', 1),
            new OakItem(OakItems.OakItem.Sprayduck, 'Sprayduck', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, false, 60, 'Makes your berries grow faster', 3),
            new OakItem(OakItems.OakItem.Shiny_Charm, 'Shiny Charm', [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, true, 70, 'Encounter shinies more often', 150),
            new OakItem(OakItems.OakItem.Blaze_Cassette, 'Blaze Cassette', [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, false, 80, 'Hatch eggs faster', 10),
            new OakItem(OakItems.OakItem.Cell_Battery, 'Cell Battery', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, false, 90, 'More passive mining energy regen', 50),
        ];
    }
    calculateBonus(item) {
        const oakItem = this.itemList[item];
        if (oakItem == undefined) {
            console.error('Could not find oakItem', item, 'This could have unintended consequences');
            return 1;
        }
        return oakItem.calculateBonus();
    }
    isUnlocked(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return App.game.party.caughtPokemon.length >= this.itemList[item].unlockReq;
    }
    use(item) {
        if (!this.isUnlocked(item)) {
            return;
        }
        this.itemList[item].use();
    }
    maxActiveCount() {
        for (let i = 0; i < this.unlockRequirements.length; i++) {
            if (App.game.party.caughtPokemon.length < this.unlockRequirements[i]) {
                return i;
            }
        }
        return this.unlockRequirements.length;
    }
    activeCount() {
        let count = 0;
        for (let i = 0; i < this.itemList.length; i++) {
            if (this.itemList[i].isActive) {
                count++;
            }
        }
        return count;
    }
    fromJSON(json) {
        for (const key in json) {
            if (json.hasOwnProperty(key)) {
                this.itemList[OakItems.OakItem[key]].fromJSON(json[key]);
            }
        }
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[OakItems.OakItem[this.itemList[i].name]] = this.itemList[i].toJSON();
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
    isActive(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isActive;
    }
    activate(item) {
        if (!this.isUnlocked(item)) {
            return;
        }
        if (this.maxActiveCount() == 0) {
            return;
        }
        if (this.maxActiveCount() == 1) {
            this.deactivateAll();
            this.itemList[item].isActive = true;
        }
        if (this.activeCount() < this.maxActiveCount()) {
            this.itemList[item].isActive = true;
        }
    }
    deactivateAll() {
        for (let i = 0; i < this.itemList.length; i++) {
            this.itemList[i].isActive = false;
        }
    }
    deactivate(item) {
        this.itemList[item].isActive = false;
    }
}
(function (OakItems) {
    let OakItem;
    (function (OakItem) {
        OakItem[OakItem["Magic_Ball"] = 0] = "Magic_Ball";
        OakItem[OakItem["Amulet_Coin"] = 1] = "Amulet_Coin";
        OakItem[OakItem["Poison_Barb"] = 2] = "Poison_Barb";
        OakItem[OakItem["Exp_Share"] = 3] = "Exp_Share";
        OakItem[OakItem["Sprayduck"] = 4] = "Sprayduck";
        OakItem[OakItem["Shiny_Charm"] = 5] = "Shiny_Charm";
        OakItem[OakItem["Blaze_Cassette"] = 6] = "Blaze_Cassette";
        OakItem[OakItem["Cell_Battery"] = 7] = "Cell_Battery";
    })(OakItem = OakItems.OakItem || (OakItems.OakItem = {}));
})(OakItems || (OakItems = {}));
var BerryType;
(function (BerryType) {
    BerryType[BerryType["None"] = -1] = "None";
    BerryType[BerryType["Cheri"] = 0] = "Cheri";
    BerryType[BerryType["Chesto"] = 1] = "Chesto";
    BerryType[BerryType["Pecha"] = 2] = "Pecha";
    BerryType[BerryType["Rawst"] = 3] = "Rawst";
    BerryType[BerryType["Aspear"] = 4] = "Aspear";
    BerryType[BerryType["Leppa"] = 5] = "Leppa";
    BerryType[BerryType["Oran"] = 6] = "Oran";
    BerryType[BerryType["Sitrus"] = 7] = "Sitrus";
})(BerryType || (BerryType = {}));
///<reference path="../oakItems/OakItems.ts"/>
///<reference path="../farming/BerryType.ts"/>
///<reference path="../pokemons/PokemonType.ts"/>
class Statistics {
    constructor(saved = {}) {
        const observables = [
            'clicks',
            'hatchedEggs',
            'pokemonCaptured',
            'pokemonDefeated',
            'digItems',
            'digDeeper',
            'totalMoney',
            'totalTokens',
            'totalQuestPoints',
            'totalDiamonds',
            'totalFarmPoints',
        ];
        const arrayObservables = [
            'gymsDefeated',
            'dungeonsCleared',
            'pokeballsUsed',
            'pokeballsBought',
            'totalShards',
            'oakItemUses',
            'berriesHarvested',
            'routeKills',
        ];
        for (const prop of observables) {
            this[prop] = ko.observable(saved[prop] || 0);
        }
        for (const array of arrayObservables) {
            this[array] = [...Array(Statistics.arraySizes[array])].map((value, index) => {
                return ko.observable(saved[array] ? saved[array][index] || 0 : 0);
            });
        }
    }
    static getGymIndex(gym) {
        const gyms = GameConstants.RegionGyms.flat();
        return gyms.indexOf(gym);
    }
    static getDungeonIndex(dungeon) {
        const dungeons = GameConstants.RegionDungeons.flat();
        return dungeons.indexOf(dungeon);
    }
}
Statistics.arraySizes = {
    'gymsDefeated': GameConstants.RegionGyms.flat().length,
    'dungeonsCleared': GameConstants.RegionDungeons.flat().length,
    'pokeballsUsed': GameHelper.enumLength(GameConstants.Pokeball) - 1,
    'pokeballsBought': GameHelper.enumLength(GameConstants.Pokeball) - 1,
    'totalShards': GameHelper.enumLength(PokemonType) - 1,
    'oakItemUses': GameHelper.enumLength(OakItems.OakItem),
    'berriesHarvested': GameHelper.enumLength(BerryType) - 1,
    'routeKills': GameConstants.AMOUNT_OF_ROUTES,
};
///<reference path="Requirement.ts"/>
class TokenRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalTokens(), this.requiredValue);
    }
}
class BadgeCaseController {
    static getDisplayableBadges() {
        return Object.keys(BadgeCase.Badge).filter(b => !b.startsWith('Elite') && b != 'None' && BadgeCase.Badge[b] < App.game.badgeCase.badgeAmount);
    }
}
var Currency = GameConstants.Currency;
class Breeding {
    constructor() {
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            'eggList': [ko.observable(null), ko.observable(null), ko.observable(null), ko.observable(null)],
            'eggSlots': 1,
        };
        this.hatchList = {};
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
    }
    initialize() {
        this.hatchList[GameConstants.EggType.Fire] = [
            ['Charmander', 'Vulpix', 'Growlithe', 'Ponyta'],
            ['Cyndaquil', 'Slugma', 'Houndour', 'Magby'],
        ];
        this.hatchList[GameConstants.EggType.Water] = [
            ['Squirtle', 'Lapras', 'Staryu', 'Psyduck'],
            ['Totodile', 'Wooper', 'Marill', 'Qwilfish'],
        ];
        this.hatchList[GameConstants.EggType.Grass] = [
            ['Bulbasaur', 'Oddish', 'Tangela', 'Bellsprout'],
            ['Chikorita', 'Hoppip', 'Sunkern'],
        ];
        this.hatchList[GameConstants.EggType.Fighting] = [
            ['Hitmonlee', 'Hitmonchan', 'Machop', 'Mankey'],
            ['Tyrogue'],
        ];
        this.hatchList[GameConstants.EggType.Electric] = [
            ['Magnemite', 'Pikachu', 'Voltorb', 'Electabuzz'],
            ['Chinchou', 'Mareep', 'Elekid'],
        ];
        this.hatchList[GameConstants.EggType.Dragon] = [
            ['Dratini', 'Dragonair', 'Dragonite'],
            [],
        ];
    }
    update(delta) {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Mystery_egg);
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json['eggSlots'], (_a !== null && _a !== void 0 ? _a : this.defaults.eggSlots));
        if (json['eggList'] == null) {
            this._eggList = this.defaults.eggList;
        }
        else {
            const saveEggList = json['eggList'];
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
    }
    toJSON() {
        const breedingSave = {};
        breedingSave['eggList'] = this.eggList.map(function (egg) {
            return egg() === null ? null : egg().toJSON();
        });
        breedingSave['eggSlots'] = this.eggSlots;
        return breedingSave;
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && this.hasFreeEggSlot();
    }
    hasFreeEggSlot() {
        let counter = 0;
        for (const egg of this._eggList) {
            if (egg() !== null) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    gainEgg(e) {
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]() == null) {
                this._eggList[i](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${GameConstants.EggType[e.type]} Egg`);
        return false;
    }
    gainRandomEgg() {
        return this.gainEgg(this.createRandomEgg());
    }
    progressEggs(amount) {
        amount *= App.game.oakItems.calculateBonus(OakItems.OakItem.Blaze_Cassette);
        amount = Math.round(amount);
        for (const obj of this._eggList) {
            // TODO(@Isha) fix this properly.
            const egg = obj();
            if (egg == null || egg.notified) {
                continue;
            }
            egg.steps(egg.steps() + amount);
            if (App.game.oakItems.isActive(OakItems.OakItem.Shiny_Charm)) {
                egg.shinySteps += amount;
            }
            if (egg.steps() >= egg.totalSteps) {
                if (egg.type == GameConstants.EggType.Pokemon) {
                    Notifier.notify(`${egg.pokemon} is ready to hatch!`, GameConstants.NotificationOption.success);
                }
                else {
                    Notifier.notify('An egg is ready to hatch!', GameConstants.NotificationOption.success);
                }
                egg.notified = true;
            }
        }
    }
    gainPokemonEgg(pokemon) {
        if (!this.hasFreeEggSlot()) {
            Notifier.notify("You don't have any free egg slots", GameConstants.NotificationOption.warning);
            return;
        }
        const egg = this.createEgg(pokemon.name);
        pokemon.breeding = true;
        this.gainEgg(egg);
    }
    hatchPokemonEgg(index) {
        // TODO(@Isha) fix this properly.
        const egg = this._eggList[index]();
        const shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps()));
        const shiny = PokemonFactory.generateShiny(shinyChance);
        for (let i = 0; i < App.game.party.caughtPokemon.length; i++) {
            if (App.game.party.caughtPokemon[i].name == egg.pokemon) {
                const partyPokemon = App.game.party.caughtPokemon[i];
                if (partyPokemon.breeding) {
                    if (partyPokemon.evolutions !== undefined) {
                        partyPokemon.evolutions.forEach(evo => evo instanceof LevelEvolution ? evo.triggered = false : undefined);
                    }
                    partyPokemon.exp = 0;
                    partyPokemon.level = 1;
                    partyPokemon.breeding = false;
                    partyPokemon.level = partyPokemon.calculateLevelFromExp();
                    partyPokemon.attackBonus += GameConstants.BREEDING_ATTACK_BONUS;
                    partyPokemon.attack = partyPokemon.calculateAttack();
                    partyPokemon.checkForLevelEvolution();
                    break;
                }
            }
        }
        if (shiny) {
            Notifier.notify(`✨ You hatched a shiny ${egg.pokemon}! ✨`, GameConstants.NotificationOption.warning);
        }
        else {
            Notifier.notify(`You hatched ${GameHelper.anOrA(egg.pokemon)} ${egg.pokemon}!`, GameConstants.NotificationOption.success);
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(egg.pokemon).id, shiny);
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        const baseForm = this.calculateBaseForm(egg.pokemon);
        if (egg.pokemon != baseForm && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(baseForm).id)) {
            Notifier.notify(`You also found ${GameHelper.anOrA(baseForm)} ${baseForm} nearby!`, GameConstants.NotificationOption.success);
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(baseForm).id, shiny);
        }
        this._eggList[index](null);
        GameHelper.incrementObservable(player.statistics.hatchedEggs);
        App.game.oakItems.use(OakItems.OakItem.Blaze_Cassette);
    }
    createEgg(pokemonName, type = GameConstants.EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonByName(pokemonName);
        return new Egg(this.getSteps(dataPokemon.eggCycles), pokemonName, type);
    }
    createTypedEgg(type) {
        const hatchList = this.hatchList[type];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1);
        let possibleHatches = [];
        hatchable.forEach((pokemon, index) => {
            if (!pokemon.length) {
                return;
            }
            const toAdd = possibleHatches.length || 1;
            for (let i = 0; i < toAdd; i++) {
                possibleHatches.push(pokemon);
            }
        });
        possibleHatches = possibleHatches[Math.floor(Math.random() * possibleHatches.length)];
        const pokemon = possibleHatches[Math.floor(Math.random() * possibleHatches.length)];
        return this.createEgg(pokemon, type);
    }
    createRandomEgg() {
        const type = Math.floor(Math.random() * (Object.keys(this.hatchList).length - 1));
        const egg = this.createTypedEgg(type);
        egg.type = GameConstants.EggType.Mystery;
        return egg;
    }
    createFossilEgg(fossil) {
        const pokemonName = GameConstants.FossilToPokemon[fossil];
        return this.createEgg(pokemonName, GameConstants.EggType.Fossil);
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * 40;
        }
    }
    ;
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonDevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return this.calculateBaseForm(devolution);
        }
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.hasAmount(cost)) {
            App.game.wallet.loseAmount(cost);
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), Currency.questPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    gainEggSlot() {
        this.eggSlots += 1;
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
}
class BreedingController {
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            App.game.gameState = GameConstants.GameState.paused;
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify('You do not have access to that location', GameConstants.NotificationOption.warning);
        }
    }
    static getEggImage(egg) {
        let eggType = GameConstants.EggType[egg.type].toLowerCase();
        if (eggType == 'pokemon') {
            const dataPokemon = PokemonHelper.getPokemonByName(egg.pokemon);
            eggType = String(PokemonType[dataPokemon.type1]).toLowerCase();
        }
        else if (eggType == 'fossil') {
            eggType = GameConstants.PokemonToFossil[egg.pokemon];
        }
        return `assets/images/breeding/egg${eggType}.png`;
    }
}
document.addEventListener('DOMContentLoaded', function () {
    $('#breedingModal').on('hidden.bs.modal', function () {
        MapHelper.returnToMap();
    });
});
class Egg {
    constructor(totalSteps, pokemon, type, steps = 0, shinySteps = 0, notified = false) {
        this.saveKey = 'egg';
        this.defaults = {};
        this.totalSteps = totalSteps;
        this.steps = ko.observable(steps);
        this.shinySteps = shinySteps;
        this.pokemon = pokemon;
        this.type = type;
        this.notified = notified;
        this.progress = ko.computed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            return `${this.steps()} / ${this.totalSteps}`;
        }, this);
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinySteps: this.shinySteps,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json['totalSteps'];
        this.steps = ko.observable(json['steps']);
        this.shinySteps = json['shinySteps'];
        this.pokemon = json['pokemon'];
        this.type = json['type'];
        this.notified = json['boolean'];
        this.progress = ko.computed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
    }
}
class RedeemableCode {
    constructor(name, hash, isRedeemed, rewardFunction) {
        this.name = name;
        this.hash = hash;
        this.isRedeemed = isRedeemed;
        this.rewardFunction = rewardFunction;
    }
    redeem() {
        if (this.isRedeemed) {
            Notifier.notify('You have already redeemed this code', GameConstants.NotificationOption.danger);
            return;
        }
        this.isRedeemed = true;
        this.rewardFunction();
    }
}
class RedeemableCodeController {
    static enterCode() {
        const code = document.getElementById('redeemable-code-input').value;
        App.game.redeemableCodes.enterCode(code);
    }
}
class RedeemableCodes {
    constructor() {
        this.saveKey = 'redeemable-codes';
        this.codeList = [
            new RedeemableCode('farming-quickstart', -83143881, false, function () {
                App.game.wallet.gainFarmPoints(10000);
                App.game.farming.gainBerry(BerryType.Cheri, 100);
                Notifier.notify('You gain 10000 farmpoints and 100 Cheri berries', GameConstants.NotificationOption.success);
            }),
            new RedeemableCode('good-luck', 1538489764, false, function () {
                Notifier.notify('Congrats, you did it. Although you probably already read this text so it can\'t feel very satisfying can it?', GameConstants.NotificationOption.success);
            }),
            new RedeemableCode('route-unlock-kanto', -889017321, false, function () {
                for (let i = 1; i <= 25; i++) {
                    player.statistics.routeKills[i](10);
                }
                Notifier.notify('You have unlocked all routes in Kanto', GameConstants.NotificationOption.success);
            }),
            new RedeemableCode('route-unlock-johto-2', -891649982, false, function () {
                for (let i = 26; i <= 46; i++) {
                    player.statistics.routeKills[i](10);
                }
                Notifier.notify('You have unlocked all routes in Johto', GameConstants.NotificationOption.success);
            }),
        ];
    }
    enterCode(code) {
        const hash = this.hash(code);
        const redeemableCode = this.codeList.find(code => {
            return code.hash === hash;
        });
        if (!redeemableCode) {
            Notifier.notify(`Invalid code ${code}`, GameConstants.NotificationOption.danger);
            return;
        }
        redeemableCode.redeem();
    }
    /**
     * Insecure hash, but should keep some of the nosy people out.
     * @param text
     */
    hash(text) {
        let hash = 0, i, chr;
        if (text.length === 0) {
            return hash;
        }
        for (i = 0; i < text.length; i++) {
            chr = text.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        json.forEach(name => {
            const foundCode = this.codeList.find(code => {
                return code.name === name;
            });
            if (foundCode) {
                foundCode.isRedeemed = true;
            }
        });
    }
    toJSON() {
        return this.codeList.reduce(function (res, code) {
            if (code.isRedeemed) {
                res.push(code.name);
            }
            return res;
        }, []);
    }
}
class DungeonBossPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.baseHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="DungeonBossPokemon.ts"/>
/**
 * Gym class.
 */
class Dungeon {
    constructor(dungeonName, pokemonList, itemList, baseHealth, bossList, tokenCost, badgeReq, itemRoute, level) {
        this.name = ko.observable('');
        this.name = ko.observable(dungeonName);
        this.pokemonList = pokemonList;
        this.itemList = itemList;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.badgeReq = badgeReq;
        this.itemRoute = itemRoute;
        this.level = level;
        this.calculateAllPokemonNames();
    }
    isUnlocked() {
        if (!App.game.badgeCase.hasBadge(this.badgeReq)) {
            Notifier.notify(`You need the ${BadgeCase.Badge[this.badgeReq]} badge to access this dungeon`, GameConstants.NotificationOption.danger);
            return false;
        }
        if (!App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket)) {
            Notifier.notify('You need the Dungeon ticket to access dungeons', GameConstants.NotificationOption.danger);
            return false;
        }
        return true;
    }
    calculateAllPokemonNames() {
        this.allPokemonNames = JSON.parse(JSON.stringify(this.pokemonList));
        for (let i = 0; i < this.bossList.length; i++) {
            this.allPokemonNames.push(this.bossList[i].name);
        }
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
// TODO add 22-25
const dungeonList = {};
// Kanto Dungeons
dungeonList['Viridian Forest'] = new Dungeon('Viridian Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgeotto'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 102, [new DungeonBossPokemon('Pikachu', 510, 7)], 50, BadgeCase.Badge.None, 1, 5);
dungeonList['Digletts Cave'] = new Dungeon('Digletts Cave', ['Diglett'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 1208, [new DungeonBossPokemon('Dugtrio', 6040, 31)], 95, BadgeCase.Badge.Boulder, 2, 22);
dungeonList['Mt. Moon'] = new Dungeon('Mt. Moon', ['Sandshrew', 'Clefairy', 'Zubat', 'Paras', 'Geodude', 'Pidgeotto'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Token_collector], 834, [new DungeonBossPokemon('Kabuto', 4170, 12), new DungeonBossPokemon('Omanyte', 4170, 12)], 75, BadgeCase.Badge.Boulder, 4, 10);
dungeonList['Rock Tunnel'] = new Dungeon('Rock Tunnel', ['Zubat', 'Geodude', 'Machop'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 4117, [new DungeonBossPokemon('Onix', 20585, 17)], 500, BadgeCase.Badge.Cascade, 5, 15);
dungeonList['Power Plant'] = new Dungeon('Power Plant', ['Pikachu', 'Raichu', 'Magnemite', 'Magneton', 'Grimer', 'Muk', 'Electrode'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 13507, [new DungeonBossPokemon('Electabuzz', 67535, 35), new DungeonBossPokemon('Zapdos', 101302, 50)], 1000, BadgeCase.Badge.Cascade, 8, 25);
dungeonList['Pokemon Tower'] = new Dungeon('Pokemon Tower', ['Gastly', 'Haunter', 'Cubone'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7523, [new DungeonBossPokemon('Marowak', 37615, 30)], 750, BadgeCase.Badge.Cascade, 10, 20);
dungeonList['Seafoam Islands'] = new Dungeon('Seafoam Islands', ['Zubat', 'Golbat', 'Psyduck', 'Golduck', 'Slowpoke', 'Slowbro', 'Shellder', 'Krabby', 'Horsea', 'Staryu'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xExp], 17226, [new DungeonBossPokemon('Seel', 86130, 35), new DungeonBossPokemon('Articuno', 129195, 50)], 1250, BadgeCase.Badge.Soul, 15, 30);
dungeonList['Pokemon Mansion'] = new Dungeon('Pokemon Mansion', ['Growlithe', 'Vulpix', 'Grimer', 'Muk', 'Koffing', 'Weezing'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 17760, [new DungeonBossPokemon('Magmar', 88800, 40)], 1500, BadgeCase.Badge.Soul, 16, 35);
dungeonList['Victory Road'] = new Dungeon('Victory Road', ['Zubat', 'Golbat', 'Machop', 'Geodude', 'Graveler', 'Onix', 'Marowak', 'Venomoth'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 24595, [new DungeonBossPokemon('Machoke', 122975, 42), new DungeonBossPokemon('Moltres', 184462, 50)], 2000, BadgeCase.Badge.Earth, 20, 40);
dungeonList['Cerulean Cave'] = new Dungeon('Cerulean Cave', ['Arbok', 'Raichu', 'Sandslash', 'Golbat', 'Parasect', 'Venomoth', 'Kadabra', 'Magneton', 'Dodrio', 'Hypno', 'Ditto', 'Wigglytuff', 'Electrode', 'Marowak', 'Chansey'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 28735, [new DungeonBossPokemon('Rhydon', 143675, 60), new DungeonBossPokemon('Mewtwo', 215512, 70)], 2500, BadgeCase.Badge.Elite_KantoChampion, 20, 55);
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', ['Rattata', 'Gastly', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 28735, [new DungeonBossPokemon('Bellsprout', 2000, 10)], 2500, BadgeCase.Badge.Elite_KantoChampion, 31, 5);
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', ['Natu', 'Wooper', 'Quagsire', 'Smeargle', 'Magikarp', 'Poliwag', 'Poliwhirl'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 600, [new DungeonBossPokemon('Unown', 3000, 14)], 3000, BadgeCase.Badge.Zephyr, 32, 7);
dungeonList['Union Cave'] = new Dungeon('Union Cave', ['Rattata', 'Sandshrew', 'Zubat', 'Geodude', 'Onix', 'Goldeen', 'Magikarp'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 600, [new DungeonBossPokemon('Wooper', 3000, 14)], 3000, BadgeCase.Badge.Zephyr, 32, 7);
dungeonList['Slowpoke Well'] = new Dungeon('Slowpoke Well', ['Zubat', 'Slowpoke'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 900, [new DungeonBossPokemon('Slowbro', 4000, 20)], 3500, BadgeCase.Badge.Zephyr, 33, 12);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Oddish', 'Paras', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 1200, [new DungeonBossPokemon('Noctowl', 5000, 30), new DungeonBossPokemon('Beedrill', 5000, 30), new DungeonBossPokemon('Butterfree', 5000, 30), new DungeonBossPokemon('Celebi', 300000, 50)], 4000, BadgeCase.Badge.Hive, 34, 15);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Rattata', 'Zubat', 'Koffing', 'Raticate'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 1500, [new DungeonBossPokemon('Golbat', 6000, 35), new DungeonBossPokemon('Weezing', 6000, 35), new DungeonBossPokemon('Shuckle', 300000, 50)], 4500, BadgeCase.Badge.Fog, 37, 20);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Rattata', 'Gastly'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1500, [new DungeonBossPokemon('Raticate', 6000, 35), new DungeonBossPokemon('Haunter', 6000, 35), new DungeonBossPokemon('Ho-Oh', 300000, 70)], 4500, BadgeCase.Badge.Fog, 37, 20);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Zubat', 'Golbat', 'Seel', 'Krabby', 'Horsea'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xExp], 1800, [new DungeonBossPokemon('Dewgong', 7000, 40), new DungeonBossPokemon('Kingler', 7000, 40), new DungeonBossPokemon('Lugia', 300000, 70)], 5000, BadgeCase.Badge.Storm, 41, 25);
dungeonList['Mt Mortar'] = new Dungeon('Mt Mortar', ['Rattata', 'Zubat', 'Geodude', 'Marill', 'Raticate', 'Golbat', 'Graveler'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 2100, [new DungeonBossPokemon('Tyrogue', 8000, 45)], 5500, BadgeCase.Badge.Storm, 42, 30);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Zubat', 'Jynx', 'Swinub'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 2400, [new DungeonBossPokemon('Delibird', 9000, 50)], 6000, BadgeCase.Badge.Glacier, 44, 32);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Zubat', 'Geodude', 'Golbat', 'Graveler', 'Wobbuffet'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3000, [new DungeonBossPokemon('Dunsparce', 10000, 55)], 6500, BadgeCase.Badge.Rising, 45, 35);
dungeonList['Mt Silver'] = new Dungeon('Mt Silver', ['Ponyta', 'Doduo', 'Tangela', 'Sneasel', 'Ursaring', 'Donphan', 'Teddiursa', 'Phanpy', 'Quagsire', 'Misdreavus'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 3500, [new DungeonBossPokemon('Larvitar', 12000, 60)], 10000, BadgeCase.Badge.Elite_Karen, 28, 50);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', ['Poochyena', 'Zigzagoon', 'Wurmple', 'Silcoon', 'Cascoon', 'Taillow', 'Shroomish'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Slakoth', 100000, 10)], 12000, null, 101, 5);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', ['Whismur'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Whismur', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Zubat', 'Abra', 'Geodude', 'Makuhita', 'Aron', 'Sableye'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Mawile', 100000, 20), new DungeonBossPokemon('Nosepass', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Machop', 'Grimer', 'Koffing', 'Slugma', 'Numel'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Torkoal', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Mt. Chimney'] = new Dungeon('Mt. Chimney', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Sea Mauville'] = new Dungeon('Sea Mauville', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', ['Unown'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 4000, [new DungeonBossPokemon('Unown', 100000, 20)], 12000, BadgeCase.Badge.Stone, 101, 5);
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(true);
        }
        App.game.wallet.gainMoney(this.enemyPokemon().money);
        App.game.party.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        player.gainShards(this.enemyPokemon().type1, this.enemyPokemon().shardReward);
        player.gainShards(this.enemyPokemon().type2, this.enemyPokemon().shardReward);
        player.defeatedAmount[this.enemyPokemon().id](player.defeatedAmount[this.enemyPokemon().id]() + 1);
        App.game.breeding.progressEggs(Math.floor(Math.sqrt(DungeonRunner.dungeon.itemRoute)));
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        const isShiny = this.enemyPokemon().shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(this.enemyPokemon().id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(pokeBall);
            setTimeout(() => {
                this.attemptCatch();
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonPokemon(DungeonRunner.dungeon.pokemonList, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeon.level));
        DungeonRunner.fighting(true);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonBoss(DungeonRunner.dungeon.bossList, DungeonRunner.chestsOpened));
    }
}
class DungeonMap {
    constructor(size) {
        this.size = size;
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(size / 2), size - 1));
        // Move the boss if it spawns on the player.
        if (this.currentTile().type() == GameConstants.DungeonTile.boss) {
            this.currentTile().type(GameConstants.DungeonTile.empty);
            const newX = GameConstants.randomIntBetween(0, size - 2);
            const newY = GameConstants.randomIntBetween(0, size - 2);
            this.board()[newY][newX].type(GameConstants.DungeonTile.boss);
            this.board()[newY][newX].calculateCssClass();
        }
        this.currentTile().isVisible = true;
        this.currentTile().type(GameConstants.DungeonTile.empty);
        this.currentTile().hasPlayer = true;
        this.currentTile().calculateCssClass();
    }
    moveToCoordinates(x, y) {
        this.moveToTile(new Point(x, y));
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccesToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.currentTile().calculateCssClass();
            this.playerPosition(point);
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().calculateCssClass();
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
        }
    }
    showChestTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                if (this.board()[i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[i][j].isVisible = true;
                    this.board()[i][j].calculateCssClass();
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                this.board()[i][j].isVisible = true;
                this.board()[i][j].calculateCssClass();
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().y][this.playerPosition().x];
    }
    hasAccesToTile(point) {
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        if (point.x < 0 || point.x >= this.size || point.y < 0 || point.y >= this.size) {
            return false;
        }
        if (point.y < this.size - 1 && this.board()[point.y + 1][point.x].isVisible) {
            return true;
        }
        if (point.y > 0 && this.board()[point.y - 1][point.x].isVisible) {
            return true;
        }
        if (point.x < this.size - 1 && this.board()[point.y][point.x + 1].isVisible) {
            return true;
        }
        if (point.x > 0 && this.board()[point.y][point.x - 1].isVisible) {
            return true;
        }
        return false;
    }
    generateMap() {
        // Fill mapList with required Tiles
        const mapList = [];
        mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
        for (let i = 0; i < this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
        }
        for (let i = 0; i < this.size * 2 + 3; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
        }
        for (let i = mapList.length; i < this.size * this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
        }
        // Shuffle the tiles randomly
        this.shuffle(mapList);
        // Create a 2d array
        const map = [];
        while (mapList.length) {
            map.push(mapList.splice(0, this.size));
        }
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify("You don't have enough dungeon tokens", GameConstants.NotificationOption.danger);
            return false;
        }
        App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME);
        DungeonRunner.map = new DungeonMap(GameConstants.DUNGEON_SIZE);
        DungeonRunner.pokemonDefeated = 0;
        DungeonRunner.chestsOpened = 0;
        DungeonRunner.loot = [];
        DungeonRunner.currentTileType = ko.computed(function () {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(false);
        DungeonRunner.dungeonFinished(false);
        App.game.gameState = GameConstants.GameState.dungeon;
    }
    static tick() {
        if (this.timeLeft() <= 0) {
            if (this.defeatedBoss()) {
                this.dungeonWon();
            }
            else {
                this.dungeonLost();
            }
        }
        this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.DUNGEON_TIME * 100));
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        DungeonRunner.chestsOpened++;
        const random = GameConstants.randomIntBetween(0, DungeonRunner.dungeon.itemList.length - 1);
        const input = GameConstants.BattleItemType[DungeonRunner.dungeon.itemList[random]];
        let amount = 1;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            if (Math.random() < 0.5) {
                amount += 1;
            }
        }
        Notifier.notify(`Found ${amount} ${input} in a dungeon chest`, GameConstants.NotificationOption.success);
        player.gainItem(input, amount);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_CHEST_SHOW) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_MAP_SHOW) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            MapHelper.moveToTown(DungeonRunner.dungeon.name());
            Notifier.notify('You could not complete the dungeon in time', GameConstants.NotificationOption.danger);
        }
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            GameHelper.incrementObservable(player.statistics.dungeonsCleared[Statistics.getDungeonIndex(DungeonRunner.dungeon.name())]);
            MapHelper.moveToTown(DungeonRunner.dungeon.name());
            // TODO award loot with a special screen
            Notifier.notify('You have successfully completed the dungeon', GameConstants.NotificationOption.success);
        }
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allPokemonNames;
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static hasEnoughTokens() {
        return App.game.wallet.hasAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(false);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.computed(function () {
    return (Math.ceil(DungeonRunner.timeLeft() / 10) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this.isVisible = false;
        this.hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        this.cssClass(`tile tile-${GameConstants.DungeonTile[this.type()]}`);
    }
}
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class EffectEngineRunner {
    static tick() {
        this.counter = 0;
        const timeToReduce = 1;
        for (const itemName in GameConstants.BattleItemType) {
            player.effectList[itemName](Math.max(0, player.effectList[itemName]() - timeToReduce));
            if (player.effectList[itemName]() == 5) {
                Notifier.notify(`The ${itemName}s effect is about to wear off!`, GameConstants.NotificationOption.warning);
            }
        }
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static addEffect(itemName) {
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + GameConstants.ITEM_USE_TIME));
    }
    static formattedTimeLeft(itemName) {
        return ko.computed(function () {
            const times = GameConstants.formatTime(player.effectList[itemName]()).split(':');
            if (+times[0] > 0) {
                return '60:00+';
            }
            times.shift();
            return times.join(':');
        }, this);
    }
    static getMoneyMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Lucky_incense)() ? 1.5 : 1;
    }
    static getDungeonTokenMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Token_collector)() ? 1.5 : 1;
    }
    static isActive(itemName) {
        return ko.computed(function () {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        }, this);
    }
}
EffectEngineRunner.counter = 0;
///<reference path="./BerryType.ts"/>
class Berry {
    constructor(type, harvestTime, moneyValue, farmValue) {
        this.type = type;
        this.harvestTime = harvestTime;
        this.moneyValue = moneyValue;
        this.farmValue = farmValue;
    }
}
class FarmController {
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify(`You need the ${GameConstants.humanifyString(KeyItems.KeyItem[KeyItems.KeyItem.Wailmer_pail])} to access this location`, GameConstants.NotificationOption.warning);
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.stage() <= 1) {
            return 'assets/images/farm/AllTreeSeedIII.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}III.png`;
    }
    static getTooltipLabel(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.timeLeft > 0) {
            return plot.formattedTimeLeft();
        }
        return 'Ready';
    }
}
FarmController.selectedBerry = BerryType.Cheri;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#farmModal').on('show.bs.modal', function () {
        const seedList = $('#seedList');
        seedList.children().get(FarmController.selectedBerry).className += ' active';
        seedList.find('li').click(function () {
            $(this).parent().children().removeClass('active');
            $(this).addClass('active');
        });
    });
    $('#farmModal').on('hidden.bs.modal', function () {
        if (player.route() == 14) {
            App.game.gameState = GameConstants.GameState.fighting;
        }
        else {
            MapHelper.moveToRoute(14, GameConstants.Region.kanto);
        }
    });
});
class Farming {
    constructor() {
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = {};
        this.AMOUNT_OF_BERRIES = 8;
        this.AMOUNT_OF_PLOTS = 25;
        this.defaults = {
            berryList: Array(this.AMOUNT_OF_BERRIES).fill(0),
            plotList: new Array(this.AMOUNT_OF_PLOTS).fill(null).map(function (value, index) {
                return new Plot(index === 0, false, BerryType.None, 0);
            }),
        };
        this.berryList = new ArrayOfObservables(this.defaults.berryList);
        this.plotList = new ArrayOfObservables(this.defaults.plotList);
    }
    initialize() {
        this.berryData[BerryType.Cheri] = new Berry(BerryType.Cheri, 30, 100, 6);
        this.berryData[BerryType.Chesto] = new Berry(BerryType.Chesto, 45, 150, 8);
        this.berryData[BerryType.Pecha] = new Berry(BerryType.Pecha, 60, 180, 10);
        this.berryData[BerryType.Rawst] = new Berry(BerryType.Rawst, 90, 240, 14);
        this.berryData[BerryType.Aspear] = new Berry(BerryType.Aspear, 120, 290, 18);
        this.berryData[BerryType.Leppa] = new Berry(BerryType.Leppa, 240, 460, 30);
        this.berryData[BerryType.Oran] = new Berry(BerryType.Oran, 300, 530, 35);
        this.berryData[BerryType.Sitrus] = new Berry(BerryType.Sitrus, 600, 1000, 60);
    }
    update(delta) {
        const timeToReduce = delta * App.game.oakItems.calculateBonus(OakItems.OakItem.Sprayduck);
        this.plotList.forEach(plot => {
            plot.reduceTime(timeToReduce);
        });
    }
    unlockPlot() {
        if (this.canBuyPlot()) {
            App.game.wallet.loseAmount(this.calculatePlotPrice());
            this.plotList[this.unlockedPlotCount()].isUnlocked = true;
        }
    }
    allPlotsUnlocked() {
        return this.plotList[this.plotList.length - 1].isUnlocked;
    }
    canBuyPlot() {
        return !this.allPlotsUnlocked() && App.game.wallet.hasAmount(this.calculatePlotPrice());
    }
    calculatePlotPrice() {
        if (this.allPlotsUnlocked()) {
            return new Amount(Infinity, GameConstants.Currency.farmPoint);
        }
        const plotCount = this.unlockedPlotCount();
        return new Amount(10 * Math.floor(Math.pow(plotCount, 2)), GameConstants.Currency.farmPoint);
    }
    unlockedPlotCount() {
        return App.game.farming.plotList.filter(plot => plot.isUnlocked).length;
    }
    plant(index, berry) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry)) {
            return;
        }
        this.berryList[berry] -= 1;
        plot.berry = berry;
        plot.timeLeft = this.berryData[berry].harvestTime;
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry);
        });
    }
    /**
     * Harvest a plot at the given index, returns the amount of money gained from the harvest.
     * @param index The index of the plot to harvest
     * @param suppressNotification Suppress the notification of the amount of money gained
     */
    harvest(index, suppressNotification = false) {
        const plot = this.plotList[index];
        if (plot.berry === BerryType.None || plot.timeLeft > 0) {
            return 0;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const money = App.game.wallet.gainMoney(this.berryData[plot.berry].moneyValue);
        const amount = GameConstants.randomIntBetween(2, 3);
        GameHelper.incrementObservable(player.statistics.berriesHarvested[plot.berry], amount);
        this.gainBerry(plot.berry, amount);
        if (!suppressNotification) {
            Notifier.notify(`You earned ${money} money from the harvest!`, GameConstants.NotificationOption.success);
        }
        plot.berry = BerryType.None;
        App.game.oakItems.use(OakItems.OakItem.Sprayduck);
        return money;
    }
    /**
     * Try to harvest all plots, suppresses the individual notifications
     */
    harvestAll() {
        let total = 0;
        this.plotList.forEach((plot, index) => {
            total += this.harvest(index, true);
        });
        if (total > 0) {
            Notifier.notify(`You earned ${total} money from the harvest!`, GameConstants.NotificationOption.success);
        }
    }
    gainRandomBerry(amount = 1) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        Notifier.notify(`You got a ${BerryType[berry]} berry!`, GameConstants.NotificationOption.success);
        this.gainBerry(berry, amount);
    }
    gainBerry(berry, amount = 1) {
        this.berryList[berry] += Math.floor(amount);
    }
    hasBerry(berry) {
        return this.berryList[berry] > 0;
    }
    canAccess() {
        return MapHelper.accessToRoute(14, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Wailmer_pail);
    }
    toJSON() {
        return {
            berryList: this.berryList.map(x => x),
            plotList: this.plotList.map(plot => plot.toJSON()),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json['berryList'];
        if (savedBerries == null) {
            this.berryList = new ArrayOfObservables(this.defaults.berryList);
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index] = value;
            });
        }
        const savedPlots = json['plotList'];
        if (savedPlots == null) {
            this.plotList = new ArrayOfObservables(this.defaults.plotList);
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, false, BerryType.None, 0);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
    }
}
class Plot {
    constructor(isUnlocked, boosted, berry, timeLeft) {
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            boosted: false,
            berry: BerryType.None,
            timeLeft: 0,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._boosted = ko.observable(boosted);
        this._berry = ko.observable(berry);
        this._timeLeft = ko.observable(timeLeft);
        this.formattedTimeLeft = ko.pureComputed(function () {
            return GameConstants.formatTime(Math.ceil(this.timeLeft) / App.game.oakItems.calculateBonus(OakItems.OakItem.Sprayduck));
        }, this);
        this.isEmpty = ko.pureComputed(function () {
            return this.berry == BerryType.None;
        }, this);
        this.stage = ko.pureComputed(function () {
            if (this.berry === BerryType.None) {
                return 1;
            }
            return 4 - Math.ceil(4 * this.timeLeft / App.game.farming.berryData[this.berry].harvestTime);
        }, this);
    }
    reduceTime(seconds) {
        this.timeLeft = Math.max(0, this.timeLeft - seconds);
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json['isUnlocked'], (_a !== null && _a !== void 0 ? _a : this.defaults.isUnlocked));
        this.boosted = (_b = json['boosted'], (_b !== null && _b !== void 0 ? _b : this.defaults.boosted));
        this.berry = (_c = json['berry'], (_c !== null && _c !== void 0 ? _c : this.defaults.berry));
        this.timeLeft = (_d = json['timeLeft'], (_d !== null && _d !== void 0 ? _d : this.defaults.timeLeft));
    }
    toJSON() {
        return {
            isUnlocked: this.isUnlocked,
            boosted: this.boosted,
            berry: this.berry,
            timeLeft: this.timeLeft,
        };
    }
    // Knockout getters/setters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get boosted() {
        return this._boosted();
    }
    set boosted(value) {
        this._boosted(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get timeLeft() {
        return this._timeLeft();
    }
    set timeLeft(value) {
        this._timeLeft(value);
    }
}
var PlotStage;
(function (PlotStage) {
    PlotStage[PlotStage["Seed"] = 0] = "Seed";
    PlotStage[PlotStage["Sprout"] = 1] = "Sprout";
    PlotStage[PlotStage["Taller"] = 2] = "Taller";
    PlotStage[PlotStage["Bloom"] = 3] = "Bloom";
    PlotStage[PlotStage["Berry"] = 4] = "Berry";
})(PlotStage || (PlotStage = {}));
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
/**
 * Data list that contains all gymLeaders, accessible by townName.
 */
const gymList = {};
/**
 * Gym class.
 */
class Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage) {
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.badgeReq = badgeReq;
        this.defeatMessage = rewardMessage;
    }
    static isUnlocked(gym) {
        return App.game.badgeCase.hasBadge(gym.badgeReq);
    }
    static calculateCssClass(gym) {
        return ko.computed(function () {
            if (App.game.badgeCase.hasBadge(gym.badgeReward)) {
                return 'btn btn-success';
            }
            return 'btn btn-secondary';
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in gymList) {
            const gym = gymList[item];
            if (BadgeCase.Badge[gym.badgeReward] == BadgeCase.Badge[BadgeCase.Badge[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Brock';
    }
}
//TODO add all rewardMessages
// Kanto Gyms
gymList['Pewter City'] = new Gym('Brock', 'Pewter City', [
    new GymPokemon('Geodude', 770, 12),
    new GymPokemon('Onix', 1554, 14),
], BadgeCase.Badge.Boulder, 250, BadgeCase.Badge.None, 'I took you for granted, and so I lost. As proof of your victory, I confer on you this...the official Pokémon League Boulder Badge.');
gymList['Cerulean City'] = new Gym('Misty', 'Cerulean City', [
    new GymPokemon('Staryu', 4000, 18),
    new GymPokemon('Starmie', 6800, 21),
], BadgeCase.Badge.Cascade, 500, BadgeCase.Badge.Boulder, "Wow! You're too much, all right! You can have the Cascade Badge to show that you beat me.");
gymList['Vermillion City'] = new Gym('Lt. Surge', 'Vermillion City', [
    new GymPokemon('Voltorb', 10780, 21),
    new GymPokemon('Pikachu', 13540, 18),
    new GymPokemon('Raichu', 15675, 24),
], BadgeCase.Badge.Thunder, 1000, BadgeCase.Badge.Cascade, "Now that's a shocker! You're the real deal, kid! Fine, then, take the Thunder Badge!");
gymList['Celadon City'] = new Gym('Erika', 'Celadon City', [
    new GymPokemon('Victreebel', 28810, 29),
    new GymPokemon('Tangela', 30340, 24),
    new GymPokemon('Vileplume', 36400, 29),
], BadgeCase.Badge.Rainbow, 1500, BadgeCase.Badge.Thunder, 'Oh! I concede defeat. You are remarkably strong. I must confer on you the Rainbow Badge.');
gymList['Saffron City'] = new Gym('Sabrina', 'Saffron City', [
    new GymPokemon('Kadabra', 23040, 38),
    new GymPokemon('Mr. Mime', 25600, 37),
    new GymPokemon('Venomoth', 28400, 38),
    new GymPokemon('Alakazam', 35380, 43),
], BadgeCase.Badge.Marsh, 2500, BadgeCase.Badge.Rainbow, "This loss shocks me! But a loss is a loss. I admit I didn't work hard enough to win. You earned the Marsh Badge.");
gymList['Fuchsia City'] = new Gym('Koga', 'Fuchsia City', [
    new GymPokemon('Koffing', 30780, 38),
    new GymPokemon('Muk', 32460, 37),
    new GymPokemon('Koffing', 36540, 38),
    new GymPokemon('Weezing', 37430, 43),
], BadgeCase.Badge.Soul, 3500, BadgeCase.Badge.Marsh, 'Humph! You have proven your worth! Here! Take the Soul Badge!');
gymList['Cinnabar Island'] = new Gym('Blaine', 'Cinnabar Island', [
    new GymPokemon('Growlithe', 37430, 42),
    new GymPokemon('Ponyta', 42340, 40),
    new GymPokemon('Rapidash', 45230, 42),
    new GymPokemon('Arcanine', 50290, 47),
], BadgeCase.Badge.Volcano, 5000, BadgeCase.Badge.Soul, 'I have burned down to nothing! Not even ashes remain! You have earned the Volcano Badge.');
gymList['Viridian City'] = new Gym('Giovanni', 'Viridian City', [
    new GymPokemon('Rhyhorn', 45230, 45),
    new GymPokemon('Dugtrio', 47530, 42),
    new GymPokemon('Nidoqueen', 48740, 44),
    new GymPokemon('Nidoking', 48350, 45),
    new GymPokemon('Rhydon', 55000, 50),
], BadgeCase.Badge.Earth, 6000, BadgeCase.Badge.Volcano, 'Ha! That was a truly intense fight. You have won! As proof, here is the Earth Badge!');
// Kanto Elite 4
gymList['Elite Lorelei'] = new Gym('Lorelei', 'Elite Lorelei', [
    new GymPokemon('Dewgong', 45330, 52),
    new GymPokemon('Cloyster', 48300, 51),
    new GymPokemon('Slowbro', 52000, 52),
    new GymPokemon('Jynx', 57000, 54),
    new GymPokemon('Lapras', 60250, 54),
], BadgeCase.Badge.Elite_Lorelei, 7500, BadgeCase.Badge.Earth, "...Things shouldn't be this way!");
gymList['Elite Bruno'] = new Gym('Bruno', 'Elite Bruno', [
    new GymPokemon('Onix', 45330, 51),
    new GymPokemon('Hitmonchan', 48300, 53),
    new GymPokemon('Hitmonlee', 52000, 53),
    new GymPokemon('Onix', 57000, 54),
    new GymPokemon('Machamp', 60250, 56),
], BadgeCase.Badge.Elite_Bruno, 7500, BadgeCase.Badge.Elite_Lorelei, 'Why? How could I lose?');
gymList['Elite Agatha'] = new Gym('Agatha', 'Elite Agatha', [
    new GymPokemon('Gengar', 45330, 54),
    new GymPokemon('Golbat', 48300, 54),
    new GymPokemon('Haunter', 52000, 53),
    new GymPokemon('Arbok', 57000, 56),
    new GymPokemon('Gengar', 60250, 58),
], BadgeCase.Badge.Elite_Agatha, 7500, BadgeCase.Badge.Elite_Bruno, "Oh, my! You're something special, child!");
gymList['Elite Lance'] = new Gym('Lance', 'Elite Lance', [
    new GymPokemon('Gyarados', 48300, 56),
    new GymPokemon('Dragonair', 52000, 54),
    new GymPokemon('Dragonair', 57000, 54),
    new GymPokemon('Aerodactyl', 60250, 58),
    new GymPokemon('Dragonite', 66000, 60),
], BadgeCase.Badge.Elite_Lance, 7500, BadgeCase.Badge.Elite_Agatha, 'That’s it! I hate to admit it, but you are a Pokémon master!');
//TODO make champion Gym
//Johto Gyms
gymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Pidgey', 38000, 9),
    new GymPokemon('Pidgeotto', 42000, 13),
], BadgeCase.Badge.Zephyr, 500, BadgeCase.Badge.Elite_Lance, "...For pity's sake! My dad's cherished bird Pokémon... But a defeat is a defeat. All right. Take this official Pokémon League Badge. This one is the Zephyr Badge.");
gymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Metapod', 33000, 15),
    new GymPokemon('Kakuna', 37500, 15),
    new GymPokemon('Scyther', 39000, 17),
], BadgeCase.Badge.Hive, 500, BadgeCase.Badge.Zephyr, "Whoa, amazing! You're an expert on Pokémon! My research isn't complete yet. OK, you win. Take this Hive Badge.");
gymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Clefairy', 50000, 17),
    new GymPokemon('Miltank', 80000, 19),
], BadgeCase.Badge.Plain, 500, BadgeCase.Badge.Hive, "...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here's the Plain Badge.");
gymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Gastly', 37000, 21),
    new GymPokemon('Haunter', 38000, 21),
    new GymPokemon('Haunter', 40000, 23),
    new GymPokemon('Gengar', 42000, 25),
], BadgeCase.Badge.Fog, 500, BadgeCase.Badge.Plain, 'I see... Your journey has taken you to far-away places. And you have witnessed much more than me. I envy you for that... Here is the Fog Badge..');
gymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Primeape', 87000, 29),
    new GymPokemon('Poliwrath', 93000, 31),
], BadgeCase.Badge.Storm, 500, BadgeCase.Badge.Fog, "Here is the Storm Badge. Wahahah! I enjoyed battling you! But a loss is a loss! From now on, I'm going to train 24 hours a day!");
gymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Magnemite', 67000, 30),
    new GymPokemon('Magnemite', 68000, 30),
    new GymPokemon('Steelix', 72000, 35),
], BadgeCase.Badge.Mineral, 500, BadgeCase.Badge.Storm, '...You are a better Trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Mineral Badge.');
gymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Seel', 70000, 30),
    new GymPokemon('Dewgong', 72500, 32),
    new GymPokemon('Piloswine', 76000, 34),
], BadgeCase.Badge.Glacier, 500, BadgeCase.Badge.Mineral, "I am impressed by your prowess. With your strong will, I know you will overcome all life's obstacles. You are worthy of this Glacier Badge!");
gymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Dragonair', 65000, 38),
    new GymPokemon('Dragonair', 65000, 38),
    new GymPokemon('Gyarados', 78000, 38),
    new GymPokemon('Kingdra', 80000, 41),
], BadgeCase.Badge.Rising, 500, BadgeCase.Badge.Glacier, 'Here, this is the Rising Badge... Hurry up! Take it!');
//Johto Elite 4
gymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Xatu', 45330, 40),
    new GymPokemon('Jynx', 48300, 41),
    new GymPokemon('Exeggutor', 52000, 41),
    new GymPokemon('Slowbro', 57000, 41),
    new GymPokemon('Xatu', 60250, 42),
], BadgeCase.Badge.Elite_Will, 7500, BadgeCase.Badge.Rising, "Even though I was defeated, I won't change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.");
gymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Ariados', 45330, 40),
    new GymPokemon('Venomoth', 48300, 41),
    new GymPokemon('Forretress', 52000, 43),
    new GymPokemon('Muk', 57000, 42),
    new GymPokemon('Crobat', 60250, 44),
], BadgeCase.Badge.Elite_Koga, 7500, BadgeCase.Badge.Elite_Will, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!');
gymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Hitmontop', 45330, 42),
    new GymPokemon('Hitmonlee', 48300, 42),
    new GymPokemon('Hitmonchan', 52000, 42),
    new GymPokemon('Onix', 57000, 43),
    new GymPokemon('Machamp', 60250, 46),
], BadgeCase.Badge.Elite_Bruno2, 7500, BadgeCase.Badge.Elite_Koga, 'Having lost, I have no right to say anything… Go face your next challenge!');
gymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Umbreon', 48300, 42),
    new GymPokemon('Vileplume', 52000, 42),
    new GymPokemon('Gengar', 57000, 45),
    new GymPokemon('Murkrow', 60250, 44),
    new GymPokemon('Houndoom', 66000, 47),
], BadgeCase.Badge.Elite_Karen, 7500, BadgeCase.Badge.Elite_Bruno2, "Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what's important. Go on — — the Champion is waiting.");
gymList['Champion Lance'] = new Gym('Lance2', 'Champion Lance', [
    new GymPokemon('Gyarados', 58300, 44),
    new GymPokemon('Dragonite', 62000, 49),
    new GymPokemon('Dragonite', 64000, 49),
    new GymPokemon('Aerodactyl', 60250, 48),
    new GymPokemon('Dragonite', 70000, 50),
], BadgeCase.Badge.Elite_JohtoChampion, 7500, BadgeCase.Badge.Elite_Karen, "…It's over. But it's an odd feeling. I’m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!");
// Hoenn Gyms
gymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Geodude', 100000, 14),
    new GymPokemon('Nosepass', 100000, 15),
], BadgeCase.Badge.Stone, 10000, BadgeCase.Badge.Elite_JohtoChampion, 'So… I lost… It seems that I still have much more to learn… I understand.');
gymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Machop', 100000, 17),
    new GymPokemon('Makuhita', 100000, 18),
], BadgeCase.Badge.Knuckle, 10000, BadgeCase.Badge.Stone, "Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you've got me. Take this Gym Badge!");
gymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Magnemite', 100000, 22),
    new GymPokemon('Voltorb', 100000, 20),
    new GymPokemon('Magneton', 100000, 23),
], BadgeCase.Badge.Dynamo, 10000, BadgeCase.Badge.Knuckle, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!');
gymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Slugma', 100000, 26),
    new GymPokemon('Slugma', 100000, 26),
    new GymPokemon('Torkoal', 100000, 28),
], BadgeCase.Badge.Heat, 10000, BadgeCase.Badge.Dynamo, "Oh... I guess I was trying too hard... I... I've only recently become a Gym Leader. I tried too hard to be someone I'm not. I have to do things my natural way. If I don't, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.");
gymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Slaking', 100000, 28),
    new GymPokemon('Vigoroth', 100000, 30),
    new GymPokemon('Slaking', 100000, 31),
], BadgeCase.Badge.Balance, 10000, BadgeCase.Badge.Heat, "… I… I can't… I can't believe it. I lost to you? But, rules are rules! Here, take this.");
gymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Swellow', 100000, 31),
    new GymPokemon('Pelipper', 100000, 30),
    new GymPokemon('Skarmory', 100000, 32),
    new GymPokemon('Altaria', 100000, 33),
], BadgeCase.Badge.Feather, 10000, BadgeCase.Badge.Balance, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.');
gymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Lunatone', 100000, 42),
    new GymPokemon('Solrock', 100000, 42),
], BadgeCase.Badge.Mind, 10000, BadgeCase.Badge.Feather, "What? Our combination... Was shattered! It can't be helped. You've won... So, in recognition, take this Gym Badge.");
gymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Luvdisc', 100000, 41),
    new GymPokemon('Whiscash', 100000, 41),
    new GymPokemon('Sealeo', 100000, 43),
    new GymPokemon('Crawdaunt', 100000, 43),
    new GymPokemon('Kingdra', 100000, 46),
], BadgeCase.Badge.Rain, 10000, BadgeCase.Badge.Mind, 'I realize now your authenticity and magnificence as a Pokémon Trainer. I find much joy in having met you and your Pokémon. You have proven yourself worthy of the Rain Badge. Accept it. Having that Badge assures you full obedience of all your Pokémon to every command you make.');
// Hoenn Elite 4
gymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Mightyena', 100000, 46),
    new GymPokemon('Cacturne', 100000, 46),
    new GymPokemon('Shiftry', 100000, 48),
    new GymPokemon('Sharpedo', 100000, 48),
    new GymPokemon('Absol', 100000, 49),
], BadgeCase.Badge.Elite_Sidney, 10000, BadgeCase.Badge.Rain, "Well, how do you like that? I lost! Eh, it was fun, so it doesn't matter.");
gymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Dusclops', 100000, 48),
    new GymPokemon('Banette', 100000, 49),
    new GymPokemon('Banette', 100000, 49),
    new GymPokemon('Sableye', 100000, 50),
    new GymPokemon('Dusclops', 100000, 51),
], BadgeCase.Badge.Elite_Phoebe, 10000, BadgeCase.Badge.Elite_Sidney, "Oh, darn. I've gone and lost.");
gymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Glalie', 100000, 50),
    new GymPokemon('Sealeo', 100000, 50),
    new GymPokemon('Glalie', 100000, 52),
    new GymPokemon('Sealeo', 100000, 52),
    new GymPokemon('Walrein', 100000, 53),
], BadgeCase.Badge.Elite_Glacia, 10000, BadgeCase.Badge.Elite_Phoebe, "You and your Pokémon... How hot your spirits burn! The all-consuming heat overwhelms. It's no surprise that my icy skills failed to harm you.");
gymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Shelgon', 100000, 52),
    new GymPokemon('Altaria', 100000, 54),
    new GymPokemon('Flygon', 100000, 53),
    new GymPokemon('Flygon', 100000, 53),
    new GymPokemon('Salamence', 100000, 55),
], BadgeCase.Badge.Elite_Drake, 10000, BadgeCase.Badge.Elite_Glacia, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!');
gymList['Champion Wallace'] = new Gym('Wallace', 'Champion Wallace', [
    new GymPokemon('Wailord', 100000, 57),
    new GymPokemon('Tentacruel', 100000, 55),
    new GymPokemon('Ludicolo', 100000, 56),
    new GymPokemon('Whiscash', 100000, 56),
    new GymPokemon('Gyarados', 100000, 56),
    new GymPokemon('Milotic', 100000, 58),
], BadgeCase.Badge.Elite_HoennChampion, 10000, BadgeCase.Badge.Elite_Drake, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!');
///<reference path="Gym.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage) {
        super(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage);
    }
    setPokemon(starter) {
        this.pokemons = [
            new GymPokemon('Pidgeot', 52340, 59),
            new GymPokemon('Alakazam', 56320, 57),
            new GymPokemon('Rhydon', 58340, 59),
        ];
        switch (starter) {
            case GameConstants.Starter.Bulbasaur: {
                this.pokemons.push(new GymPokemon('Exeggutor', 57520, 59));
                this.pokemons.push(new GymPokemon('Gyarados', 63040, 61));
                this.pokemons.push(new GymPokemon('Charizard', 70000, 63));
                break;
            }
            case GameConstants.Starter.Charmander: {
                this.pokemons.push(new GymPokemon('Arcanine', 65340, 59));
                this.pokemons.push(new GymPokemon('Gyarados', 63040, 61));
                this.pokemons.push(new GymPokemon('Blastoise', 70000, 63));
                break;
            }
            case GameConstants.Starter.Squirtle: {
                this.pokemons.push(new GymPokemon('Gyarados', 63040, 59));
                this.pokemons.push(new GymPokemon('Arcanine', 65340, 61));
                this.pokemons.push(new GymPokemon('Venusaur', 70000, 63));
                break;
            }
        }
    }
}
gymList['Champion Blue'] = new Champion('Blue', 'Champion Blue', [], BadgeCase.Badge.Elite_KantoChampion, 10000, BadgeCase.Badge.Elite_Lance, "Why? Why did I lose? I never made any mistakes raising my Pokémon… Darn it! You're the new Pokémon League Champion! Although I don't like to admit it…");
///<reference path="../Battle.ts"/>
class GymBattle extends Battle {
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        App.game.wallet.gainMoney(this.enemyPokemon().money);
        App.game.party.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        App.game.breeding.progressEggs(Math.floor(Math.sqrt(this.gym.badgeReq * 3 + 1)));
        player.gainShards(this.enemyPokemon().type1, this.enemyPokemon().shardReward);
        player.gainShards(this.enemyPokemon().type2, this.enemyPokemon().shardReward);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateTrainerPokemon(this.gym.town, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.computed(function () {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.computed(function () {
    return GymBattle.totalPokemons() - GymBattle.index();
});
class GymRunner {
    static startGym(gym) {
        this.started = false;
        this.gymObservable(gym);
        if (Gym.isUnlocked(gym)) {
            if (gym instanceof Champion) {
                gym.setPokemon(player.starter);
            }
            App.game.gameState = GameConstants.GameState.idle;
            GymRunner.timeLeft(GameConstants.GYM_TIME);
            GymRunner.timeLeftPercentage(100);
            GymBattle.gym = gym;
            GymBattle.totalPokemons(gym.pokemons.length);
            GymBattle.index(0);
            GymBattle.generateNewEnemy();
            App.game.gameState = GameConstants.GameState.gym;
            this.resetGif();
            setTimeout(function () {
                this.started = true;
                this.hideGif();
            }.bind(this), GameConstants.GYM_COUNTDOWN);
        }
        else {
            Notifier.notify(`${gym.leaderName} does not deem you a worthy opponent yet...<br>Perhaps you can convince them with more gym badges`, GameConstants.NotificationOption.danger);
        }
    }
    static hideGif() {
        $('#gymCountdownView').fadeOut(300);
        const $img = $('#gif-go');
        $img.hide();
    }
    static resetGif() {
        const $img = $('#gif-go');
        $img.show();
        setTimeout(function () {
            $img.attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.started) {
            return;
        }
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static gymLost() {
        Notifier.notify(`It appears you are not strong enough to defeat ${GymBattle.gym.leaderName}`, GameConstants.NotificationOption.danger);
        App.game.gameState = GameConstants.GameState.town;
    }
    static gymWon(gym) {
        Notifier.notify(`Congratulations, you defeated ${GymBattle.gym.leaderName}!`, GameConstants.NotificationOption.success);
        this.gymObservable(gym);
        App.game.wallet.gainMoney(gym.moneyReward);
        if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
            App.game.badgeCase.gainBadge(gym.badgeReward);
            $('#receiveBadgeModal').modal('show');
        }
        GameHelper.incrementObservable(player.statistics.gymsDefeated[Statistics.getGymIndex(gym.town)]);
        player.town(TownList[gym.town]);
        App.game.gameState = GameConstants.GameState.town;
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.gymObservable = ko.observable(gymList['Pewter City']);
GymRunner.timeLeftSeconds = ko.computed(function () {
    return (Math.ceil(GymRunner.timeLeft() / 10) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', function (event) {
    $('#receiveBadgeModal').on('hidden.bs.modal', function () {
        if (GymBattle.gym.badgeReward == BadgeCase.Badge.Soul) {
            App.game.keyItems.gainKeyItem(KeyItems.KeyItem.Safari_ticket);
        }
    });
});
class Shop {
    constructor(items) {
        const itemList = [];
        for (const item of items) {
            itemList.push(ItemList[item]);
        }
        this.items = ko.observableArray(itemList);
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        for (let i = 0; i < shop.items().length; i++) {
            const item = shop.items()[i];
            item.price(Math.round(item.basePrice * player.itemMultipliers[item.name()]));
        }
    }
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        item.buy(this.amount());
        ShopHandler.resetAmount();
    }
    static resetAmount() {
        const input = $("input[name='amountOfItems']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $("input[name='amountOfItems']");
        const newVal = (parseInt(input.val().toString()) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount(n) {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        const input = $("input[name='amountOfItems']");
        if (!item || !item.isAvailable()) {
            return input.val(0).change();
        }
        let amt = 1;
        for (amt; App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency)) && amt <= item.maxAmount && amt <= 1e6; amt++) { }
        input.val(--amt).change();
    }
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
class Item {
    constructor(name, basePrice, priceMultiplier, currency, maxAmount = Number.MAX_SAFE_INTEGER) {
        this.name = ko.observable(name);
        this.basePrice = basePrice;
        this.currency = currency;
        this.price = ko.observable(this.basePrice);
        this.maxAmount = maxAmount;
    }
    totalPrice(amount) {
        if (this.name() == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return this.basePrice * amount;
        }
        else {
            const res = (this.price() * (1 - Math.pow(GameConstants.ITEM_PRICE_MULTIPLIER, amount))) / (1 - GameConstants.ITEM_PRICE_MULTIPLIER);
            return Math.floor(res);
        }
    }
    buy(n) {
        if (n <= 0) {
            return;
        }
        if (n > this.maxAmount) {
            Notifier.notify(`You can only buy ${this.maxAmount} &times; ${this.name()}!`, GameConstants.NotificationOption.danger);
            n = this.maxAmount;
        }
        if (!this.isAvailable()) {
            Notifier.notify(`${this.name()} is sold out!`, GameConstants.NotificationOption.danger);
            return;
        }
        const multiple = n > 1 ? 's' : '';
        if (App.game.wallet.hasAmount(new Amount(this.totalPrice(n), this.currency))) {
            App.game.wallet.loseAmount(new Amount(this.totalPrice(n), this.currency));
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify(`You bought ${n} ${this.name()}${multiple}`, GameConstants.NotificationOption.success);
        }
        else {
            let curr = 'currency';
            switch (this.currency) {
                case GameConstants.Currency.money:
                    curr = 'money';
                    break;
                case GameConstants.Currency.questPoint:
                    curr = 'quest points';
                    break;
                case GameConstants.Currency.dungeonToken:
                    curr = 'dungeon tokens';
                    break;
            }
            Notifier.notify(`You don't have enough ${curr} to buy ${n} ${this.name() + multiple}`, GameConstants.NotificationOption.danger);
        }
    }
    gain(n) {
        player.gainItem(this.name(), n);
    }
    isAvailable() {
        return true;
    }
    increasePriceMultiplier(n = 1) {
        player.itemMultipliers[this.name()] = player.itemMultipliers[this.name()] * Math.pow(GameConstants.ITEM_PRICE_MULTIPLIER, n);
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.name()]));
    }
    decreasePriceMultiplier(n = 1) {
        player.itemMultipliers[this.name()] = Math.max(1, player.itemMultipliers[this.name()] / Math.pow(GameConstants.ITEM_PRICE_DEDUCT, n));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.name()]));
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type, description) {
        const basePrice = GameConstants.ItemPrice[GameConstants.BattleItemType[type]];
        const priceMultiplier = 1;
        super(GameConstants.BattleItemType[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
        this.description = description;
    }
    use() {
        EffectEngineRunner.addEffect(this.name());
    }
}
ItemList['xAttack'] = new BattleItem(GameConstants.BattleItemType.xAttack, '+50% Bonus to Pokemon attack');
ItemList['xClick'] = new BattleItem(GameConstants.BattleItemType.xClick, '+50% Bonus to click attack');
ItemList['xExp'] = new BattleItem(GameConstants.BattleItemType.xExp, '+50% Bonus to experience gained');
ItemList['Token_collector'] = new BattleItem(GameConstants.BattleItemType.Token_collector, '+50% Bonus to dungeon tokens gained');
ItemList['Item_magnet'] = new BattleItem(GameConstants.BattleItemType.Item_magnet, '+50% Chance of gaining an extra item');
ItemList['Lucky_incense'] = new BattleItem(GameConstants.BattleItemType.Lucky_incense, '+50% Bonus to money gained');
class EggItem extends Item {
    constructor(type, price = GameConstants.ItemPrice.Egg) {
        const basePrice = price;
        const priceMultiplier = 1;
        super(GameConstants.EggItemType[type], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = type;
    }
    use() {
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            return;
        }
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = App.game.breeding.gainRandomEgg();
        }
        else {
            const etype = GameConstants.EggType[GameConstants.EggItemType[this.type].split('_')[0]];
            success = App.game.breeding.gainEgg(App.game.breeding.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name(), 1);
        }
    }
}
ItemList['Fire_egg'] = new EggItem(GameConstants.EggItemType.Fire_egg);
ItemList['Water_egg'] = new EggItem(GameConstants.EggItemType.Water_egg);
ItemList['Grass_egg'] = new EggItem(GameConstants.EggItemType.Grass_egg);
ItemList['Fighting_egg'] = new EggItem(GameConstants.EggItemType.Fighting_egg);
ItemList['Electric_egg'] = new EggItem(GameConstants.EggItemType.Electric_egg);
ItemList['Dragon_egg'] = new EggItem(GameConstants.EggItemType.Dragon_egg);
ItemList['Pokemon_egg'] = new EggItem(GameConstants.EggItemType.Pokemon_egg);
ItemList['Mystery_egg'] = new EggItem(GameConstants.EggItemType.Mystery_egg, 750);
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type) {
        const basePrice = GameConstants.ItemPrice[GameConstants.EnergyRestoreSize[type]];
        const priceMultiplier = 1;
        super(GameConstants.EnergyRestoreSize[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
    }
    use() {
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        if (Underground.energy === Underground.getMaxEnergy()) {
            Notifier.notify('Your mining energy is already full!', GameConstants.NotificationOption.danger);
            return;
        }
        Underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name(), 1);
    }
}
ItemList['SmallRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore);
ItemList['MediumRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore);
ItemList['LargeRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore);
///<reference path="Item.ts"/>
class EvolutionStone extends Item {
    constructor(type) {
        const basePrice = GameConstants.ItemPrice.EvolutionStone;
        const priceMultiplier = 1;
        super(GameConstants.StoneType[type], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = type;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
}
ItemList['Fire_stone'] = new EvolutionStone(GameConstants.StoneType.Fire_stone);
ItemList['Water_stone'] = new EvolutionStone(GameConstants.StoneType.Water_stone);
ItemList['Thunder_stone'] = new EvolutionStone(GameConstants.StoneType.Thunder_stone);
ItemList['Leaf_stone'] = new EvolutionStone(GameConstants.StoneType.Leaf_stone);
ItemList['Moon_stone'] = new EvolutionStone(GameConstants.StoneType.Moon_stone);
ItemList['Sun_stone'] = new EvolutionStone(GameConstants.StoneType.Sun_stone);
ItemList['Trade_stone'] = new EvolutionStone(GameConstants.StoneType.Trade_stone);
ItemList['Dragon_scale'] = new EvolutionStone(GameConstants.StoneType.Dragon_scale);
ItemList['Metal_coat'] = new EvolutionStone(GameConstants.StoneType.Metal_coat);
ItemList['Kings_rock'] = new EvolutionStone(GameConstants.StoneType.Kings_rock);
ItemList['Upgrade'] = new EvolutionStone(GameConstants.StoneType.Upgrade);
ItemList['Time_stone'] = new EvolutionStone(GameConstants.StoneType.Time_stone);
class ItemHandler {
    static useItem(name) {
        if (!player.itemList[name]()) {
            return Notifier.notify(`You don't have any ${name.replace(/_/g, ' ')}s left...`, GameConstants.NotificationOption.danger);
        }
        player.itemList[name](player.itemList[name]() - 1);
        return ItemList[name].use();
    }
    static resetAmount() {
        const input = $("input[name='amountOfStones']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $("input[name='amountOfItems']");
        const newVal = (parseInt(input.val().toString()) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (this.pokemonSelected() == '') {
            return Notifier.notify('No Pokémon selected', GameConstants.NotificationOption.danger);
        }
        const amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (!amountTotal) {
            return Notifier.notify(`You don't have any ${this.stoneSelected().replace(/_/g, ' ')}s left...`, GameConstants.NotificationOption.danger);
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        const multiple = amountUsed == 1 ? '' : 's';
        Notifier.notify(`You used ${amountUsed} ${this.stoneSelected()}${multiple}`, GameConstants.NotificationOption.success);
    }
}
ItemHandler.stoneSelected = ko.observable('Fire_stone');
ItemHandler.pokemonSelected = ko.observable('Vulpix');
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
class PokeBlock extends Item {
    constructor(color) {
        const basePrice = GameConstants.ItemPrice.PokeBlock;
        const priceMultiplier = 1;
        super(name, basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = color;
    }
    use() {
    }
}
ItemList['Black'] = new PokeBlock(GameConstants.PokeBlockColor.Black);
ItemList['Red'] = new PokeBlock(GameConstants.PokeBlockColor.Red);
ItemList['Gold'] = new PokeBlock(GameConstants.PokeBlockColor.Gold);
ItemList['Purple'] = new PokeBlock(GameConstants.PokeBlockColor.Purple);
ItemList['Gray'] = new PokeBlock(GameConstants.PokeBlockColor.Gray);
ItemList['White'] = new PokeBlock(GameConstants.PokeBlockColor.White);
///<reference path="Item.ts"/>
class PokeballItem extends Item {
    constructor(type, currency) {
        const basePrice = GameConstants.ItemPrice[GameConstants.Pokeball[type]];
        const priceMultiplier = 1;
        super(GameConstants.Pokeball[type], basePrice, priceMultiplier, currency);
        this.type = type;
    }
    gain(amt) {
        App.game.pokeballs.gainPokeballs(this.type, amt);
        GameHelper.incrementObservable(player.statistics.pokeballsBought[this.type], amt);
    }
    use() {
    }
}
ItemList['Pokeball'] = new PokeballItem(GameConstants.Pokeball.Pokeball, GameConstants.Currency.money);
ItemList['Greatball'] = new PokeballItem(GameConstants.Pokeball.Greatball, GameConstants.Currency.money);
ItemList['Ultraball'] = new PokeballItem(GameConstants.Pokeball.Ultraball, GameConstants.Currency.money);
ItemList['Masterball'] = new PokeballItem(GameConstants.Pokeball.Masterball, GameConstants.Currency.questPoint);
class PokemonItem extends Item {
    constructor(pokemon) {
        const basePrice = GameConstants.ItemPrice[GameConstants.PokemonItemType[pokemon]];
        const priceMultiplier = 1;
        super(GameConstants.PokemonItemType[pokemon], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = pokemon;
    }
    gain() {
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
        const pokemonName = this.name();
        if (shiny) {
            Notifier.notify(`✨ You obtained a shiny ${pokemonName}! ✨`, GameConstants.NotificationOption.warning);
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(pokemonName).id, shiny);
    }
    use() {
    }
}
ItemList['Eevee'] = new PokemonItem(GameConstants.PokemonItemType.Eevee);
ItemList['Porygon'] = new PokemonItem(GameConstants.PokemonItemType.Porygon);
ItemList['Jynx'] = new PokemonItem(GameConstants.PokemonItemType.Jynx);
ItemList['Mr. Mime'] = new PokemonItem(GameConstants.PokemonItemType['Mr. Mime']);
ItemList['Lickitung'] = new PokemonItem(GameConstants.PokemonItemType.Lickitung);
ItemList['Togepi'] = new PokemonItem(GameConstants.PokemonItemType.Togepi);
class Vitamin extends Item {
    constructor(type) {
        const basePrice = GameConstants.ItemPrice[GameConstants.VitaminType[type]];
        const priceMultiplier = 1;
        super(GameConstants.VitaminType[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
    }
    use() {
    }
}
ItemList['RareCandy'] = new Vitamin(GameConstants.VitaminType.RareCandy);
ItemList['Protein'] = new Vitamin(GameConstants.VitaminType.Protein);
class KeyItems {
    constructor() {
        this.name = 'Key Items';
        this.saveKey = 'keyItems';
        this.itemList = [];
    }
    initialize() {
        this.itemList = [
            new KeyItem(KeyItems.KeyItem.Teachy_tv, 'A television set that is tuned to a program with useful tips for novice TRAINERS', null, true),
            new KeyItem(KeyItems.KeyItem.Coin_case, 'A case for holding money. It can hold up to 1,000,000 coins', null, true),
            new KeyItem(KeyItems.KeyItem.Pokeball_bag, 'A tiny bag that can hold up to 4 different types of PokéBalls', null, true),
            new KeyItem(KeyItems.KeyItem.Town_map, 'A very convenient map that can be viewed anytime. It even shows you your present location in the region', function () {
                return player.statistics.routeKills[1]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Factory_key, 'This pass serves as an ID card for gaining access to the Pokéball factory that lies along Route 13'),
            new KeyItem(KeyItems.KeyItem.Dungeon_ticket, 'This ticket grants access to all dungeons in the Kanto region,<br/><strong>Tip:</strong> You gain Dungeon Tokens by capturing Pokémon'),
            new KeyItem(KeyItems.KeyItem.Super_rod, 'The best fishing rod for catching wild water Pokémon', function () {
                return player.statistics.routeKills[12]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Holo_caster, 'A device that allows users to receive and view hologram clips at any time. It’s also used to chat with others'),
            new KeyItem(KeyItems.KeyItem.Mystery_egg, 'A mysterious Egg obtained from Mr. Pokémon. What is in the Egg is unknown', function () {
                return App.game.party.hasMaxLevelPokemon();
            }),
            new KeyItem(KeyItems.KeyItem.Safari_ticket, 'This ticket grants access to the Safari Zone in Fuchsia City'),
            new KeyItem(KeyItems.KeyItem.Wailmer_pail, 'This is a tool for watering Berries you planted to make them grow more quickly', function () {
                return MapHelper.accessToRoute(14, 1) && App.game.farming.berryList[0] >= 3;
            }),
            new KeyItem(KeyItems.KeyItem.Explorer_kit, 'A bag filled with convenient tools for exploring. It provides access to the Underground'),
            // TODO buy for 500 quest points
            new KeyItem(KeyItems.KeyItem.Event_calendar, 'This calendar will keep you up to date on the latest events'),
            // TODO obtain after first prestige
            new KeyItem(KeyItems.KeyItem.Shard_case, 'A case specifically designed for holding shards', function () {
                return false;
            }),
        ];
    }
    hasKeyItem(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isUnlocked;
    }
    gainKeyItem(item) {
        if (!this.hasKeyItem(item)) {
            KeyItemController.showGainModal(item);
            this.itemList[item].unlock();
        }
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        for (const key in json) {
            if (json.hasOwnProperty(key)) {
                if (json[key] === true) {
                    // Unlock to dispose unlocker if needed
                    this.itemList[KeyItems.KeyItem[key]].unlock();
                }
            }
        }
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[KeyItems.KeyItem[this.itemList[i].name]] = this.itemList[i].isUnlocked;
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
}
(function (KeyItems) {
    let KeyItem;
    (function (KeyItem) {
        KeyItem[KeyItem["Teachy_tv"] = 0] = "Teachy_tv";
        KeyItem[KeyItem["Coin_case"] = 1] = "Coin_case";
        KeyItem[KeyItem["Pokeball_bag"] = 2] = "Pokeball_bag";
        KeyItem[KeyItem["Town_map"] = 3] = "Town_map";
        KeyItem[KeyItem["Factory_key"] = 4] = "Factory_key";
        KeyItem[KeyItem["Dungeon_ticket"] = 5] = "Dungeon_ticket";
        KeyItem[KeyItem["Super_rod"] = 6] = "Super_rod";
        KeyItem[KeyItem["Holo_caster"] = 7] = "Holo_caster";
        KeyItem[KeyItem["Mystery_egg"] = 8] = "Mystery_egg";
        KeyItem[KeyItem["Safari_ticket"] = 9] = "Safari_ticket";
        KeyItem[KeyItem["Wailmer_pail"] = 10] = "Wailmer_pail";
        KeyItem[KeyItem["Explorer_kit"] = 11] = "Explorer_kit";
        KeyItem[KeyItem["Event_calendar"] = 12] = "Event_calendar";
        KeyItem[KeyItem["Shard_case"] = 13] = "Shard_case";
    })(KeyItem = KeyItems.KeyItem || (KeyItems.KeyItem = {}));
})(KeyItems || (KeyItems = {}));
///<reference path="../keyItems/KeyItems.ts"/>
class BuyKeyItem extends Item {
    constructor(item, price, maxAmount = 1) {
        const priceMultiplier = 1;
        super(KeyItems.KeyItem[item], price, priceMultiplier, GameConstants.Currency.questPoint, maxAmount);
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        App.game.keyItems.gainKeyItem(this.item);
    }
    use() {
    }
    isAvailable() {
        return super.isAvailable() && !App.game.keyItems.hasKeyItem(this.item);
    }
}
ItemList['Dungeon_ticket'] = new BuyKeyItem(KeyItems.KeyItem.Dungeon_ticket, 250);
ItemList['Explorer_kit'] = new BuyKeyItem(KeyItems.KeyItem.Explorer_kit, 5000);
class KeyItem {
    constructor(name, description, unlockReq, isUnlocked) {
        this._name = ko.observable(name);
        this._description = ko.observable(description);
        this._isUnlocked = ko.observable((isUnlocked !== null && isUnlocked !== void 0 ? isUnlocked : false));
        if (this.isUnlocked || unlockReq == undefined) {
            this.unlockReq = null;
            return;
        }
        this.unlockReq = ko.computed(unlockReq);
        this.unlocker = this.unlockReq.subscribe(() => {
            if (this.unlockReq()) {
                App.game.keyItems.gainKeyItem(this.name);
            }
        });
    }
    unlock() {
        this.isUnlocked = true;
        if (this.unlocker) {
            this.unlocker.dispose();
        }
    }
    get displayName() {
        return GameConstants.humanifyString(KeyItems.KeyItem[this.name]);
    }
    get name() {
        return this._name();
    }
    get description() {
        return this._description();
    }
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(bool) {
        this._isUnlocked(bool);
    }
}
class KeyItemController {
    static showGainModal(item) {
        this.latestGainedItem = item;
        $('.modal').modal('hide');
        $('#keyItemModal').modal('show');
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.selectedItem = this.inspectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
    static get latestGainedItem() {
        return this._latestGainedItem();
    }
    static set latestGainedItem(item) {
        this._latestGainedItem(item);
    }
}
KeyItemController._inspectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._selectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._latestGainedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
/**
 * An upgrade that requires experience to level up.
 */
class ExpUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, expList, costList, bonusList, increasing) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
        this.defaults = {
            level: 0,
            exp: 0,
        };
        this.expList = expList;
        this._exp = ko.observable(0);
    }
    gainExp(exp) {
        this.exp = Math.min(this.expList[this.level], this.exp + exp);
    }
    canBuy() {
        return super.canBuy() && this.hasEnoughExp();
    }
    hasEnoughExp() {
        return this.exp >= this.expList[this.level];
    }
    toJSON() {
        const json = super.toJSON();
        json['exp'] = this.exp;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.exp = (_a = json['exp'], (_a !== null && _a !== void 0 ? _a : this.defaults.exp));
    }
    // Knockout getters/setters
    get normalizedExp() {
        if (this.level === 0) {
            return this.exp;
        }
        return this.exp - this.expList[this.level - 1];
    }
    get expPercentage() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return this.normalizedExp / nextLevelExp * 100;
    }
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.round(this.normalizedExp)}/${nextLevelExp}`;
    }
    // Private as external sources should use gainExp and normalizedExp
    get exp() {
        return this._exp();
    }
    set exp(exp) {
        this._exp(exp);
    }
}
///<reference path="../upgrades/ExpUpgrade.ts"/>
class OakItem extends ExpUpgrade {
    constructor(name, displayName, bonusList, inactiveBonus, increasing, unlockReq, description, expGain) {
        super(name, displayName, 5, [500, 1000, 2500, 5000, 10000], AmountFactory.createArray([50000, 100000, 250000, 500000, 1000000], GameConstants.Currency.money), bonusList, increasing);
        this.defaults = {
            level: 0,
            exp: 0,
            isActive: false,
        };
        this._isActive = ko.observable(false);
        this.inactiveBonus = inactiveBonus;
        this.unlockReq = unlockReq;
        this.description = description;
        this.expGain = expGain;
    }
    use(exp = this.expGain) {
        if (!this.isActive) {
            return;
        }
        if (!this.isMaxLevel()) {
            this.gainExp(exp);
        }
        GameHelper.incrementObservable(player.statistics.oakItemUses[this.name]);
    }
    calculateBonus(level = this.level) {
        if (!this.isActive) {
            return this.inactiveBonus;
        }
        return super.calculateBonus(level);
    }
    calculateBonusIfActive(level = this.level) {
        return super.calculateBonus(level);
    }
    toJSON() {
        const json = super.toJSON();
        json['isActive'] = this.isActive;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.isActive = (_a = json['isActive'], (_a !== null && _a !== void 0 ? _a : this.defaults.isActive));
    }
    // Knockout getters/setters
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.floor(this.normalizedExp / this.expGain)}/${Math.ceil(nextLevelExp / this.expGain)}`;
    }
    get isActive() {
        return this._isActive();
    }
    set isActive(bool) {
        this._isActive(bool);
    }
}
///<reference path="OakItems.ts"/>
class OakItemController {
    static click(item) {
        this.selectedItem = item;
        if (App.game.oakItems.isActive(item)) {
            App.game.oakItems.deactivate(item);
            return;
        }
        App.game.oakItems.activate(item);
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.inspectedItem = this.selectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
}
OakItemController._inspectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
OakItemController._selectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
var CaughtStatus;
(function (CaughtStatus) {
    CaughtStatus[CaughtStatus["NotCaught"] = 0] = "NotCaught";
    CaughtStatus[CaughtStatus["Caught"] = 1] = "Caught";
    CaughtStatus[CaughtStatus["CaughtShiny"] = 2] = "CaughtShiny";
})(CaughtStatus || (CaughtStatus = {}));
///<reference path="CaughtStatus.ts"/>
class Party {
    constructor() {
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
            shinyPokemon: [],
        };
        this._caughtPokemon = ko.observableArray([]);
        this.shinyPokemon = new ObservableArrayProxy(this.defaults.shinyPokemon);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            for (let i = 0; i < this.caughtPokemon.length; i++) {
                if (this.caughtPokemon[i].level === 100) {
                    return true;
                }
            }
            return false;
        }).extend({ rateLimit: 1000 });
    }
    gainPokemonById(id, shiny = false) {
        this.gainPokemon(PokemonFactory.generatePartyPokemon(id), shiny);
    }
    gainPokemon(pokemon, shiny = false) {
        GameHelper.incrementObservable(player.caughtAmount[pokemon.id]);
        GameHelper.incrementObservable(player.statistics.pokemonCaptured);
        if (shiny) {
            player.shinyCatches++;
        }
        // Already have it shiny
        if (this.alreadyCaughtPokemon(pokemon.id, true)) {
            return;
        }
        if (shiny) {
            this.shinyPokemon.push(pokemon.id);
            Notifier.notify(`✨ You have captured a shiny ${pokemon.name}! ✨`, GameConstants.NotificationOption.warning);
        }
        if (this.alreadyCaughtPokemon(pokemon.id, false)) {
            return;
        }
        Notifier.notify(`You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`, GameConstants.NotificationOption.success);
        this._caughtPokemon.push(pokemon);
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        App.game.oakItems.use(OakItems.OakItem.Exp_Share);
        const trainerBonus = trainer ? 1.5 : 1;
        const oakItemBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Exp_Share);
        let expTotal = Math.floor(exp * level * trainerBonus * oakItemBonus * (1 + AchievementHandler.achievementBonus()) / 9);
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.xExp)()) {
            expTotal *= 1.5;
        }
        const maxLevel = (App.game.badgeCase.badgeCount() + 2) * 10;
        for (const pokemon of this.caughtPokemon) {
            if (pokemon.level < maxLevel) {
                pokemon.gainExp(expTotal);
            }
        }
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None) {
        let attack = 0;
        for (const pokemon of this.caughtPokemon) {
            let multiplier = 1;
            if (player.region !== GameHelper.getRegion(pokemon.id)) {
                // Pokemon only retain 20% of their total damage in other regions.
                multiplier = 0.2;
            }
            if (!pokemon.breeding) {
                if (Battle.enemyPokemon() == null || type1 == PokemonType.None) {
                    attack += pokemon.attack * multiplier;
                }
                else {
                    const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                    attack += pokemon.attack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, Battle.enemyPokemon().type1, Battle.enemyPokemon().type2) * multiplier;
                }
            }
        }
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.xAttack)()) {
            attack *= 1.5;
        }
        return Math.round(attack);
    }
    pokemonAttackObservable(type1 = PokemonType.None, type2 = PokemonType.None) {
        return ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack(type1, type2);
        }).extend({ rateLimit: 1000 });
    }
    getPokemon(id) {
        for (let i = 0; i < this.caughtPokemon.length; i++) {
            if (this.caughtPokemon[i].id === id) {
                return this.caughtPokemon[i];
            }
        }
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false) {
        for (let i = 0; i < this.caughtPokemon.length; i++) {
            if (this.caughtPokemon[i].id === id) {
                return (!shiny || this.shinyPokemon.includes(id));
            }
        }
        return false;
    }
    calculateClickAttack() {
        // Base power
        let clickAttack = Math.pow(this.caughtPokemon.length + 1, 1.4);
        clickAttack *= App.game.oakItems.calculateBonus(OakItems.OakItem.Poison_Barb);
        // Apply battle item bonus
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.xClick)()) {
            clickAttack *= 1.5;
        }
        return Math.floor(clickAttack);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json['caughtPokemon'];
        for (let i = 0; i < caughtPokemonSave.length; i++) {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPokemonSave[i].id);
            partyPokemon.fromJSON(caughtPokemonSave[i]);
            this._caughtPokemon.push(partyPokemon);
        }
        this.shinyPokemon = new ObservableArrayProxy((_a = json['shinyPokemon'], (_a !== null && _a !== void 0 ? _a : this.defaults.shinyPokemon)));
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
            shinyPokemon: this.shinyPokemon.map(x => x),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
    set caughtPokemon(pokemon) {
        this._caughtPokemon(pokemon);
    }
}
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static getSortedList() {
        return ko.pureComputed(function () {
            return App.game.party._caughtPokemon.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
        }).extend({ rateLimit: 500 });
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            let aValue;
            let bValue;
            switch (option) {
                case SortOptions.id:
                    aValue = a.id;
                    bValue = b.id;
                    break;
                case SortOptions.name:
                    aValue = a.name;
                    bValue = b.name;
                    break;
                case SortOptions.attack:
                    aValue = a.calculateAttack();
                    bValue = b.calculateAttack();
                    break;
                case SortOptions.level:
                    aValue = a.level;
                    bValue = b.level;
                    break;
                case SortOptions.shiny:
                    aValue = Number(App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(a.name).id, true));
                    bValue = Number(App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(b.name).id, true));
            }
            if (option === SortOptions.attack || option == SortOptions.level || option == SortOptions.shiny) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, attackBonus, exp, breeding = false) {
        this.defaults = {
            evolved: false,
            attackBonus: 0,
            exp: 0,
            breeding: false,
        };
        this.id = id;
        this.name = name;
        this.attackBonus = attackBonus;
        this.exp = exp;
        this.baseAttack = baseAttack;
        this._breeding = ko.observable(breeding);
        this._level = ko.observable(1);
        this._attack = ko.observable(this.calculateAttack());
        this.evolutions = evolutions;
    }
    calculateAttack() {
        const attackBonusMultiplier = 1 + (this.attackBonus / 100);
        const levelMultiplier = this.level / 100;
        return Math.max(1, Math.floor(this.baseAttack * attackBonusMultiplier * levelMultiplier));
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return i;
            }
        }
        return this.level;
    }
    ;
    gainExp(exp) {
        this.exp += exp;
        const oldLevel = this.level;
        const newLevel = this.calculateLevelFromExp();
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            this.attack = this.calculateAttack();
            this.checkForLevelEvolution();
        }
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evolution of this.evolutions) {
            if (evolution instanceof LevelEvolution && evolution.isSatisfied()) {
                evolution.evolve();
            }
        }
    }
    useStone(type) {
        const possibleEvolutions = [];
        for (const evolution of this.evolutions) {
            if (evolution instanceof StoneEvolution && evolution.stone == type) {
                possibleEvolutions.push(evolution);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return GameConstants.randomElement(possibleEvolutions).evolve();
        }
        return false;
    }
    fromJSON(json) {
        var _a, _b, _c;
        if (json == null) {
            return;
        }
        if (json['id'] == null) {
            return;
        }
        this.attackBonus = (_a = json['attackBonus'], (_a !== null && _a !== void 0 ? _a : this.defaults.attackBonus));
        this.exp = (_b = json['exp'], (_b !== null && _b !== void 0 ? _b : this.defaults.exp));
        this.level = this.calculateLevelFromExp();
        this.attack = this.calculateAttack();
        this.breeding = (_c = json['breeding'], (_c !== null && _c !== void 0 ? _c : this.defaults.breeding));
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution) {
                    evolution.triggered = json['levelEvolutionTriggered'];
                }
            }
        }
    }
    toJSON() {
        let levelEvolutionTriggered = false;
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution && evolution.triggered) {
                    levelEvolutionTriggered = true;
                }
            }
        }
        return {
            id: this.id,
            attackBonus: this.attackBonus,
            exp: this.exp,
            breeding: this.breeding,
            levelEvolutionTriggered: levelEvolutionTriggered,
        };
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    set attack(attack) {
        this._attack(attack);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
}
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {
            'pokeballs': [25, 0, 0, 0],
            'notCaughtSelection': GameConstants.Pokeball.Pokeball,
            'alreadyCaughtSelection': GameConstants.Pokeball.Pokeball,
        };
        this.pokeballs = new ArrayOfObservables(this.defaults.pokeballs);
        this._notCaughtSelection = ko.observable(this.defaults.notCaughtSelection);
        this._alreadyCaughtSelection = ko.observable(this.defaults.alreadyCaughtSelection);
    }
    initialize() {
        this.pokeballCatchBonus = [0, 5, 10, 100];
        this.pokeballCatchTime = [1250, 1000, 750, 500];
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny) {
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (!alreadyCaught || (!alreadyCaughtShiny && isShiny)) {
            pref = this.notCaughtSelection;
        }
        else {
            pref = this.alreadyCaughtSelection;
        }
        let use = GameConstants.Pokeball.None;
        // Check which Pokeballs we have in stock that are of equal or lesser than selection
        for (let i = pref; i >= 0; i--) {
            if (this.pokeballs[i] > 0) {
                use = i;
                break;
            }
        }
        return use;
    }
    calculateCatchTime(ball) {
        return this.pokeballCatchTime[ball];
    }
    gainPokeballs(ball, amount) {
        this.pokeballs[ball] += amount;
    }
    usePokeball(ball) {
        this.pokeballs[ball] -= 1;
        GameHelper.incrementObservable(player.statistics.pokeballsUsed[ball]);
    }
    getCatchBonus(ball) {
        return this.pokeballCatchBonus[ball];
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a, _b;
        if (json == null) {
            return;
        }
        if (json['pokeballs'] == null) {
            this.pokeballs = new ArrayOfObservables(this.defaults.pokeballs);
        }
        else {
            const pokeballsJson = json['pokeballs'];
            this.pokeballs = new ArrayOfObservables([
                pokeballsJson[GameConstants.Pokeball.Pokeball],
                pokeballsJson[GameConstants.Pokeball.Greatball],
                pokeballsJson[GameConstants.Pokeball.Ultraball],
                pokeballsJson[GameConstants.Pokeball.Masterball],
            ]);
        }
        this.notCaughtSelection = (_a = json['notCaughtSelection'], (_a !== null && _a !== void 0 ? _a : this.defaults.notCaughtSelection));
        this.alreadyCaughtSelection = (_b = json['alreadyCaughtSelection'], (_b !== null && _b !== void 0 ? _b : this.defaults.alreadyCaughtSelection));
    }
    toJSON() {
        return {
            'pokeballs': [
                this.pokeballs[GameConstants.Pokeball.Pokeball],
                this.pokeballs[GameConstants.Pokeball.Greatball],
                this.pokeballs[GameConstants.Pokeball.Ultraball],
                this.pokeballs[GameConstants.Pokeball.Masterball],
            ],
            'notCaughtSelection': this.notCaughtSelection,
            'alreadyCaughtSelection': this.alreadyCaughtSelection,
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    // Knockout getters/setters
    get alreadyCaughtSelection() {
        return this._alreadyCaughtSelection();
    }
    set alreadyCaughtSelection(ball) {
        this._alreadyCaughtSelection(ball);
    }
    get notCaughtSelection() {
        return this._notCaughtSelection();
    }
    set notCaughtSelection(ball) {
        this._notCaughtSelection(ball);
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!PokedexHelper.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${TypeColor[pokemon.type1]} 50%, ${TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.computed(function () {
            return player.defeatedAmount[id]() > 0 || player.caughtAmount[id]() > 0;
        });
    }
    static populateTypeFilters() {
        let options = $('#pokedex-filter-type1');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-type2');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        const filter = PokedexHelper.getFilters();
        const highestDefeated = player.defeatedAmount.reduce((highest, pokemon, index) => pokemon() && index > highest ? index : highest, 0);
        const highestCaught = App.game.party.caughtPokemon.reduce((highest, pokemon) => pokemon.id > highest ? pokemon.id : highest, 0);
        const highestDex = Math.max(highestDefeated, highestCaught);
        return pokemonList.filter(function (pokemon) {
            if ((filter['name'] || '') != '' && pokemon.name.toLowerCase().indexOf(filter['name'].toLowerCase()) == -1) {
                return false;
            }
            const type1 = parseInt(filter['type1'] || PokemonType.None);
            const type2 = parseInt(filter['type2'] || PokemonType.None);
            if ((type1 != PokemonType.None && !pokemon.type.includes(type1)) || (type2 != PokemonType.None && !pokemon.type.includes(type2))) {
                return false;
            }
            if (filter['caught'] && player.caughtAmount[pokemon.id]() == 0) {
                return false;
            }
            if (filter['shiny'] && !App.game.party.alreadyCaughtPokemon(pokemon.id, true)) {
                return false;
            }
            if (filter['uncaught'] && player.caughtAmount[pokemon.id]() !== 0) {
                return false;
            }
            if (pokemon.id > highestDex) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        const res = {};
        res['name'] = document.getElementById('nameFilter').value;
        const type1 = document.getElementById('pokedex-filter-type1');
        res['type1'] = type1.options[type1.selectedIndex].value;
        const type2 = document.getElementById('pokedex-filter-type2');
        res['type2'] = type2.options[type2.selectedIndex].value;
        res['caught'] = document.getElementById('pokedex-filter-caught').checked;
        res['uncaught'] = document.getElementById('pokedex-filter-uncaught').checked;
        res['shiny'] = document.getElementById('pokedex-filter-shiny').checked;
        return res;
    }
    static getImage(id, name) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            src += 'shiny';
        }
        src += `pokemon/${id}.png`;
        return src;
    }
}
PokedexHelper.filteredList = ko.observableArray([]);
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
class DataPokemon {
    constructor(id, name, catchRate, evolutions, type1, type2, attack, levelType, exp, eggCycles) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolutions = evolutions;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.shiny = false;
    }
}
class Quest {
    constructor(amount, pointsReward) {
        this.amount = amount;
        const randomPointBonus = 0.9 + SeededRand.next() * 0.2; // random between 0.9 and 1.1
        this.pointsReward = Math.ceil(pointsReward * randomPointBonus);
        this.xpReward = pointsReward / 10;
        this.claimed = ko.observable(false);
        this.initial = ko.observable(null);
        this.notified = false;
    }
    endQuest() {
        if (this.isCompleted() && !this.claimed()) {
            App.game.wallet.gainQuestPoints(this.pointsReward);
            this.claimed(true);
            if (!this.inQuestLine) {
                player.completedQuestList[this.index](true);
            }
            const oldLevel = player.questLevel;
            player.questXP += this.xpReward;
            Notifier.notify(`You have completed your quest and claimed ${this.pointsReward} quest points!`, GameConstants.NotificationOption.success);
            ;
            // Refresh the list each time a player levels up
            if (oldLevel < player.questLevel) {
                Notifier.notify('Your quest level has increased!', GameConstants.NotificationOption.success);
                QuestHelper.refreshQuests(true);
            }
            // Once the player completes every available quest, refresh the list for free
            if (QuestHelper.allQuestCompleted()) {
                QuestHelper.refreshQuests(true);
            }
        }
        else {
            this.initial(null);
        }
        player.currentQuests(player.currentQuests().filter(x => x.index != this.index));
    }
    beginQuest() {
        this.initial(this.questFocus());
    }
    set questFocus(value) {
        this._questFocus = value;
        this.createProgressObservables();
    }
    get questFocus() {
        return this._questFocus;
    }
    createProgressObservables() {
        this.progress = ko.computed(function () {
            if (this.initial() !== null) {
                return Math.min(1, (this.questFocus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        }, this);
        this.progressText = ko.computed(function () {
            if (this.initial() !== null) {
                return `${Math.min((this.questFocus() - this.initial()), this.amount)}/${this.amount}`;
            }
            else {
                return `0/${this.amount}`;
            }
        }, this);
        this.isCompleted = ko.computed(function () {
            const completed = this.progress() == 1;
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify(`You can complete your quest for ${this.pointsReward} quest points!`, GameConstants.NotificationOption.success);
            }
            return completed;
        }, this);
    }
    complete() {
        this.initial(this.questFocus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.endQuest();
                this.autoCompleter.dispose();
            }
        });
    }
    inProgress() {
        return ko.computed(() => {
            return player.currentQuests().map(x => x.index).includes(this.index) && !this.isCompleted();
        });
    }
}
/// <reference path="Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, ball, reward) {
        super(amount, reward);
        this.description = `Buy ${amount} Pokeballs.`;
        this.questFocus = player.statistics.pokeballsBought[ball];
    }
}
/// <reference path="Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded) {
        super(capturesNeeded, capturesNeeded * GameConstants.CAPTURE_POKEMONS_BASE_REWARD);
        this.description = `Capture ${capturesNeeded} pokemon from any source.`;
        this.questFocus = player.statistics.pokemonCaptured;
    }
}
/// <reference path="Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.SHINY_BASE_REWARD));
        this.description = `Catch ${amount} shiny pokemon.`;
        this.questFocus = player._shinyCatches;
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus) {
        super(amount, reward);
        this.description = description;
        this.questFocus = focus;
    }
}
/// <reference path="Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(dungeon, amount) {
        super(amount, DefeatDungeonQuest.calcReward(dungeon, amount));
        this.description = `Defeat the ${dungeon} dungeon ${amount} times.`;
        this.questFocus = player.statistics.dungeonsCleared[Statistics.getDungeonIndex(dungeon)];
    }
    static calcReward(dungeon, amount) {
        const playerDamage = App.game.party.calculateClickAttack();
        const attacksToDefeatPokemon = Math.min(4, dungeonList[dungeon].baseHealth / playerDamage);
        // Average tiles till boss ~= 13
        return Math.ceil(attacksToDefeatPokemon * 13 * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount);
    }
}
/// <reference path="Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(gymTown, amount) {
        super(amount, DefeatGymQuest.calcReward(gymTown, amount));
        this.description = DefeatGymQuest.getDescription(gymTown, amount);
        this.questFocus = player.statistics.gymsDefeated[Statistics.getGymIndex(gymTown)];
    }
    static getDescription(gymTown, amount) {
        let desc = `Defeat ${gymTown} `;
        if (gymTown.indexOf('Elite') == -1 && gymTown.indexOf('Champion') == -1) {
            desc += 'gym ';
        }
        desc += `${amount} times.`;
        return desc;
    }
    static calcReward(gymTown, amount) {
        const gym = gymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter);
        }
        const playerDamage = App.game.party.calculatePokemonAttack();
        let attacksToWin = 0;
        for (const pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        return Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount);
    }
}
/// <reference path="Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(route, region, killsNeeded) {
        super(killsNeeded, DefeatPokemonsQuest.calcReward(route, region, killsNeeded));
        this.description = `Defeat ${killsNeeded} pokemon on route ${route}.`;
        this.route = route;
        this.questFocus = player.statistics.routeKills[this.route];
    }
    static calcReward(route, region, killsNeeded) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.calculatePokemonAttack())));
        return Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
    }
}
/// <reference path="Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD));
        this.description = `Gain ${amount} PokeDollars.`;
        this.questFocus = player.statistics.totalMoney;
    }
}
/// <reference path="Quest.ts" />
class GainShardsQuest extends Quest {
    constructor(type, amount) {
        super(amount, GainShardsQuest.calcReward(type, amount));
        this.description = `Gain ${amount} ${PokemonType[type]} shards.`;
        this.questFocus = player.statistics.totalShards[type];
    }
    static calcReward(type, amount) {
        // Needs balancing between different types
        return amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD;
    }
}
/// <reference path="Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD));
        this.description = `Gain ${amount} dungeon tokens.`;
        this.questFocus = player.statistics.totalTokens;
    }
}
/// <reference path="Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(berryType, amount) {
        super(amount, HarvestBerriesQuest.calcReward(berryType, amount));
        this.description = `Harvest ${amount} ${BerryType[berryType]} berries at the farm.`;
        this.questFocus = player.statistics.berriesHarvested[berryType];
    }
    // TODO: Balance the reward amount better
    static calcReward(berryType, amount) {
        const harvestTime = App.game.farming.berryData[berryType].harvestTime;
        const avgBerriesPerHarvest = 2.5;
        const plotsAvailable = App.game.farming.unlockedPlotCount();
        return Math.ceil((amount / avgBerriesPerHarvest) * (harvestTime / Math.max(4, plotsAvailable)));
    }
}
/// <reference path="Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD));
        this.description = `Hatch ${amount} Eggs.`;
        this.questFocus = player.statistics.hatchedEggs;
    }
}
/// <reference path="Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD));
        this.description = `Mine ${amount} layers in the underground.`;
        this.questFocus = player.statistics.digDeeper;
    }
}
class QuestHelper {
    static generateQuests(level, refreshes, d) {
        SeededRand.seed(Number(level * (d.getFullYear() + refreshes * 10) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate()));
        const QuestTypes = new Set(GameConstants.QuestTypes);
        for (let i = 0; i < GameConstants.QUESTS_PER_SET; i++) {
            const type = SeededRand.fromArray(Array.from(QuestTypes));
            QuestTypes.delete(type);
            const quest = QuestHelper.random(type, i);
            quest.index = i;
            QuestHelper.questList.push(quest);
        }
    }
    static random(type, index) {
        let amount, route, region;
        switch (type) {
            case 'DefeatPokemons':
                region = SeededRand.intBetween(0, player.highestRegion());
                route = SeededRand.intBetween(GameConstants.RegionRoute[region][0], GameConstants.RegionRoute[region][1]);
                amount = SeededRand.intBetween(100, 500);
                return new DefeatPokemonsQuest(route, region, amount);
            case 'CapturePokemons':
                amount = SeededRand.intBetween(100, 500);
                return new CapturePokemonsQuest(amount);
            case 'GainMoney':
                amount = SeededRand.intBetween(20000, 60000);
                return new GainMoneyQuest(amount);
            case 'GainTokens':
                amount = SeededRand.intBetween(1000, 8000);
                return new GainTokensQuest(amount);
            case 'GainShards':
                const possibleTypes = [
                    PokemonType.Normal,
                    PokemonType.Poison,
                    PokemonType.Water,
                    PokemonType.Grass,
                    PokemonType.Flying,
                    PokemonType.Fire,
                    PokemonType.Fighting,
                ];
                const type = SeededRand.fromArray(possibleTypes);
                amount = SeededRand.intBetween(200, 600);
                return new GainShardsQuest(type, amount);
            case 'HatchEggs':
                amount = SeededRand.intBetween(1, 30);
                return new HatchEggsQuest(amount);
            case 'MineLayers':
                amount = SeededRand.intBetween(1, 3);
                return new MineLayersQuest(amount);
            case 'CatchShinies':
                return new CatchShiniesQuest(1);
            case 'DefeatGym':
                region = SeededRand.intBetween(0, player.highestRegion());
                const gymTown = SeededRand.fromArray(GameConstants.RegionGyms[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatGymQuest(gymTown, amount);
            case 'DefeatDungeon':
                // Allow upto highest region
                region = SeededRand.intBetween(0, player.highestRegion());
                const dungeon = SeededRand.fromArray(GameConstants.RegionDungeons[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatDungeonQuest(dungeon, amount);
            case 'UsePokeball':
                const possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
                const pokeball = SeededRand.fromArray(possiblePokeballs);
                amount = SeededRand.intBetween(100, 500);
                return new UsePokeballQuest(pokeball, amount);
            case 'UseOakItem':
                const possibleItems = [
                    OakItems.OakItem.Magic_Ball,
                    OakItems.OakItem.Amulet_Coin,
                    //OakItems.OakItem.Poison_Barb,
                    OakItems.OakItem.Exp_Share,
                ];
                const oakItem = SeededRand.fromArray(possibleItems);
                amount = SeededRand.intBetween(100, 500);
                return new UseOakItemQuest(oakItem, amount);
            case 'HarvestBerriesQuest':
                const berryType = SeededRand.intBetween(0, GameHelper.enumLength(Berry));
                amount = SeededRand.intBetween(30, 300);
                return new HarvestBerriesQuest(berryType, amount);
        }
    }
    static refreshQuests(free = false) {
        if (free || QuestHelper.canAffordRefresh()) {
            if (!free) {
                App.game.wallet.loseAmount(QuestHelper.getRefreshCost());
            }
            player.questRefreshes++;
            QuestHelper.quitAllQuests();
            QuestHelper.clearQuests();
            QuestHelper.generateQuests(player.questLevel, player.questRefreshes, new Date());
        }
        else {
            Notifier.notify("You can't afford to do that!", GameConstants.NotificationOption.danger);
        }
    }
    static canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    static clearQuests() {
        // Empty quest list and reset completed quests
        QuestHelper.questList.splice(0, GameConstants.QUESTS_PER_SET);
        for (const elem of player.completedQuestList) {
            elem(false);
        }
    }
    // Returns 0 when all quests are complete, ~1 million when none are
    static getRefreshCost() {
        const notComplete = player.completedQuestList.filter((elem) => {
            return !elem();
        }).length;
        return new Amount(Math.floor(250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1)), GameConstants.Currency.money);
    }
    static loadCurrentQuests(saved) {
        for (let i = 0; i < saved().length; i++) {
            QuestHelper.questList()[saved()[i].index].initial(saved()[i].initial());
        }
    }
    // 1000 xp needed to reach level 2, amount needed for next level increases by 20% of previous level
    static levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    static xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    static canStartNewQuest() {
        // Two conditions for starting new quest:
        // 1. Current quests not exceed maximum slots
        // 2. At least one quest is neither completed nor in-progress
        if (player.currentQuests().length >= this.questSlots()()) {
            return false;
        }
        for (let i = 0; i < QuestHelper.questList().length; i++) {
            if (!(player.completedQuestList[i]() || QuestHelper.questList()[i].isCompleted()
                || QuestHelper.questList()[i].inProgress()())) {
                return true;
            }
        }
        return false;
    }
    static onQuest(index) {
        return ko.observable(player.currentQuests().map(x => x.index).includes(index));
    }
    static beginQuest(index) {
        if (this.canStartNewQuest()) {
            this.questList()[index].beginQuest();
            player.currentQuests.push({
                index: index,
                initial: this.questList()[index].initial(),
            });
            player.currentQuests.sort((x, y) => x.index - y.index);
        }
        else {
            Notifier.notify('You cannot start more quests', GameConstants.NotificationOption.danger);
        }
    }
    static quitAllQuests() {
        const questIndexArr = player.currentQuests().map(x => x.index);
        questIndexArr.forEach(index => {
            this.questList()[index].endQuest();
        });
    }
    // returns true is all quest are completed
    static allQuestCompleted() {
        for (const questCompleted of player.completedQuestList) {
            if (!questCompleted()) {
                return false;
            }
        }
        return true;
    }
    static questSlots() {
        return ko.computed(function () {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(1, player ? Math.floor(player.questLevel / 5) : 1));
        }, this);
    }
}
QuestHelper.questList = ko.observableArray();
class QuestLine {
    constructor(name, description) {
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.computed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.computed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                setTimeout(() => {
                    this.beginQuest(this.curQuest());
                }, 2000);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index, initial) {
        const quest = this.quests()[index];
        if (typeof initial == 'undefined') {
            initial = quest.questFocus();
        }
        quest.initial(initial);
        this.curQuestInitial(quest.initial());
    }
    resumeAt(index, state) {
        if (typeof state != 'undefined') {
            for (let i = 0; i < index; i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, state);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
}
class QuestLineHelper {
    static createTutorial() {
        this.tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going');
        //Defeat Starter
        const defeatStarter = new CapturePokemonsQuest(1);
        //Capture pokemon because start sequence resets route 1 kills to 0, making this quest think it is incomplete
        defeatStarter.pointsReward = 10;
        defeatStarter.description = 'Defeat the pokemon. Click to deal damage';
        this.tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        const captureOne = new CapturePokemonsQuest(1);
        captureOne.pointsReward = 20;
        captureOne.description = 'Capture 1 pokemon. When you defeat a pokemon, a pokeball is thrown and you have a chance to capture it.';
        this.tutorial.addQuest(captureOne);
        //Kill 5 on route 2
        const routeTwo = new DefeatPokemonsQuest(2, 0, 5);
        routeTwo.pointsReward = 30;
        routeTwo.description = 'Defeat 5 pokemon on route 2. Click route 2 on the map to move there and begin fighting.';
        this.tutorial.addQuest(routeTwo);
        //Defeat Pewter Gym
        const pewter = new DefeatGymQuest(GameConstants.KantoGyms[0], 1);
        pewter.pointsReward = 40;
        pewter.description = 'Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.';
        this.tutorial.addQuest(pewter);
        //Buy pokeballs
        const buyPokeballs = new BuyPokeballsQuest(20, GameConstants.Pokeball.Pokeball, 50);
        buyPokeballs.pointsReward = 50;
        buyPokeballs.description = 'Buy 20 pokeballs. You can find these in the Pewter City Shop.';
        this.tutorial.addQuest(buyPokeballs);
        //Kill 10 on route 3
        const routeThree = new DefeatPokemonsQuest(3, 0, 10);
        routeThree.pointsReward = 100;
        this.tutorial.addQuest(routeThree);
        //Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 10, 'Buy the Dungeon ticket from Pewter City Shop.', () => +App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket));
        this.tutorial.addQuest(buyDungeonTicket);
        //Cleat Mt Moon dungeon
        const clearMtMoon = new DefeatDungeonQuest(GameConstants.KantoDungeons[2], 1);
        clearMtMoon.pointsReward = 10;
        clearMtMoon.description = 'Gather 75 Dungeon tokens by capturing Pokemon, then clear the Mt. Moon dungeon.';
        this.tutorial.addQuest(clearMtMoon);
        this.tutorialTracker = this.tutorial.curQuestInitial.subscribe((newInitial) => {
            player.tutorialProgress(QuestLineHelper.tutorial.curQuest());
            player.tutorialState = newInitial;
        });
        this.tutorialCompleter = this.tutorial.curQuest.subscribe((quest) => {
            if (quest == QuestLineHelper.tutorial.totalQuests) {
                QuestLineHelper.tutorialTracker.dispose();
                player.tutorialState = null;
                player.tutorialProgress(quest);
                player.tutorialComplete(true);
            }
        });
    }
}
/// <reference path="Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(item, amount) {
        super(amount, amount * GameConstants.USE_OAK_ITEM_BASE_REWARD);
        this.description = `Gain the benefit from the ${GameConstants.humanifyString(OakItems.OakItem[item])} ${amount} times.`;
        this.questFocus = player.statistics.oakItemUses[item];
    }
}
/// <reference path="Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(pokeball, amount) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        super(amount, Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD));
        this.description = `Use ${amount} ${GameConstants.Pokeball[pokeball]}s.`;
        this.questFocus = player.statistics.pokeballsUsed[pokeball];
    }
}
/// <reference path="../../libs/motio.d.ts" />
class Safari {
    static load() {
        Safari.grid = [];
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.inBattle(false);
        Safari.inProgress(true);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < GameConstants.Safari.SizeY; i++) {
            const row = [...Array(GameConstants.Safari.SizeX)].map(Number.prototype.valueOf, 0);
            Safari.grid.push(row);
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(GameConstants.Safari.SizeX - 2);
        let y = Safari.getRandomCoord(GameConstants.Safari.SizeY - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        const res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Math.floor(Math.random() * (max - 3)) + 1;
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= GameConstants.Safari.SizeY ||
            x + body.maxX() >= GameConstants.Safari.SizeX) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < GameConstants.Safari.SizeY && (j + x) < GameConstants.Safari.SizeX) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < GameConstants.Safari.SizeY && (j + x) < GameConstants.Safari.SizeX) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static openModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify('You do not have access to that location', GameConstants.NotificationOption.warning);
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        return new Amount(50, GameConstants.Currency.questPoint);
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Safari_ticket);
    }
    static show() {
        let html = '';
        for (let i = 0; i < Safari.grid.length; i++) {
            html += "<div class='row'>";
            for (let j = 0; j < Safari.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += '</div>';
        }
        $('#safariBody').html(html);
        Safari.addPlayer(Math.floor(GameConstants.Safari.SizeX - 1) / 2, GameConstants.Safari.SizeY - 1);
    }
    static square(i, j) {
        const img = `assets/images/safari/${this.grid[i][j]}.png`;
        const divId = `safari-${j}-${i}`;
        return `<div id='${divId}' style=background-image:url('${img}') class='safariSquare'></div>`;
    }
    static addPlayer(i, j) {
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left,
        };
        $('#safariBody').append("<div id='sprite'></div>");
        $('#sprite').css('background', `url('assets/images/safari/walk${Safari.lastDirection}.png')`);
        $('#sprite').css('position', 'absolute');
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
        const element = document.querySelector('#sprite');
        Safari.sprite = new Motio(element, {
            fps: 8,
            frames: 4,
        }).on('frame', function () {
            if (Safari.sprite.frame % 2 == 0) {
                Safari.sprite.pause();
            }
        });
    }
    static move(dir) {
        if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            if (Safari.sprite.frame == 2) {
                Safari.sprite.to(0, true, function () {
                    Safari.step(dir);
                });
            }
            else {
                Safari.step(dir);
            }
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        Safari.sprite.toggle();
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, 'linear', function () {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                }
            });
        }
        else {
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            setTimeout(function () {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            ;
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
        ;
    }
    static checkBattle() {
        let battle = false;
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            battle = Math.random() * GameConstants.SAFARI_BATTLE_CHANCE <= 1;
        }
        if (battle && !Safari.inBattle()) {
            SafariBattle.load();
            return true;
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
}
Safari.player = new Point(12, 20);
Safari.lastDirection = 'up';
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener('DOMContentLoaded', function (event) {
    $('#safariModal').on('hidden.bs.modal', function () {
        MapHelper.moveToTown('Fuchsia City');
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load() {
        SafariBattle.enemy = SafariPokemon.random();
        Safari.inBattle(true);
        Notifier.notify('Battle', GameConstants.NotificationOption.info);
        SafariBattle.text('What will you do?');
        SafariBattle.unlockButtons();
        SafariBattle.escapeAttempts = 0;
    }
    static throwBall() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            Safari.balls(Safari.balls() - 1);
            $('#safariEnemy').css('transition-duration', `${0.75 * SafariBattle.Speed.enemyTransition}ms`);
            SafariBattle.text('You throw a ball...');
            const enemyImg = $('#safariEnemy').offset();
            enemyImg.left += 48;
            const ptclhtml = '<div><img id="safariBall" src="../assets/images/safari/pokeball.png"></div>';
            SafariBattle.particle = SafariBattle.dropParticle(ptclhtml, $('#safariPlayer').offset(), enemyImg, SafariBattle.Speed.ballThrow, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            SafariBattle.delay(1.1 * SafariBattle.Speed.ballThrow)(0) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.delay(0.75 * SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.delay(1.7 * SafariBattle.Speed.ballBounce))
                .then(SafariBattle.calcIndex) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.delayRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms) {
        return function (pass) {
            return new Promise((resolve, reject) => {
                setTimeout((pass) => {
                    resolve(pass);
                }, ms);
            });
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariEnemy').addClass('safariCapture');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('body').css('animation-duration', `${1.6 * SafariBattle.Speed.ballBounce}ms`);
            $('#safariEnemy > img').css('opacity', '0');
            SafariBattle.particle.addClass('bounce');
            resolve();
        });
    }
    static calcIndex() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
            if (index != 0) {
                $('body').css('animation-duration', `${SafariBattle.Speed.ballRoll}ms`);
                SafariBattle.startRoll(index);
            }
            resolve([random, index]);
        });
    }
    static delayRoll(result) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(result);
            }, (0.2 + 1.2 * result[1]) * SafariBattle.Speed.ballRoll);
        });
    }
    static finishCapture(result) {
        const [random, index] = result;
        const isgameOver = (Safari.balls() == 0);
        return new Promise((resolve, reject) => {
            if (random * 100 < SafariBattle.enemy.catchFactor) {
                SafariBattle.capturePokemon();
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                setTimeout(function () {
                    SafariBattle.particle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                }, 1.7 * SafariBattle.Speed.enemyTransition);
            }
            else {
                $('#safariEnemy > img').css('opacity', '1');
                $('#safariEnemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[index]);
                SafariBattle.particle.remove();
                setTimeout(function () {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                }, 1 * SafariBattle.Speed.enemyTransition);
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`<br>GOTCHA!<br>${SafariBattle.enemy.name} was caught!`);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id, SafariBattle.enemy.shiny);
    }
    static throwBait() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text(`You throw some bait at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.eating = Math.max(SafariBattle.enemy.eating, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.angry = 0;
            const enemy = $('#safariEnemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle('<img src="assets/images/safari/bait.png">', $('#safariPlayer').offset(), enemy, 1000, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.eating = 0;
            const enemy = $('#safariEnemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariPlayer').offset(), enemy, 800, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(function () {
                const hitSplash = $('<ptcl>').html("<img src='assets/images/safari/hit.png'>").children().appendTo('body');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, function () {
                    hitSplash.remove();
                });
                setTimeout(function () {
                    const newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20,
                    };
                    const ang = $('<ptcl>').html("<img src='assets/images/safari/angry.png'>").children().appendTo('body');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(function () {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(function () {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text('You flee.');
            setTimeout(SafariBattle.endBattle, 1500);
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        const random = Math.floor(Math.random() * 100);
        if (random < SafariBattle.enemy.escapeFactor) {
            SafariBattle.text(`${SafariBattle.enemy.name} has fled.`);
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is eating.`);
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.name} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(function () {
            SafariBattle.text('What will you do?');
            SafariBattle.busy = false;
            SafariBattle.unlockButtons();
        }, 1500);
    }
    static lockButtons() {
        $('.safariOption button').attr('disabled', 'true');
    }
    static unlockButtons() {
        $('.safariOption button').attr('disabled', null);
    }
    static endBattle() {
        Safari.inBattle(false);
        SafariBattle.busy = false;
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(function () {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy = false;
            $('#safariModal').modal('toggle');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('body');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(function () {
                p.fadeOut();
            }, time - 200);
            setTimeout(function () {
                p.remove();
            }, time);
        }
        return p;
    }
    ;
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = false;
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(function () {
        SafariBattle.safariRoll(n - 1);
    }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(function () {
            SafariBattle.safariRoll(n - 1);
        }, 1200);
    }
};
(function (SafariBattle) {
    SafariBattle.Speed = {
        animation: 1000,
        ballThrow: 750,
        ballBounce: 850,
        ballRoll: 700,
        enemyTransition: 1000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokemon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Math.floor(Math.random() * 3) + 3;
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Math.floor(Math.random() * (sizeX - 2));
            const y = Math.floor(Math.random() * (sizeY - 2));
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Math.random() >= 0.5) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        const options = [26, 28, 29, 31];
        const pick = options[Math.floor(Math.random() * options.length)];
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 3;
        const y = Math.floor(Math.random() * 3) + 3;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 4;
        const y = Math.floor(Math.random() * 3) + 4;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        if (this.shiny) {
            Notifier.notify(`✨ You encountered a shiny ${name}! ✨`, GameConstants.NotificationOption.warning);
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        let catchF = this.baseCatchFactor + oakBonus;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        if (this.eating > 0) {
            return this.baseEscapeFactor / 4;
        }
        if (this.angry > 0) {
            return this.baseEscapeFactor * 2;
        }
        return this.baseEscapeFactor;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    static random() {
        const rand = Math.random() * SafariPokemon.listWeight;
        let i = 0;
        for (const pokemon of SafariPokemon.list) {
            i += pokemon.weight;
            if (rand < i) {
                return new SafariPokemon(pokemon.name);
            }
        }
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: 'Nidoran(F)', weight: 15 },
    { name: 'Nidorina', weight: 10 },
    { name: 'Nidoran(M)', weight: 25 },
    { name: 'Nidorino', weight: 10 },
    { name: 'Exeggcute', weight: 20 },
    { name: 'Paras', weight: 5 },
    { name: 'Parasect', weight: 15 },
    { name: 'Rhyhorn', weight: 10 },
    { name: 'Chansey', weight: 4 },
    { name: 'Scyther', weight: 4 },
    { name: 'Pinsir', weight: 4 },
    { name: 'Kangaskhan', weight: 15 },
    { name: 'Tauros', weight: 10 },
    { name: 'Cubone', weight: 10 },
    { name: 'Marowak', weight: 5 },
    { name: 'Tangela', weight: 4 },
];
SafariPokemon.listWeight = SafariPokemon.list.reduce((sum, pokemon) => {
    return sum += pokemon.weight;
}, 0);
class Setting {
    // Leave options array empty to allow all options.
    constructor(name, displayName, options, defaultValue) {
        this.name = name;
        this.displayName = displayName;
        this.options = options;
        this.defaultValue = defaultValue;
        this.observableValue = ko.observable(this.defaultValue);
        this.set(defaultValue);
    }
    set(value) {
        if (this.validValue(value)) {
            this.value = value;
            this.observableValue(value);
        }
        else {
            console.log(`${value} is not a valid value for setting ${this.name}`);
        }
    }
    validValue(value) {
        if (!this.isUnlocked(value)) {
            return false;
        }
        if (this.options.length === 0) {
            return true;
        }
        for (let i = 0; i < this.options.length; i++) {
            if (this.options[i].value === value) {
                return true;
            }
        }
        return false;
    }
    isSelected(value) {
        return ko.computed(function () {
            return this.observableValue() === value;
        }, this);
    }
    isUnlocked(value) {
        return true;
    }
}
/// <reference path="Setting.ts" />
class MultipleChoiceSetting extends Setting {
    constructor(name, displayName, options, defaultValue) {
        super(name, displayName, options, defaultValue);
    }
}
/// <reference path="MultipleChoiceSetting.ts" />
class BooleanSetting extends MultipleChoiceSetting {
    constructor(name, displayName, defaultValue) {
        super(name, displayName, [
            new GameConstants.Option('On', true),
            new GameConstants.Option('Off', false),
        ], defaultValue);
    }
    toggle() {
        this.set(!this.value);
    }
}
var SortOptions;
(function (SortOptions) {
    SortOptions[SortOptions["id"] = 0] = "id";
    SortOptions[SortOptions["name"] = 1] = "name";
    SortOptions[SortOptions["attack"] = 2] = "attack";
    SortOptions[SortOptions["level"] = 3] = "level";
    SortOptions[SortOptions["shiny"] = 4] = "shiny";
})(SortOptions || (SortOptions = {}));
/// <reference path="Setting.ts" />
/// <reference path="BooleanSetting.ts"/>
/// <reference path="MultipleChoiceSetting.ts"/>
///<reference path="SortOptions.ts"/>
class Settings {
    static add(setting) {
        if (!this.getSetting(setting.name)) {
            this.list.push(setting);
        }
    }
    static load(dict) {
        for (const name in dict) {
            const value = dict[name];
            this.setSettingByName(name, value);
        }
    }
    static setSettingByName(name, value) {
        const setting = this.getSetting(name);
        if (setting) {
            setting.set(value);
        }
        else {
            console.log(`Setting ${name} does not exist`);
        }
    }
    static getSetting(name) {
        for (let i = 0; i < this.list.length; i++) {
            if (this.list[i].name == name) {
                return this.list[i];
            }
        }
        return null;
    }
    static save() {
        const dict = {};
        for (let i = 0; i < this.list.length; i++) {
            dict[this.list[i].name] = this.list[i].value;
        }
        return JSON.stringify(dict);
    }
}
Settings.list = [];
Settings.add(new MultipleChoiceSetting('theme', 'Theme', [
    new GameConstants.Option('Cerulean', 'cerulean'),
    new GameConstants.Option('Cosmo', 'cosmo'),
    new GameConstants.Option('Cyborg', 'cyborg'),
    new GameConstants.Option('Darkly', 'darkly'),
    new GameConstants.Option('Flatly', 'flatly'),
    new GameConstants.Option('Journal', 'journal'),
    new GameConstants.Option('Litera', 'litera'),
    new GameConstants.Option('Lumen', 'lumen'),
    new GameConstants.Option('Lux', 'lux'),
    new GameConstants.Option('Materia', 'materia'),
    new GameConstants.Option('Minty', 'minty'),
    new GameConstants.Option('Pulse', 'pulse'),
    new GameConstants.Option('Sandstone', 'sandstone'),
    new GameConstants.Option('Simplex', 'simplex'),
    new GameConstants.Option('Sketchy', 'sketchy'),
    new GameConstants.Option('Slate', 'slate'),
    new GameConstants.Option('Solar', 'solar'),
    new GameConstants.Option('Spacelab', 'spacelab'),
    new GameConstants.Option('Superhero', 'superhero'),
    new GameConstants.Option('United', 'united'),
    new GameConstants.Option('Yeti (default)', 'yeti'),
], 'yeti'));
Settings.add(new MultipleChoiceSetting('partySort', 'Sort:', [
    new GameConstants.Option('Pokedex #', SortOptions.id),
    new GameConstants.Option('Name', SortOptions.name),
    new GameConstants.Option('Attack', SortOptions.attack),
    new GameConstants.Option('Level', SortOptions.level),
    new GameConstants.Option('Shiny', SortOptions.shiny),
], SortOptions.id));
Settings.add(new MultipleChoiceSetting('breedingDisplay', 'Breeding progress display:', [
    new GameConstants.Option('Percentage', 'percentage'),
    new GameConstants.Option('Step count', 'stepCount'),
], 'percentage'));
Settings.add(new BooleanSetting('partySortDirection', 'reverse', false));
class Town {
    constructor(name, routes, shop, dungeon, dungeonReq) {
        this._name = ko.observable(name);
        this._gym = ko.observable(gymList[name]);
        this._reqRoutes = routes;
        this._shop = ko.observable(shop);
        this._dungeon = ko.observable(dungeon);
        this.dungeonReq = dungeonReq;
        this.startingTown = GameConstants.StartingTowns.indexOf(this._name()) > -1;
    }
    get name() {
        return this._name;
    }
    get reqRoutes() {
        return this._reqRoutes;
    }
    get gym() {
        return this._gym;
    }
    get shop() {
        return this._shop;
    }
    get dungeon() {
        return this._dungeon;
    }
    hasRouteReq() {
        for (const i of this.reqRoutes) {
            if (player.statistics.routeKills[i]() < GameConstants.ROUTE_KILLS_NEEDED) {
                return false;
            }
        }
        return true;
    }
    hasDungeonReq() {
        if (this.dungeonReq != undefined) {
            return 0 < player.statistics.dungeonsCleared[Statistics.getDungeonIndex(this.dungeonReq)]();
        }
        else {
            return true;
        }
    }
    isUnlocked() {
        return this.hasRouteReq() && this.hasDungeonReq();
    }
}
class DungeonTown extends Town {
    constructor(name, routes, badge) {
        super(name, routes, null, dungeonList[name]);
        this.badgeReq = badge;
    }
    isUnlocked() {
        return (this.hasRouteReq() && App.game.badgeCase.hasBadge(this.badgeReq));
    }
}
const TownList = {};
//Kanto Towns
const PewterCityShop = new Shop(['Pokeball', 'Token_collector', 'xExp', 'Dungeon_ticket']);
TownList['Pewter City'] = new Town('Pewter City', [2], PewterCityShop);
const CeruleanCityShop = new Shop(['Water_stone', 'xAttack', 'Water_egg']);
TownList['Cerulean City'] = new Town('Cerulean City', [4], CeruleanCityShop, dungeonList['Cerulean Cave']);
const VermillionCityShop = new Shop(['Thunder_stone', 'xExp', 'Electric_egg']);
TownList['Vermillion City'] = new Town('Vermillion City', [6], VermillionCityShop);
const CeladonCityShop = new Shop(['Eevee', 'Porygon', 'Jynx', 'Mr. Mime', 'Lickitung']);
TownList['Celadon City'] = new Town('Celadon City', [8], CeladonCityShop);
const SaffronCityShop = new Shop(['Moon_stone', 'xClick', 'Leaf_stone', 'Fighting_egg']);
TownList['Saffron City'] = new Town('Saffron City', [5], SaffronCityShop);
const FuchsiaCityShop = new Shop(['Ultraball', 'Trade_stone', 'xExp', 'Dragon_egg']);
TownList['Fuchsia City'] = new Town('Fuchsia City', [18], FuchsiaCityShop);
const CinnabarIslandShop = new Shop(['Fire_stone', 'Fire_egg', 'SmallRestore', 'Explorer_kit']);
TownList['Cinnabar Island'] = new Town('Cinnabar Island', [20], CinnabarIslandShop, dungeonList['Pokemon Mansion']);
const ViridianCityShop = new Shop(['xAttack', 'xClick', 'Mystery_egg']);
TownList['Viridian City'] = new Town('Viridian City', [1], ViridianCityShop);
TownList['Pallet Town'] = new Town('Pallet Town', []);
const LavenderTownShop = new Shop(['Greatball', 'Item_magnet', 'Lucky_incense', 'Grass_egg']);
TownList['Lavender Town'] = new Town('Lavender Town', [10], LavenderTownShop, dungeonList['Pokemon Tower']);
//Kanto Dungeons
TownList['Viridian Forest'] = new DungeonTown('Viridian Forest', [1]);
TownList['Digletts Cave'] = new DungeonTown('Digletts Cave', [1], BadgeCase.Badge.Boulder);
TownList['Mt. Moon'] = new DungeonTown('Mt. Moon', [3], BadgeCase.Badge.Boulder);
TownList['Rock Tunnel'] = new DungeonTown('Rock Tunnel', [9], BadgeCase.Badge.Cascade);
TownList['Power Plant'] = new DungeonTown('Power Plant', [9], BadgeCase.Badge.Cascade);
TownList['Pokemon Tower'] = new DungeonTown('Pokemon Tower', [10], BadgeCase.Badge.Cascade);
TownList['Seafoam Islands'] = new DungeonTown('Seafoam Islands', [19], BadgeCase.Badge.Soul);
TownList['Victory Road'] = new DungeonTown('Victory Road', [22], BadgeCase.Badge.Earth);
TownList['Cerulean Cave'] = new DungeonTown('Cerulean Cave', [4], BadgeCase.Badge.Elite_KantoChampion);
TownList['Pokemon Mansion'] = new DungeonTown('Pokemon Mansion', [20], BadgeCase.Badge.Soul);
//Johto Towns
const NewBarkTownShop = new Shop(['Pokeball']);
TownList['New Bark Town'] = new Town('New Bark Town', [], NewBarkTownShop);
const CherrygroveCityShop = new Shop(['Greatball']);
TownList['Cherrygrove City'] = new Town('Cherrygrove City', [29], CherrygroveCityShop);
const VioletCityShop = new Shop(['MediumRestore', 'Togepi']);
TownList['Violet City'] = new Town('Violet City', [31], VioletCityShop, dungeonList['Sprout Tower']);
const AzaleaTownShop = new Shop(['Kings_rock']);
TownList['Azalea Town'] = new Town('Azalea Town', [33], AzaleaTownShop, dungeonList['Slowpoke Well']);
const GoldenrodCityShop = new Shop(['Sun_stone', 'Upgrade']);
TownList['Goldenrod City'] = new Town('Goldenrod City', [34], GoldenrodCityShop);
TownList['Ecruteak City'] = new Town('Ecruteak City', [37]);
const OlivineCityShop = new Shop(['Metal_coat']);
TownList['Olivine City'] = new Town('Olivine City', [39], OlivineCityShop);
const CianwoodCityShop = new Shop(['Ultraball', 'Time_stone']);
TownList['Cianwood City'] = new Town('Cianwood City', [41], CianwoodCityShop);
TownList['Mahogany Town'] = new Town('Mahogany Town', [42], null, null, 'Mt Mortar');
const BlackthornCityShop = new Shop(['LargeRestore', 'Dragon_scale']);
TownList['Blackthorn City'] = new Town('Blackthorn City', [44], BlackthornCityShop, null, 'Ice Path');
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', [31]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', [32]);
TownList['Union Cave'] = new DungeonTown('Union Cave', [32]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', [33]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', [33]);
TownList['Burned Tower'] = new DungeonTown('Burned Tower', [37]);
TownList['Tin Tower'] = new DungeonTown('Tin Tower', [37]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', [41]);
TownList['Mt Mortar'] = new DungeonTown('Mt Mortar', [42]);
TownList['Ice Path'] = new DungeonTown('Ice Path', [44]);
TownList['Dark Cave'] = new DungeonTown('Dark Cave', [45]);
TownList['Mt Silver'] = new DungeonTown('Mt Silver', [28], BadgeCase.Badge.Elite_Karen);
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', []);
TownList['Oldale Town'] = new Town('Oldale Town', [101]);
TownList['Petalburg City'] = new Town('Petalburg City', [102]);
TownList['Rustboro City'] = new Town('Rustboro City', [104], null, null, 'Petalburg Woods');
TownList['Dewford Town'] = new Town('Dewford Town', [116], null, null, 'Rusturf Tunnel');
TownList['Slateport City'] = new Town('Slateport City', [], null, null, 'Granite Cave');
TownList['Mauville City'] = new Town('Mauville City', [110]);
TownList['Verdanturf Town'] = new Town('Verdanturf Town', [117]);
TownList['Lavaridge Town'] = new Town('Lavaridge Town', [115], null, null, 'Mt. Chimney');
TownList['Fallarbor Town'] = new Town('Fallarbor Town', [113]);
TownList['Fortree City'] = new Town('Fortree City', [119]);
TownList['Lilycove City'] = new Town('LilyCove City', [121], null, null, 'Mt. Pyre');
TownList['Mossdeep City'] = new Town('Mossdeep City', [125], null, null, 'Shoal Cave');
TownList['Sootopolis City'] = new Town('Sootopolis City', [126], null, null, 'Cave of Origin');
TownList['Ever Grande City'] = new Town('Ever Grande City', [128]);
TownList['Pokemon League Hoenn'] = new Town('Pokemon League', [128], null, null, 'Victory Road Hoenn');
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', [131]);
// TODO Implement
//Hoenn Dungeons
// TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', [104]);
// TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', [116], BadgeCase.Badge.Stone);
// TownList['Granite Cave'] = new DungeonTown('Granite Cave', [116], BadgeCase.Badge.Knuckle);
// TownList['Fiery Path'] = new DungeonTown('Fiery Path', [111], BadgeCase.Badge.Dynamo);
// TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', [114]);
// TownList['Mt. Chimney'] = new DungeonTown('Mt. Chimney', [115]);
// TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', [115]);
// TownList['New Mauville'] = new DungeonTown('New Mauville', [112], BadgeCase.Badge.Heat);
// TownList['Sea Mauville'] = new DungeonTown('Sea Mauville', [108]);
// TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', [122]);
// TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', [125]);
// TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', [126]);
// TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', [127]);
// TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', [131]);
// TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', [128], BadgeCase.Badge.Rain);
///<reference path="Town.ts"/>
class PokemonLeague extends Town {
    constructor(name, routes, shop, dungeonReq, gyms) {
        super(name, routes, shop, null, dungeonReq);
        this.gym(null);
        this.gymList = ko.observableArray();
        for (const gym of gyms) {
            this.gymList.push(ko.observable(gymList[gym]));
        }
    }
    setupGymTowns() {
        for (const gym of this.gymList()) {
            TownList[gym().town] = TownList[this.name()];
        }
    }
}
const indigoPlateauKanto = ['Elite Lorelei', 'Elite Bruno', 'Elite Agatha', 'Elite Lance', 'Champion Blue'];
TownList['Indigo Plateau Kanto'] = new PokemonLeague('Indigo Plateau Kanto', [23], new Shop(['Masterball', 'RareCandy']), 'Victory Road', indigoPlateauKanto);
TownList['Indigo Plateau Kanto'].setupGymTowns();
const indigoPlateauJohto = ['Elite Will', 'Elite Koga', 'Elite Bruno2', 'Elite Karen', 'Champion Lance'];
TownList['Indigo Plateau Johto'] = new PokemonLeague('Indigo Plateau Johto', [27], new Shop(['Protein']), null, indigoPlateauJohto);
TownList['Indigo Plateau Johto'].setupGymTowns();
const pokemonLeagueHoenn = ['Elite Sidney', 'Elite Phoebe', 'Elite Glacia', 'Elite Drake', 'Champion Wallace'];
TownList['Pokemon League Hoenn'] = new PokemonLeague('Pokemon League Hoenn', [128], null, 'Victory Road Hoenn', pokemonLeagueHoenn);
TownList['Pokemon League Hoenn'].setupGymTowns();
///<reference path="PokemonLeague.ts"/>
/*
class IndigoPlateau extends PokemonLeague {

    constructor(shop?: Shop) {
        super("Indigo Plateau Kanto", [23], shop, null, "Victory Road");
        this.gym(null);
        this.gymList = ko.observableArray<KnockoutObservable<Gym>>();
        this.gymList.push(ko.observable(gymList["Elite Lorelei"]));
        this.gymList.push(ko.observable(gymList["Elite Bruno"]));
        this.gymList.push(ko.observable(gymList["Elite Agatha"]));
        this.gymList.push(ko.observable(gymList["Elite Lance"]));
        this.gymList.push(ko.observable(gymList["Champion Blue"]));

        //todo add champion
    }

}
*/
/*
TownList["Elite Lorelei"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Bruno"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Agatha"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Lance"] = TownList["Indigo Plateau Kanto"];
TownList["Champion Blue"] = TownList["Indigo Plateau Kanto"];
*/
class TypeHelper {
    //@formatter:on
    /*eslint-enable */
    static getAttackModifier(a1, a2, d1, d2) {
        if (a1 == PokemonType.None || d1 == PokemonType.None) {
            return 1;
        }
        const list = player.shardUpgrades;
        //TODO factor in shard value
        let m1 = TypeHelper.typeMatrix[a1][d1];
        m1 += (list[a1][this.valueToType(m1)]() * GameConstants.SHARD_UPGRADE_STEP);
        let m2 = 1, m3 = 1, m4 = 1;
        if (d2 != PokemonType.None) {
            m2 = TypeHelper.typeMatrix[a1][d2];
            m2 += (list[a1][this.valueToType(m2)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        if (a2 != PokemonType.None) {
            m3 = TypeHelper.typeMatrix[a2][d1];
            m3 += (list[a2][this.valueToType(m3)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        if (a2 != PokemonType.None && d2 != PokemonType.None) {
            m4 = TypeHelper.typeMatrix[a2][d2];
            m4 += (list[a2][this.valueToType(m4)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        return m1 * m2 * m3 * m4;
    }
    static typeToValue(type) {
        return GameConstants.TypeEffectivenessValue[GameConstants.TypeEffectivenessValue[type]];
    }
    static valueToType(value) {
        switch (value) {
            case GameConstants.TypeEffectivenessValue.Immune:
                return GameConstants.TypeEffectiveness.Immune;
            case GameConstants.TypeEffectivenessValue.NotVery:
                return GameConstants.TypeEffectiveness.NotVery;
            case GameConstants.TypeEffectivenessValue.Normal:
                return GameConstants.TypeEffectiveness.Normal;
            case GameConstants.TypeEffectivenessValue.Very:
                return GameConstants.TypeEffectiveness.Very;
        }
    }
}
//@formatter:off
/*eslint-disable */
TypeHelper.typeMatrix = [
    //                E              F
    //                L              I                   P
    // N              E              G    P    G    F    S                   D
    // O         W    C    G         H    O    R    L    Y              G    R         S    F  <- Defending type
    // R    F    A    T    R         T    I    O    Y    C         R    H    A    D    T    A
    // M    I    T    R    A    I    I    S    U    I    H    B    O    O    G    A    E    I   Attack type
    // A    R    E    I    S    C    N    O    N    N    I    U    C    S    O    R    E    R        |
    // L    E    R    C    S    E    G    N    D    G    C    G    K    T    N    K    L    Y        v
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0, 1, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 2, 1, 1, 1, 1, 1, 2, 0.5, 1, 0.5, 1, 2, 1],
    [1, 2, 0.5, 1, 0.5, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0.5, 1, 1, 1],
    [1, 1, 2, 0.5, 0.5, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0.5, 1, 1, 1],
    [1, 0.5, 2, 1, 0.5, 1, 1, 0.5, 2, 0.5, 1, 0.5, 2, 1, 0.5, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 0.5, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0.5, 1],
    [2, 1, 1, 1, 1, 2, 1, 0.5, 1, 0.5, 0.5, 0.5, 2, 0, 1, 2, 2, 0.5],
    [1, 1, 1, 1, 2, 1, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 0, 2],
    [1, 2, 1, 2, 0.5, 1, 1, 2, 1, 0, 1, 0.5, 2, 1, 1, 1, 2, 1],
    [1, 1, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 0.5, 1],
    [1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0.5, 1, 1, 1, 1, 0, 0.5, 1],
    [1, 0.5, 1, 1, 2, 1, 0.5, 0.5, 1, 0.5, 2, 1, 1, 0.5, 1, 2, 0.5, 0.5],
    [1, 2, 1, 1, 1, 2, 0.5, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 0.5, 1],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0.5, 0],
    [1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 0.5],
    [1, 0.5, 0.5, 0.5, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0.5, 2],
    [1, 0.5, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 1, 1, 1, 2, 2, 0.5, 1],
];
TypeHelper.typeColors = [
    '595c3b',
    'b10818',
    '294a94',
    'b57b31',
    '4a944a',
    '42a59c',
    'b54a4a',
    '7b42c6',
    '946b4a',
    '218cb5',
    'ce6363',
    '8cb521',
    'a58c4a',
    '605a72',
    '8c424a',
    '4a6b84',
    '737373',
    'd694ce',
];
TypeHelper.typeColorsLocked = [
    'd3d4c4',
    'fb9d9d',
    '99b6ff',
    'ffda99',
    'aff1a7',
    'b5efef',
    'f1bba7',
    'e7ccff',
    'e3d1b5',
    '99dfff',
    'ffb5ad',
    'dbf99f',
    'e3d1b5',
    'c8c3d5',
    'e7b1b1',
    'bcccdc',
    'cccccc',
    'ffc6e7',
];
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static randomItem() {
        return UndergroundItem.list[Math.floor(UndergroundItem.list.length * SeededRand.next())];
    }
    static randomAmount() {
        return Math.floor(3 * SeededRand.next()) + 1;
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        for (let i = 0; i < maxDeals; i++) {
            const deal = new DailyDeal();
            if (deal.isValid()) {
                DailyDeal.list.push(deal);
            }
        }
    }
    isValid() {
        return ((this.item1.name !== this.item2.name) && !DailyDeal.reverseDealExists(this.item1.name, this.item2.name) && !this.item1.isStone());
    }
    static reverseDealExists(name1, name2) {
        for (const deal of DailyDeal.list) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        const deal = DailyDeal.list[i];
        const index = player.mineInventoryIndex(deal.item1.id);
        if (index > -1) {
            return player.mineInventory[index].amount() >= deal.amount1;
        }
        else {
            return false;
        }
    }
    static use(i) {
        const deal = DailyDeal.list[i];
        const item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            const amt = player.mineInventory[item1Index].amount();
            player.mineInventory[item1Index].amount(amt - deal.amount1);
            Underground.gainMineItem(deal.item2.id, deal.amount2);
            //player._statistics.dailyDealsUsed(player._statistics.dailyDealsUsed()+1);
        }
    }
}
DailyDeal.list = [];
class Mine {
    static loadMine() {
        const tmpGrid = [];
        const tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsFound = ko.observable(0);
        Mine.itemsBuried = 0;
        for (let i = 0; i < this.sizeY; i++) {
            const row = [];
            const rewardRow = [];
            for (let j = 0; j < this.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Math.random() * 2 + Math.random() * 3) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        for (let i = 0; i < Underground.getMaxItems(); i++) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(this.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(this.sizeY, item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
            }
        }
        Mine.loadingNewLayer = false;
        Underground.showMine();
    }
    static getRandomCoord(max, size) {
        return Math.floor(Math.random() * (max - size - 1)) + 1;
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        if (y + reward.space.length >= this.sizeY || x + reward.space[0].length >= this.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (const row of Mine.rewardGrid) {
            for (const item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    Mine.rewardGrid[i + y][j + x] = {
                        x: j,
                        y: i,
                        value: reward.space[i][j],
                        revealed: 0,
                    };
                }
            }
        }
        Mine.itemsBuried++;
        Mine.rewardNumbers.push(reward.id);
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (Underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)](Math.max(0, Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() - 1));
                }
            }
            if (hasMined) {
                Underground.energy = Underground.energy - Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (Underground.energy >= Underground.CHISEL_ENERGY) {
                Mine.grid[Mine.normalizeY(x)][Mine.normalizeX(y)](Math.max(0, Mine.grid[Mine.normalizeY(x)][Mine.normalizeX(y)]() - 2));
                Underground.energy = Underground.energy - Underground.CHISEL_ENERGY;
            }
        }
    }
    static normalizeX(x) {
        return Math.min(this.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(this.sizeY - 1, Math.max(0, y));
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                Underground.gainMineItem(Mine.rewardNumbers[i]);
                const itemName = Underground.getMineItemById(Mine.rewardNumbers[i]).name;
                Notifier.notify(`You found ${GameHelper.anOrA(itemName)} ${itemName}`, GameConstants.NotificationOption.success);
                Mine.itemsFound(Mine.itemsFound() + 1);
                GameHelper.incrementObservable(player.statistics.digItems);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < this.sizeX; i++) {
            for (let j = 0; j < this.sizeY; j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried) {
            setTimeout(Mine.completed, 1500);
            Mine.loadingNewLayer = true;
            GameHelper.incrementObservable(player.statistics.digDeeper);
            App.game.oakItems.use(OakItems.OakItem.Cell_Battery);
        }
    }
    static completed() {
        Notifier.notify('You dig deeper...', GameConstants.NotificationOption.info);
        ko.cleanNode(document.getElementById('mineBody'));
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById('mineBody'));
    }
    static loadSavedMine(mine) {
        this.grid = mine.grid.map((row) => {
            return row.map((num) => {
                return ko.observable(num);
            });
        });
        this.rewardGrid = mine.rewardGrid;
        this.itemsFound = ko.observable(mine.itemsFound);
        this.itemsBuried = mine.itemsBuried;
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        Underground.showMine();
    }
    static serialize() {
        const mine = {
            grid: this.grid,
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound,
            itemsBuried: this.itemsBuried,
            rewardNumbers: this.rewardNumbers,
        };
        return ko.toJSON(mine);
    }
}
Mine.sizeX = 25;
Mine.sizeY = 12;
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
class SeededRand {
    static next() {
        this.state = (this.state * this.MULTIPLIER + this.OFFSET) % this.MOD;
        return this.state / this.MOD;
    }
    static seedWithDate(d) {
        this.state = Number((d.getFullYear() - 1900) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate());
    }
    static seed(state) {
        this.state = state;
    }
    static intBetween(min, max) {
        return Math.floor((max - min + 1) * SeededRand.next() + min);
    }
    static fromArray(arr) {
        return arr[SeededRand.intBetween(0, arr.length - 1)];
    }
}
SeededRand.state = 12345;
SeededRand.MOD = 233280;
SeededRand.OFFSET = 49297;
SeededRand.MULTIPLIER = 9301;
class Underground {
    static getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(Underground.Upgrades.Energy_Max).calculateBonus();
    }
    static getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(Underground.Upgrades.Items_Max).calculateBonus();
    }
    static getEnergyGain() {
        return Underground.BASE_ENERGY_GAIN + this.getUpgrade(Underground.Upgrades.Energy_Gain).calculateBonus();
    }
    static getEnergyRegenTime() {
        return Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(Underground.Upgrades.Energy_Regen_Time).calculateBonus();
    }
    static getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(Underground.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    static getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = '';
        const itemsFound = "Mine.itemsFound() + '/' + Mine.itemsBuried + ' items found'";
        html += '</div>';
        for (let i = 0; i < Mine.grid.length; i++) {
            html += "<div class='row'>";
            for (let j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += '</div>';
        }
        html += `<div class='row'>
                  <button onClick='Mine.toolSelected(Mine.Tool.Hammer)' class='btn btn-danger'>Hammer (${Underground.HAMMER_ENERGY} energy)</button>
                  <button onClick='Mine.toolSelected(Mine.Tool.Chisel)' class='btn btn-info'>Chisel (${Underground.CHISEL_ENERGY} energy)</button>
                  <h3 data-bind='text: Mine.itemsFound() + "/" + Mine.itemsBuried + " items found"'></h3>
                </div>`;
        $('#mineBody').html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() === 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            return `<img src='assets/images/underground/${Mine.rewardGrid[i][j].value}/${Mine.rewardGrid[i][j].value}-${Mine.rewardGrid[i][j].y}-${Mine.rewardGrid[i][j].x}.png' data-bind='css: Underground.rewardCssClass' data-i='${i}' data-j='${j}'>`;
        }
        else {
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})()' data-i='${i}' data-j='${j}'></div>`;
        }
    }
    static calculateCssClass(i, j) {
        return ko.computed(function () {
            return `col-sm-1 rock${Math.max(Mine.grid[i][j](), 0)} mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
        }, this, {
            disposeWhen: function () {
                if (Mine.grid[i][j]() == 0) {
                    if (Mine.rewardGrid[i][j] != 0 && Mine.rewardGrid[i][j].revealed != 1) {
                        Mine.rewardGrid[i][j].revealed = 1;
                        $(`div[data-i=${i}][data-j=${j}]`).replaceWith(`<img src='assets/images/underground/${Mine.rewardGrid[i][j].value}/${Mine.rewardGrid[i][j].value}-${Mine.rewardGrid[i][j].y}-${Mine.rewardGrid[i][j].x}.png' data-bind='css: Underground.rewardCssClass' data-i='${i}' data-j='${j}'>`);
                        ko.applyBindings(null, $(`img[data-i=${i}][data-j=${j}]`)[0]);
                        Mine.checkItemsRevealed();
                    }
                }
                return false;
            },
        });
    }
    static gainMineItem(id, num = 1) {
        const index = player.mineInventoryIndex(id);
        const item = Underground.getMineItemById(id);
        if (item.isStone()) {
            const evostone = ItemList[item.valueType];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            const tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType,
            };
            player.mineInventory.push(tempItem);
        }
        else {
            const amt = player.mineInventory[index].amount();
            player.mineInventory[index].amount(amt + num);
        }
    }
    static getMineItemById(id) {
        for (const item of UndergroundItem.list) {
            if (item.id == id) {
                return item;
            }
        }
    }
    static gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            const oakMultiplier = App.game.oakItems.calculateBonus(OakItems.OakItem.Cell_Battery);
            this.energy = Math.min(this.getMaxEnergy(), this.energy + (oakMultiplier * this.getEnergyGain()));
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify('Your mining energy has reached maximum capacity!', GameConstants.NotificationOption.success);
            }
        }
    }
    static gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        const gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify(`You restored ${gain} mining energy!`, GameConstants.NotificationOption.success);
    }
    static sellMineItem(id) {
        for (let i = 0; i < player.mineInventory.length; i++) {
            const item = player.mineInventory[i];
            if (item.id == id) {
                if (item.amount() > 0) {
                    const success = Underground.gainProfit(item);
                    if (success) {
                        const amt = item.amount();
                        player.mineInventory[i].amount(amt - 1);
                    }
                    return;
                }
            }
        }
    }
    static gainProfit(item) {
        let success = true;
        switch (item.valueType) {
            case 'Diamond':
                App.game.wallet.gainDiamonds(item.value);
                break;
            case 'Mine Egg':
                if (!App.game.breeding.hasFreeEggSlot()) {
                    return false;
                }
                success = App.game.breeding.gainEgg(App.game.breeding.createFossilEgg(item.name));
                break;
            default:
                const type = item.valueType.charAt(0).toUpperCase() + item.valueType.slice(1); //Capitalizes string
                const typeNum = PokemonType[type];
                player._shardsCollected[typeNum](player._shardsCollected[typeNum]() + GameConstants.PLATE_VALUE);
        }
        return success;
    }
    static openUndergroundModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.paused;
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify('You do not have access to that location', GameConstants.NotificationOption.warning);
        }
    }
    static canAccess() {
        return MapHelper.accessToRoute(11, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
    static calculateItemEffect(item) {
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    static load(saveObject) {
        if (!saveObject) {
            console.log('Underground not loaded.');
            return;
        }
        const upgrades = saveObject['upgrades'];
        for (const item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                Underground.getUpgrade(Underground.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = saveObject['energy'] || 0;
    }
    static save() {
        const undergroundSave = {};
        const upgradesSave = {};
        for (const item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = Underground.getUpgrade(Underground.Upgrades[item]).level;
            }
        }
        undergroundSave['upgrades'] = upgradesSave;
        undergroundSave['energy'] = this.energy;
        return undergroundSave;
    }
    // Knockout getters/setters
    static get energy() {
        return this._energy();
    }
    static set energy(value) {
        this._energy(value);
    }
}
Underground.saveKey = 'underground';
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground._energy = ko.observable(0);
Underground.upgradeList = [];
Underground.rewardCssClass = ko.pureComputed(function () {
    return `col-sm-1 mineReward mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
});
$(document).ready(function () {
    $('body').on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i), parseInt(this.dataset.j));
    });
    $('#mineModal').on('hidden.bs.modal', function () {
        if (player.route() == 11) {
            App.game.gameState = GameConstants.GameState.fighting;
        }
        else {
            MapHelper.moveToRoute(11, GameConstants.Region.kanto);
        }
    });
});
(function (Underground) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Energy_Gain"] = 2] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 3] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 4] = "Daily_Deals_Max";
    })(Upgrades = Underground.Upgrades || (Underground.Upgrades = {}));
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.HAMMER_ENERGY = 3;
    Underground.CHISEL_ENERGY = 1;
})(Underground || (Underground = {}));
class UndergroundItem {
    constructor(name, id, space, value = 1, valueType = 'Diamond') {
        this.name = name;
        this.id = id;
        this.space = space;
        this.value = value;
        this.valueType = valueType;
    }
    static addItem(name, id, space, ...rest) {
        UndergroundItem.list.push(new UndergroundItem(name, id, space, ...rest));
    }
    static initialize() {
        this.addItem('Helix Fossil', 1, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1]], 0, 'Mine Egg');
        this.addItem('Dome Fossil', 2, [[2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [0, 2, 2, 2, 0]], 0, 'Mine Egg');
        this.addItem('Old Amber', 3, [[0, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 0]], 0, 'Mine Egg');
        // this.addItem("Root Fossil", 4, [[0,0,4,4,4], [0,0,4,4,4], [4,0,0,4,4], [4,4,4,4,4], [0,4,4,4,0]], 3);
        // this.addItem("Claw Fossil", 5, [[5,5,5,0,0], [5,5,5,5,0], [0,5,5,5,5], [0,0,0,5,5]], 3);
        // this.addItem("Armor Fossil", 6, [[0,6,6,6,0], [0,6,6,6,0], [6,6,6,6,6], [0,6,6,6,0]], 3);
        // this.addItem("Skull Fossil", 7, [[7,7,7,7], [7,7,7,7], [7,7,7,7], [0,7,7,0]], 3);
        this.addItem('Rare Bone', 8, [[8, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 8]], 3);
        this.addItem('Star Piece', 9, [[0, 9, 0], [9, 9, 9], [0, 9, 0]], 5);
        this.addItem('Revive', 10, [[0, 10, 0], [10, 10, 10], [0, 10, 0]], 2);
        this.addItem('Max Revive', 11, [[11, 11, 11], [11, 11, 11], [11, 11, 11]], 4);
        this.addItem('Iron Ball', 12, [[12, 12, 12], [12, 12, 12], [12, 12, 12]], 2);
        this.addItem('Heart Scale', 13, [[13, 0], [13, 13]], 10);
        this.addItem('Light Clay', 14, [[14, 0, 14, 0], [14, 14, 14, 0], [14, 14, 14, 14], [0, 14, 0, 14]], 2);
        this.addItem('Odd Keystone', 15, [[15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15]], 6);
        this.addItem('Hard Stone', 16, [[16, 16], [16, 16]], 4);
        this.addItem('Fire Stone', 17, [[17, 17, 17], [17, 17, 17], [17, 17, 17]], 1, 'Fire_stone');
        this.addItem('Water Stone', 18, [[18, 18, 18], [18, 18, 18], [18, 18, 0]], 1, 'Water_stone');
        this.addItem('Thunder Stone', 19, [[0, 19, 19], [19, 19, 19], [19, 19, 0]], 1, 'Thunder_stone');
        this.addItem('Leaf Stone', 20, [[0, 20, 0], [20, 20, 20], [20, 20, 20], [0, 20, 0]], 1, 'Leaf_stone');
        this.addItem('Moon Stone', 21, [[0, 21, 21, 21], [21, 21, 21, 0]], 1, 'Moon_stone');
        this.addItem('Sun Stone', 22, [[0, 22, 0], [22, 22, 22], [22, 22, 22]], 1, 'Sun_stone');
        this.addItem('Oval Stone', 23, [[23, 23, 23], [23, 23, 23], [23, 23, 23]], 3);
        this.addItem('Everstone', 24, [[24, 24, 24], [24, 24, 24]], 3);
        this.addItem('Smooth Rock', 25, [[25, 25, 25], [25, 25, 25], [25, 25, 25]], 2);
        this.addItem('Heat Rock', 26, [[26, 26, 26], [26, 26, 26]], 2);
        this.addItem('Icy Rock', 27, [[27, 27, 27], [27, 27, 27], [27, 27, 27]], 2);
        this.addItem('Damp Rock', 28, [[28, 28, 28], [28, 28, 28], [28, 0, 28]], 2);
        this.addItem('Draco Plate', 29, [[29, 29, 29, 29], [29, 29, 29, 29], [29, 29, 29, 29]], 100, 'dragon');
        this.addItem('Dread Plate', 30, [[30, 30, 30, 30], [30, 30, 30, 30], [30, 30, 30, 30]], 100, 'dark');
        this.addItem('Earth Plate', 31, [[31, 31, 31, 31], [31, 31, 31, 31], [31, 31, 31, 31]], 100, 'ground');
        this.addItem('Fist Plate', 32, [[32, 32, 32, 32], [32, 32, 32, 32], [32, 32, 32, 32]], 100, 'fighting');
        this.addItem('Flame Plate', 33, [[33, 33, 33, 33], [33, 33, 33, 33], [33, 33, 33, 33]], 100, 'fire');
        this.addItem('Icicle Plate', 34, [[34, 34, 34, 34], [34, 34, 34, 34], [34, 34, 34, 34]], 100, 'ice');
        this.addItem('Insect Plate', 35, [[35, 35, 35, 35], [35, 35, 35, 35], [35, 35, 35, 35]], 100, 'bug');
        this.addItem('Iron Plate', 36, [[36, 36, 36, 36], [36, 36, 36, 36], [36, 36, 36, 36]], 100, 'steel');
        this.addItem('Meadow Plate', 37, [[37, 37, 37, 37], [37, 37, 37, 37], [37, 37, 37, 37]], 100, 'grass');
        this.addItem('Mind Plate', 38, [[38, 38, 38, 38], [38, 38, 38, 38], [38, 38, 38, 38]], 100, 'psychic');
        this.addItem('Sky Plate', 39, [[39, 39, 39, 39], [39, 39, 39, 39], [39, 39, 39, 39]], 100, 'flying');
        this.addItem('Splash Plate', 40, [[40, 40, 40, 40], [40, 40, 40, 40], [40, 40, 40, 40]], 100, 'water');
        this.addItem('Spooky Plate', 41, [[41, 41, 41, 41], [41, 41, 41, 41], [41, 41, 41, 41]], 100, 'ghost');
        this.addItem('Stone Plate', 42, [[42, 42, 42, 42], [42, 42, 42, 42], [42, 42, 42, 42]], 100, 'rock');
        this.addItem('Toxic Plate', 43, [[43, 43, 43, 43], [43, 43, 43, 43], [43, 43, 43, 43]], 100, 'poison');
        this.addItem('Zap Plate', 44, [[44, 44, 44, 44], [44, 44, 44, 44], [44, 44, 44, 44]], 100, 'electric');
        this.addItem('Pixie Plate', 45, [[45, 45, 45, 45], [45, 45, 45, 45], [45, 45, 45, 45]], 100, 'fairy');
    }
    static getRandomItem() {
        const i = Math.floor(Math.random() * (UndergroundItem.list.length));
        return UndergroundItem.list[i] || UndergroundItem.list[0];
    }
    isStone() {
        return ItemList[this.valueType] instanceof EvolutionStone;
    }
    static getFullResourceName(valuetype, amt) {
        if (valuetype != 'Diamond' && amt >= 50) {
            valuetype += ' shard';
        }
        if (amt > 1) {
            valuetype += 's';
        }
        return GameConstants.humanifyString(valuetype);
    }
}
UndergroundItem.list = [];
class Amount {
    constructor(amount, currency) {
        this.amount = amount;
        this.currency = currency;
    }
}
///<reference path="../GameConstants.ts"/>
///<reference path="Amount.ts"/>
class AmountFactory {
    static createArray(amounts, currency) {
        const array = [];
        for (let i = 0; i < amounts.length; i++) {
            array.push(new Amount(amounts[i], currency));
        }
        return array;
    }
}
///<reference path="../wallet/AmountFactory.ts"/>
///<reference path="../underground/Underground.ts"/>
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
}
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Max, 'Max Energy', 10, AmountFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Items_Max, 'Max items', 4, AmountFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Gain, 'Energy restored', 17, AmountFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Regen_Time, 'Energy regen time', 20, AmountFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Daily_Deals_Max, 'Daily deals', 2, AmountFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)));
class Preload {
    static hideSplashScreen(fast = false) {
        if (fast) {
            $('.loader').hide();
        }
        else {
            $('.loader').fadeOut('slow');
        }
    }
    static load(skipWait = false) {
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                Preload.loadSplashScreen();
                Preload.loadSplashScreen();
                Preload.loadBackground();
                Preload.loadMap();
                Preload.loadTowns();
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                Promise.all([
                    Preload.loadSplashScreen(),
                    Preload.loadSplashScreen(),
                    Preload.loadBackground(),
                    Preload.loadMap(),
                    Preload.loadTowns(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    resolve();
                }).catch((reason => {
                    console.log(reason);
                }));
            });
        }
    }
    static loadTowns() {
        const p = Array();
        for (const name in TownList) {
            if (name.indexOf('Elite') !== -1 || name.indexOf('Champion') !== -1) {
                continue;
            }
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => resolve();
                img.onerror = () => resolve();
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadSplashScreen() {
        return new Promise(resolve => {
            const img = new Image();
            img.onload = () => {
                const loader = $('#loader');
                loader.css('background', 'url(assets/images/background.png) top');
                loader.css('background-size', 'cover');
                resolve();
            };
            img.src = 'assets/images/background.png';
        });
    }
    static loadBackground() {
        return new Promise(resolve => {
            const img = new Image();
            img.onload = () => {
                const body = $('body');
                body.css('background', 'url(assets/images/background.png) top');
                body.css('background-size', 'cover');
                resolve();
            };
            img.src = 'assets/images/background.png';
        });
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.TotalPokemonsPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => resolve();
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
class Wallet {
    constructor() {
        this.name = 'Wallet';
        this.saveKey = 'wallet';
        this.defaults = {
            currencies: [0, 0, 0, 0, 0],
        };
        this.currencies = new ArrayOfObservables(this.defaults.currencies);
    }
    gainMoney(base, origin) {
        App.game.oakItems.use(OakItems.OakItem.Amulet_Coin);
        let money = base;
        money *= App.game.oakItems.calculateBonus(OakItems.OakItem.Amulet_Coin);
        money *= AchievementHandler.getMoneyMultiplier();
        money *= EffectEngineRunner.getMoneyMultiplier();
        money = Math.floor(money);
        GameHelper.incrementObservable(player.statistics.totalMoney, money);
        GameController.animateCurrency(money, 'playerMoney');
        this.addAmount(new Amount(money, Currency.money));
        return money;
    }
    gainDungeonTokens(base, origin) {
        let tokens = base;
        tokens *= EffectEngineRunner.getDungeonTokenMultiplier();
        tokens = Math.floor(tokens);
        GameHelper.incrementObservable(player.statistics.totalTokens, tokens);
        GameController.animateCurrency(tokens, 'playerMoneyDungeon');
        this.addAmount(new Amount(tokens, Currency.dungeonToken));
    }
    gainQuestPoints(base, origin) {
        let points = base;
        points = Math.floor(points);
        GameHelper.incrementObservable(player.statistics.totalQuestPoints, points);
        GameController.animateCurrency(points, 'playerMoneyQuest');
        this.addAmount(new Amount(points, Currency.questPoint));
    }
    gainDiamonds(base, origin) {
        let diamonds = base;
        diamonds = Math.floor(diamonds);
        GameHelper.incrementObservable(player.statistics.totalDiamonds, diamonds);
        this.addAmount(new Amount(diamonds, Currency.diamond));
    }
    gainFarmPoints(base, origin) {
        let points = base;
        points = Math.floor(points);
        GameHelper.incrementObservable(player.statistics.totalFarmPoints, points);
        this.addAmount(new Amount(points, Currency.farmPoint));
    }
    addAmount(amount) {
        this.currencies[amount.currency] += amount.amount;
    }
    ;
    hasAmount(amount) {
        return this.currencies[amount.currency] >= amount.amount;
    }
    ;
    loseAmount(amount) {
        this.currencies[amount.currency] -= amount.amount;
    }
    ;
    initialize() {
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (json['currencies'] == null) {
            this.currencies = new ArrayOfObservables(this.defaults.currencies);
        }
        else {
            const currenciesJson = json['currencies'];
            this.currencies = new ArrayOfObservables([
                currenciesJson[GameConstants.Currency.money],
                currenciesJson[GameConstants.Currency.questPoint],
                currenciesJson[GameConstants.Currency.dungeonToken],
                currenciesJson[GameConstants.Currency.diamond],
                currenciesJson[GameConstants.Currency.farmPoint],
            ]);
        }
    }
    toJSON() {
        return {
            'currencies': [
                this.currencies[GameConstants.Currency.money],
                this.currencies[GameConstants.Currency.questPoint],
                this.currencies[GameConstants.Currency.dungeonToken],
                this.currencies[GameConstants.Currency.diamond],
                this.currencies[GameConstants.Currency.farmPoint],
            ],
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
}
/**
 * Datalist of all Pokémon that are encountered on the routes
 * No need to ever use this list, use RouteHelper instead
 * If you ever need to use this list, request changes in RouteHelper instead.
 */
const pokemonsPerRoute = {
    0: {
        1: {
            land: ['Pidgey', 'Rattata'],
            water: [],
            headbutt: [],
        },
        2: {
            land: ['Caterpie', 'Weedle', 'Rattata', 'Nidoran(F)', 'Nidoran(M)'],
            water: [],
            headbutt: [],
        },
        3: {
            land: ['Pidgey', 'Rattata', 'Spearow', 'Sandshrew', 'Jigglypuff', 'Mankey'],
            water: [],
            headbutt: [],
        },
        4: {
            land: ['Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Mankey'],
            water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby', 'Seaking'],
            headbutt: [],
        },
        5: {
            land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Abra', 'Bellsprout'],
            water: [],
            headbutt: [],
        },
        6: {
            land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Abra', 'Bellsprout'],
            water: ['Poliwag', 'Goldeen', 'Shellder', 'Krabby'],
            headbutt: [],
        },
        7: {
            land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Vulpix', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Growlithe', 'Abra', 'Bellsprout'],
            water: [],
            headbutt: [],
        },
        8: {
            land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Ekans', 'Sandshrew', 'Vulpix', 'Jigglypuff', 'Meowth', 'Mankey', 'Growlithe', 'Abra', 'Kadabra'],
            water: [],
            headbutt: [],
        },
        9: {
            land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Ekans', 'Sandshrew', 'Nidoran(F)', 'Nidoran(M)', 'Nidorina', 'Nidorino'],
            water: [],
            headbutt: [],
        },
        10: {
            land: ['Rattata', 'Raticate', 'Spearow', 'Ekans', 'Sandshrew', 'Nidoran(F)', 'Nidoran(M)', 'Machop', 'Magnemite', 'Voltorb'],
            water: ['Poliwag', 'Goldeen', 'Poliwhirl', 'Slowpoke', 'Krabby', 'Kingler', 'Horsea'],
            headbutt: [],
        },
        11: {
            land: ['Pidgey', 'Pidgeotto', 'Raticate', 'Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Drowzee'],
            water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby', 'Horsea'],
            headbutt: [],
        },
        12: {
            land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Snorlax'],
            water: ['Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Krabby', 'Horsea', 'Seadra'],
            headbutt: [],
        },
        13: {
            land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Ditto'],
            water: ['Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Krabby', 'Horsea', 'Seadra'],
            headbutt: [],
        },
        14: {
            land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell', 'Ditto'],
            water: ['Poliwag', 'Goldeen'],
            headbutt: [],
        },
        15: {
            land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell', 'Ditto'],
            water: [],
            headbutt: [],
        },
        16: {
            land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo', 'Snorlax'],
            water: [],
            headbutt: [],
        },
        17: {
            land: ['Raticate', 'Spearow', 'Fearow', 'Ponyta', 'Doduo', 'Dodrio'],
            water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby'],
            headbutt: [],
        },
        18: {
            land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo'],
            water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby'],
            headbutt: [],
        },
        19: {
            land: [],
            water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
            headbutt: [],
        },
        20: {
            land: [],
            water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
            headbutt: [],
        },
        21: {
            land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Raticate', 'Tangela'],
            water: ['Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
            headbutt: [],
        },
        22: {
            land: ['Rattata', 'Spearow', 'Nidoran(F)', 'Nidoran(M)', 'Mankey'],
            water: ['Poliwag', 'Poliwhirl', 'Goldeen'],
            headbutt: [],
        },
        23: {
            land: ['Spearow', 'Fearow', 'Ekans', 'Arbok', 'Sandshrew', 'Sandslash', 'Nidorina', 'Nidorino', 'Mankey', 'Primeape', 'Ditto'],
            water: ['Poliwag', 'Goldeen', 'Poliwhirl', 'Slowbro', 'Kingler', 'Seadra', 'Seaking'],
            headbutt: [],
        },
        24: {
            land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Abra', 'Bellsprout'],
            water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby', 'Seaking'],
            headbutt: [],
        },
        25: {
            land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Abra', 'Bellsprout'],
            water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby'],
            headbutt: [],
        },
    },
    1: {
        26: {
            land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
            water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        27: {
            land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
            water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        28: {
            land: ['Ponyta', 'Tangela', 'Donphan', 'Ursaring', 'Rapidash', 'Doduo', 'Dodrio', 'Sneasel', 'Murkrow'],
            water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
            headbutt: ['Natu', 'Aipom', 'Heracross'],
        },
        29: {
            land: ['Pidgey', 'Rattata', 'Sentret', 'Hoothoot'],
            water: [],
            headbutt: ['Exeggcute', 'Ledyba', 'Spinarak', 'Hoothoot', 'Pineco'],
        },
        30: {
            land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Hoothoot', 'Ledyba', 'Spinarak'],
            water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        31: {
            land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Poliwag', 'Hoothoot', 'Ledyba', 'Spinarak', 'Bellsprout'],
            water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
            headbutt: ['Spearow', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Aipom', 'Pineco', 'Heracross'],
        },
        32: {
            land: ['Rattata', 'Ekans', 'Zubat', 'Bellsprout', 'Mareep', 'Hoppip', 'Wooper'],
            water: ['Tentacool', 'Tentacruel', 'Quagsire', 'Magikarp', 'Qwilfish'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Pineco'],
        },
        33: {
            land: ['Spearow', 'Rattata', 'Ekans', 'Zubat', 'Hoppip'],
            water: [],
            headbutt: ['Spearow', 'Aipom', 'Heracross'],
        },
        34: {
            land: ['Rattata', 'Abra', 'Drowzee', 'Ditto'],
            water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        35: {
            land: ['Pidgey', 'Nidoran(F)', 'Nidoran(M)', 'Abra', 'Drowzee', 'Ditto', 'Hoothoot', 'Yanma'],
            water: ['Psyduck', 'Golduck', 'Poliwag', 'Magikarp'],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        36: {
            land: ['Pidgey', 'Nidoran(M)', 'Nidoran(F)', 'Vulpix', 'Growlithe', 'Hoothoot', 'Stantler', 'Sudowoodo'],
            water: [],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        37: {
            land: ['Pidgey', 'Pidgeotto', 'Vulpix', 'Growlithe', 'Hoothoot', 'Ledyba', 'Spinarak', 'Stantler'],
            water: [],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        38: {
            land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Snubbull', 'Miltank'],
            water: [],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        39: {
            land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Miltank'],
            water: [],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
        40: {
            land: [],
            water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
            headbutt: [],
        },
        41: {
            land: [],
            water: ['Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Chinchou', 'Shellder'],
            headbutt: [],
        },
        42: {
            land: ['Spearow', 'Zubat', 'Mankey', 'Mareep', 'Flaaffy'],
            water: ['Goldeen', 'Seaking', 'Magikarp'],
            headbutt: ['Spearow', 'Aipom', 'Heracross'],
        },
        43: {
            land: ['Pidgeotto', 'Venonat', 'Noctowl', 'Mareep', 'Flaaffy', 'Girafarig'],
            water: ['Magikarp', 'Poliwag'],
            headbutt: ['Venonat', 'Exeggcute', 'Hoothoot', 'Pineco'],
        },
        44: {
            land: ['Bellsprout', 'Weepinbell', 'Lickitung', 'Tangela'],
            water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Remoraid'],
            headbutt: ['Spearow', 'Aipom', 'Heracross'],
        },
        45: {
            land: ['Geodude', 'Graveler', 'Gligar', 'Teddiursa', 'Skarmory', 'Phanpy'],
            water: ['Magikarp', 'Poliwag'],
            headbutt: ['Spearow', 'Aipom', 'Heracross'],
        },
        46: {
            land: ['Spearow', 'Rattata', 'Geodude'],
            water: [],
            headbutt: ['Spearow', 'Aipom', 'Heracross'],
        },
        47: {
            land: ['Raticate', 'Spearow', 'Fearow', 'Gloom', 'Farfetch\'d', 'Ditto', 'Noctowl', 'Miltank'],
            water: ['Tentacool', 'Seel', 'Staryu', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
            headbutt: ['Metapod', 'Butterfree', 'Kakuna', 'Beedrill', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco', 'Heracross'],
        },
        48: {
            land: ['Fearow', 'Vulpix', 'Gloom', 'Diglett', 'Growlithe', 'Farfetch\'d', 'Tauros', 'Hoppip', 'Girafarig'],
            water: [],
            headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
        },
    },
    2: {
        101: {
            land: ['Wurmple', 'Poochyena', 'Zigzagoon'],
            water: [],
            headbutt: [],
        },
        102: {
            land: ['Poochyena', 'Wurmple', 'Lotad', 'Zigzagoon', 'Ralts', 'Seedot'],
            water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
            headbutt: [],
        },
        103: {
            land: ['Poochyena', 'Wingull', 'Zigzagoon'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        104: {
            land: ['Poochyena', 'Wurmple', 'Marill', 'Taillow', 'Wingull'],
            water: ['Wingull', 'Pelipper', 'Magikarp'],
            headbutt: [],
        },
        105: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        106: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        107: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        108: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        109: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        110: {
            land: ['Poochyena', 'Electrike', 'Gulpin', 'Minun', 'Oddish', 'Wingull', 'Plusle'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        111: {
            land: ['Sandshrew', 'Trapinch', 'Baltoy', 'Cacnea'],
            water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
            headbutt: ['Geodude'],
        },
        112: {
            land: ['Numel', 'Marill'],
            water: [],
            headbutt: [],
        },
        113: {
            land: ['Spinda', 'Slugma', 'Skarmory'],
            water: [],
            headbutt: [],
        },
        114: {
            land: ['Swablu', 'Lotad', 'Lombre', 'Seviper', 'Nuzleaf'],
            water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
            headbutt: ['Geodude'],
        },
        115: {
            land: ['Swablu', 'Taillow', 'Swellow', 'Jigglypuff', 'Wingull'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        116: {
            land: ['Poochyena', 'Whismur', 'Nincada', 'Abra', 'Taillow', 'Skitty'],
            water: [],
            headbutt: [],
        },
        117: {
            land: ['Poochyena', 'Oddish', 'Marill', 'Illumise', 'Volbeat', 'Seedot'],
            water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
            headbutt: [],
        },
        118: {
            land: ['Zigzagoon', 'Electrike', 'Linoone', 'Manectric', 'Wingull', 'Kecleon'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha', 'Sharpedo'],
            headbutt: [],
        },
        119: {
            land: ['Zigzagoon', 'Linoone', 'Oddish', 'Tropius', 'Kecleon'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha'],
            headbutt: [],
        },
        120: {
            land: ['Poochyena', 'Mightyena', 'Oddish', 'Marill', 'Absol', 'Kecleon', 'Seedot'],
            water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
            headbutt: [],
        },
        121: {
            land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        122: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        123: {
            land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
            headbutt: [],
        },
        124: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        125: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        126: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        127: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        128: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Luvdisc', 'Wailmer', 'Corsola'],
            headbutt: [],
        },
        129: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Wailord', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        130: {
            land: ['Wynaut'],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        131: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
            headbutt: [],
        },
        132: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
            headbutt: [],
        },
        133: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
            headbutt: [],
        },
        134: {
            land: [],
            water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
            headbutt: [],
        },
    },
};
///<reference path="PokemonsPerRoute.ts"/>
/**
 * Helper class to retrieve information from PokemonsPerRoute
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémons that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        if (!MapHelper.validRoute(route, region)) {
            route = GameConstants.RegionRoute[region][0];
        }
        const possiblePokemons = pokemonsPerRoute[region][route];
        if (possiblePokemons == null) {
            return ['Rattata'];
        }
        let pokemonList = possiblePokemons.land;
        if (App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        return pokemonList;
    }
    /**
     * Checks if all Pokémons on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        const possiblePokemon = RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt);
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
}
class MapHelper {
    static returnToMap() {
        if (player.currentTown()) {
            return this.moveToTown(player.currentTown());
        }
        if (player.route()) {
            return this.moveToRoute(player.route(), player.region);
        }
    }
    static hasBadgeReq(route, region) {
        return App.game.badgeCase.hasBadge(GameConstants.routeBadgeRequirements[region][route]);
    }
    static hasDungeonReq(route, region) {
        const dungeonReq = GameConstants.routeDungeonRequirements[region][route];
        return dungeonReq == undefined || 0 < player.statistics.dungeonsCleared[Statistics.getDungeonIndex(dungeonReq)]();
    }
    static hasRouteKillReq(route, region) {
        const reqList = GameConstants.routeRequirements[region][route];
        if (reqList == undefined) {
            return true;
        }
        for (let i = 0; i < reqList.length; i++) {
            const route = reqList[i];
            if (player.statistics.routeKills[route]() < GameConstants.ROUTE_KILLS_NEEDED) {
                return false;
            }
        }
        return true;
    }
    static calculateRouteCssClass(route, region) {
        let cls;
        if (player.route() == route && player.region == region) {
            cls = 'currentRoute';
        }
        else if (MapHelper.accessToRoute(route, region)) {
            if (player.statistics.routeKills[route]() >= GameConstants.ROUTE_KILLS_NEEDED) {
                cls = 'unlockedRoute';
            }
            else {
                cls = 'unlockedUnfinishedRoute';
            }
        }
        else {
            cls = 'lockedRoute';
        }
        // Water routes
        if (GameConstants.WaterRoutes[region].has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static calculateTownCssClass(town) {
        // TODO(@Isha) this is very weird, refactor this.
        if (App.game.keyItems.hasKeyItem(KeyItems.KeyItem[town])) {
            return 'city unlockedTown';
        }
        if (player.currentTown() == town) {
            return 'city currentTown';
        }
        if (MapHelper.accessToTown(town)) {
            if (dungeonList.hasOwnProperty(town)) {
                if (player.statistics.dungeonsCleared[Statistics.getDungeonIndex(town)]()) {
                    return 'dungeon completedDungeon';
                }
                return 'dungeon unlockedDungeon';
            }
            return 'city unlockedTown';
        }
        if (dungeonList.hasOwnProperty(town)) {
            return 'dungeon';
        }
        return 'city';
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    ;
    static moveToTown(townName) {
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route(0);
            player.town(TownList[townName]);
            player.currentTown(townName);
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
            GameController.applyRouteBindings();
        }
        else {
            const town = TownList[townName];
            let reqsList = '';
            if (town instanceof DungeonTown) {
                if (town.badgeReq && !App.game.badgeCase.hasBadge(town.badgeReq)) {
                    reqsList += `<br/>Requires the ${BadgeCase.Badge[town.badgeReq]} badge.`;
                }
            }
            if (!town.hasDungeonReq()) {
                reqsList += `<br/>${town.dungeonReq} needs to be completed.`;
            }
            if (!town.hasRouteReq()) {
                const reqList = town.reqRoutes;
                const routesNotCompleted = [];
                for (let i = 0; i < reqList.length; i++) {
                    const route = reqList[i];
                    if (player.statistics.routeKills[route]() < GameConstants.ROUTE_KILLS_NEEDED) {
                        routesNotCompleted.push(route);
                    }
                }
                if (routesNotCompleted.length > 0) {
                    const routesList = routesNotCompleted.join(', ');
                    if (routesNotCompleted.length > 1) {
                        reqsList += `<br/>Routes ${routesList} still need to be completed.`;
                    }
                    else {
                        reqsList += `<br/>Route ${routesList} still needs to be completed.`;
                    }
                }
            }
            Notifier.notify(`You don't have access to that location yet.${reqsList}`, GameConstants.NotificationOption.warning);
        }
    }
    ;
    static validRoute(route = 0, region = 0) {
        return route >= GameConstants.RegionRoute[region][0] && route <= GameConstants.RegionRoute[region][1];
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        switch (player.region) {
            case 0:
                if (TownList['Vermillion City'].isUnlocked() && player.highestRegion() > 0) {
                    openModal();
                    return;
                }
            case 1:
                if (TownList['Olivine City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 2:
                if (TownList['Slateport City'].isUnlocked()) {
                    openModal();
                    return;
                }
        }
        Notifier.notify('You cannot access this dock yet', GameConstants.NotificationOption.warning);
    }
    static ableToTravel() {
        return player.highestRegion() < GameConstants.MAX_AVAILABLE_REGION && App.game.party.caughtPokemon.length >= GameConstants.TotalPokemonsPerRegion[player.highestRegion()];
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            player.highestRegion(player.highestRegion() + 1);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    if (isNaN(route)) {
        return;
    }
    let genNewEnemy = false;
    if (route != player.route()) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player.region = region;
        player.currentTown('');
        if (genNewEnemy) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
        GameController.applyRouteBindings();
    }
    else {
        let reqsList = '';
        if (!MapHelper.hasBadgeReq(route, region)) {
            const badgeNumber = GameConstants.routeBadgeRequirements[region][route];
            reqsList += `<br>Requires the ${BadgeCase.Badge[badgeNumber]} badge.`;
        }
        if (!MapHelper.hasDungeonReq(route, region)) {
            const dungeon = GameConstants.routeDungeonRequirements[region][route];
            reqsList += `<br>${dungeon} dungeon needs to be completed.`;
        }
        if (!MapHelper.hasRouteKillReq(route, region)) {
            const reqList = GameConstants.routeRequirements[region][route];
            const routesNotCompleted = [];
            for (let i = 0; i < reqList.length; i++) {
                const route = reqList[i];
                if (player.statistics.routeKills[route]() < GameConstants.ROUTE_KILLS_NEEDED) {
                    routesNotCompleted.push(route);
                }
            }
            if (routesNotCompleted.length > 0) {
                const routesList = routesNotCompleted.join(', ');
                if (routesNotCompleted.length > 1) {
                    reqsList += `<br>Routes ${routesList} still need to be completed.`;
                }
                else {
                    reqsList += `<br>Route ${routesList} still needs to be completed.`;
                }
            }
        }
        Notifier.notify(`You don't have access to that route yet.${reqsList}`, GameConstants.NotificationOption.warning);
    }
};
MapHelper.accessToRoute = function (route, region) {
    return MapHelper.hasBadgeReq(route, region) && MapHelper.hasDungeonReq(route, region) && MapHelper.hasRouteKillReq(route, region);
};
